
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
  function runWithFS() {
function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'lib', true, true);
Module['FS_createDataFile']('/lib', 'Ufortune', [65, 32, 112, 101, 114, 102, 101, 99, 116, 32, 103, 101, 109, 32, 105, 115, 32, 116, 119, 105, 99, 101, 32, 97, 115, 32, 98, 101, 97, 117, 116, 105, 102, 117, 108, 13, 10, 83, 105, 116, 116, 105, 110, 103, 32, 100, 111, 119, 110, 32, 99, 97, 110, 32, 104, 97, 118, 101, 32, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 114, 101, 115, 117, 108, 116, 115, 13, 10, 68, 111, 110, 39, 116, 32, 112, 114, 121, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 97, 102, 102, 97, 105, 114, 115, 32, 111, 102, 32, 111, 116, 104, 101, 114, 115, 13, 10, 68, 114, 105, 110, 107, 105, 110, 103, 32, 99, 97, 110, 32, 98, 101, 32, 104, 97, 122, 97, 114, 100, 111, 117, 115, 32, 116, 111, 32, 121, 111, 117, 114, 32, 104, 101, 97, 108, 116, 104, 13, 10, 66, 101, 119, 97, 114, 101, 32, 111, 102, 32, 116, 104, 101, 32, 103, 117, 115, 104, 101, 114, 33, 13, 10, 83, 111, 109, 101, 32, 109, 111, 110, 115, 116, 101, 114, 115, 32, 97, 114, 101, 32, 103, 114, 101, 101, 100, 121, 13, 10, 78, 121, 109, 112, 104, 115, 32, 104, 97, 118, 101, 32, 108, 105, 103, 104, 116, 32, 102, 105, 110, 103, 101, 114, 115, 13, 10, 84, 114, 121, 32, 107, 105, 115, 115, 105, 110, 103, 32, 97, 32, 100, 105, 115, 101, 110, 99, 104, 97, 110, 116, 114, 101, 115, 115, 33, 13, 10, 72, 97, 109, 109, 101, 114, 115, 32, 97, 110, 100, 32, 98, 114, 97, 105, 110, 115, 32, 100, 111, 110, 39, 116, 32, 109, 105, 120, 13, 10, 87, 104, 97, 116, 32, 100, 111, 101, 115, 32, 97, 32, 112, 111, 116, 105, 111, 110, 32, 111, 102, 32, 99, 117, 114, 101, 32, 100, 105, 97, 110, 116, 104, 114, 111, 114, 105, 116, 105, 115, 32, 116, 97, 115, 116, 101, 32, 108, 105, 107, 101, 63, 13, 10, 72, 105, 116, 32, 112, 111, 105, 110, 116, 32, 103, 97, 105, 110, 47, 108, 111, 115, 115, 32, 119, 104, 101, 110, 32, 114, 97, 105, 115, 105, 110, 103, 32, 97, 32, 108, 101, 118, 101, 108, 32, 100, 101, 112, 101, 110, 100, 115, 32, 111, 110, 32, 99, 111, 110, 115, 116, 105, 116, 117, 116, 105, 111, 110, 13, 10, 65, 115, 107, 32, 116, 104, 101, 32, 103, 101, 110, 105, 101, 13, 10, 66, 101, 32, 115, 117, 114, 101, 32, 116, 111, 32, 112, 97, 121, 32, 121, 111, 117, 114, 32, 116, 97, 120, 101, 115, 13, 10, 65, 114, 101, 32, 109, 111, 110, 115, 116, 101, 114, 115, 32, 97, 102, 114, 97, 105, 100, 32, 111, 102, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 63, 13, 10, 83, 111, 109, 101, 32, 100, 114, 97, 103, 111, 110, 115, 32, 99, 97, 110, 32, 102, 108, 121, 13, 10, 68, 111, 115, 116, 32, 116, 104, 111, 117, 32, 115, 116, 114, 105, 118, 101, 32, 102, 111, 114, 32, 112, 101, 114, 102, 101, 99, 116, 105, 111, 110, 63, 13, 10, 80, 97, 116, 105, 101, 110, 99, 101, 32, 105, 115, 32, 97, 32, 118, 105, 114, 116, 117, 101, 32, 117, 110, 108, 101, 115, 115, 32, 121, 111, 117, 114, 32, 100, 97, 117, 103, 104, 116, 101, 114, 32, 100, 105, 101, 115, 13, 10, 87, 104, 97, 116, 32, 99, 97, 110, 32, 116, 104, 101, 32, 69, 121, 101, 32, 111, 102, 32, 76, 97, 114, 110, 32, 115, 101, 101, 32, 102, 111, 114, 32, 105, 116, 115, 32, 103, 117, 97, 114, 100, 105, 97, 110, 63, 13, 10, 65, 32, 108, 101, 118, 101, 108, 45, 50, 53, 32, 112, 108, 97, 121, 101, 114, 32, 99, 97, 115, 116, 115, 32, 108, 105, 107, 101, 32, 99, 114, 97, 122, 121, 33, 13, 10, 83, 112, 101, 108, 108, 115, 32, 110, 111, 116, 32, 114, 101, 103, 101, 110, 101, 114, 97, 116, 105, 110, 103, 63, 32, 32, 89, 111, 117, 32, 110, 101, 101, 100, 32, 109, 111, 114, 101, 32, 101, 110, 101, 114, 103, 121, 13, 10, 68, 105, 102, 102, 105, 99, 117, 108, 116, 121, 32, 97, 102, 102, 101, 99, 116, 115, 32, 114, 101, 103, 101, 110, 101, 114, 97, 116, 105, 111, 110, 13, 10, 67, 111, 110, 116, 114, 111, 108, 32, 111, 102, 32, 116, 104, 101, 32, 112, 101, 115, 107, 121, 32, 115, 112, 105, 114, 105, 116, 115, 32, 105, 115, 32, 109, 111, 115, 116, 32, 104, 101, 108, 112, 102, 117, 108, 13, 10, 68, 111, 110, 39, 116, 32, 102, 97, 108, 108, 32, 105, 110, 116, 111, 32, 97, 32, 98, 111, 116, 116, 111, 109, 108, 101, 115, 115, 32, 112, 105, 116, 13, 10, 87, 97, 116, 99, 104, 32, 111, 117, 116, 32, 102, 111, 114, 32, 116, 114, 97, 112, 32, 100, 111, 111, 114, 115, 13, 10, 68, 101, 120, 116, 101, 114, 105, 116, 121, 32, 97, 108, 108, 111, 119, 115, 32, 121, 111, 117, 32, 116, 111, 32, 99, 97, 114, 114, 121, 32, 109, 111, 114, 101, 13, 10, 89, 111, 117, 32, 99, 97, 110, 32, 103, 101, 116, 32, 50, 32, 112, 111, 105, 110, 116, 115, 32, 111, 102, 32, 87, 67, 32, 102, 111, 114, 32, 116, 104, 101, 32, 112, 114, 105, 99, 101, 32, 111, 102, 32, 111, 110, 101, 13, 10, 78, 101, 118, 101, 114, 32, 101, 110, 116, 101, 114, 32, 116, 104, 101, 32, 100, 117, 110, 103, 101, 111, 110, 32, 110, 97, 107, 101, 100, 33, 32, 32, 84, 104, 101, 32, 109, 111, 110, 115, 116, 101, 114, 115, 32, 119, 105, 108, 108, 32, 108, 97, 117, 103, 104, 32, 97, 116, 32, 121, 111, 117, 33, 13, 10, 68, 105, 100, 32, 115, 111, 109, 101, 111, 110, 101, 32, 112, 117, 116, 32, 105, 116, 99, 104, 105, 110, 103, 32, 112, 111, 119, 100, 101, 114, 32, 105, 110, 32, 121, 111, 117, 114, 32, 97, 114, 109, 111, 114, 63, 13, 10, 84, 97, 107, 101, 32, 116, 104, 101, 32, 101, 120, 112, 114, 101, 115, 115, 13, 10, 65, 118, 111, 105, 100, 32, 111, 112, 101, 110, 105, 110, 103, 32, 100, 111, 111, 114, 115, 32, 45, 45, 32, 121, 111, 117, 32, 110, 101, 118, 101, 114, 32, 107, 110, 111, 119, 32, 119, 104, 97, 116, 115, 32, 111, 110, 32, 116, 104, 101, 32, 111, 116, 104, 101, 114, 32, 115, 105, 100, 101, 46, 13, 10, 84, 104, 101, 32, 103, 114, 101, 97, 116, 101, 115, 116, 32, 119, 101, 97, 112, 111, 110, 32, 105, 110, 32, 116, 104, 101, 32, 103, 97, 109, 101, 32, 104, 97, 115, 32, 110, 111, 116, 32, 116, 104, 101, 32, 104, 105, 103, 104, 101, 115, 116, 32, 87, 101, 97, 112, 111, 110, 32, 67, 108, 97, 115, 115, 13, 10, 84, 104, 101, 32, 109, 111, 115, 116, 32, 112, 111, 119, 101, 114, 102, 117, 108, 32, 115, 99, 114, 111, 108, 108, 32, 105, 115, 110, 39, 116, 32, 102, 111, 114, 32, 115, 97, 108, 101, 13, 10, 73, 100, 101, 110, 116, 105, 102, 121, 32, 116, 104, 105, 110, 103, 115, 32, 98, 101, 102, 111, 114, 101, 32, 121, 111, 117, 32, 117, 115, 101, 32, 116, 104, 101, 109, 13, 10, 84, 104, 101, 114, 101, 39, 115, 32, 109, 111, 114, 101, 32, 116, 104, 97, 110, 32, 111, 110, 101, 32, 119, 97, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 97, 32, 119, 97, 108, 108, 13, 10, 84, 114, 121, 32, 68, 101, 97, 108, 101, 114, 32, 77, 99, 68, 111, 112, 101, 39, 115, 32, 102, 111, 114, 32, 97, 108, 108, 32, 121, 111, 117, 114, 32, 114, 101, 99, 114, 101, 97, 116, 105, 111, 110, 97, 108, 32, 110, 101, 101, 100, 115, 33, 13, 10, 87, 104, 111, 32, 105, 115, 32, 116, 111, 117, 103, 104, 101, 114, 32, 116, 104, 97, 110, 32, 97, 32, 100, 101, 109, 111, 110, 32, 112, 114, 105, 110, 99, 101, 63, 13, 10, 83, 108, 97, 121, 101, 114, 32, 104, 97, 115, 32, 97, 32, 103, 114, 117, 100, 103, 101, 13, 10, 87, 111, 110, 100, 101, 114, 102, 117, 108, 32, 119, 97, 110, 100, 115, 32, 112, 114, 101, 118, 101, 110, 116, 32, 121, 111, 117, 32, 102, 114, 111, 109, 32, 102, 97, 108, 108, 105, 110, 103, 13, 10, 73, 116, 32, 105, 115, 32, 115, 97, 105, 100, 32, 116, 104, 97, 116, 32, 116, 104, 101, 32, 107, 105, 110, 103, 32, 105, 115, 32, 110, 101, 118, 101, 114, 32, 102, 97, 114, 32, 102, 114, 111, 109, 32, 104, 105, 115, 32, 116, 104, 114, 111, 110, 101, 13, 10], true, true);
Module['FS_createDataFile']('/lib', 'Uhelp', [59, 32, 32, 32, 32, 87, 101, 108, 99, 111, 109, 101, 32, 116, 111, 32, 116, 104, 101, 32, 103, 97, 109, 101, 32, 111, 102, 32, 85, 108, 97, 114, 110, 46, 32, 32, 65, 116, 32, 116, 104, 105, 115, 32, 109, 111, 109, 101, 110, 116, 44, 32, 121, 111, 117, 32, 102, 97, 99, 101, 32, 97, 32, 103, 114, 101, 97, 116, 32, 112, 114, 111, 98, 108, 101, 109, 46, 13, 10, 89, 111, 117, 114, 32, 100, 97, 117, 103, 104, 116, 101, 114, 32, 104, 97, 115, 32, 99, 111, 110, 116, 114, 97, 99, 116, 101, 100, 32, 97, 32, 115, 116, 114, 97, 110, 103, 101, 32, 100, 105, 115, 101, 97, 115, 101, 32, 97, 110, 100, 32, 110, 111, 110, 101, 32, 111, 102, 32, 121, 111, 117, 114, 32, 104, 111, 109, 101, 32, 114, 101, 109, 101, 100, 105, 101, 115, 13, 10, 115, 101, 101, 109, 115, 32, 116, 111, 32, 104, 97, 118, 101, 32, 97, 110, 121, 32, 101, 102, 102, 101, 99, 116, 46, 32, 32, 89, 111, 117, 32, 115, 101, 110, 115, 101, 32, 116, 104, 97, 116, 32, 115, 104, 101, 32, 105, 115, 32, 105, 110, 32, 109, 111, 114, 116, 97, 108, 32, 100, 97, 110, 103, 101, 114, 32, 97, 110, 100, 32, 121, 111, 117, 32, 109, 117, 115, 116, 13, 10, 116, 114, 121, 32, 116, 111, 32, 115, 97, 118, 101, 32, 104, 101, 114, 46, 32, 32, 84, 105, 109, 101, 32, 97, 103, 111, 32, 121, 111, 117, 32, 104, 101, 97, 114, 100, 32, 111, 102, 32, 97, 32, 108, 97, 110, 100, 32, 111, 102, 32, 103, 114, 101, 97, 116, 32, 100, 97, 110, 103, 101, 114, 32, 97, 110, 100, 32, 111, 112, 112, 111, 114, 116, 117, 110, 105, 116, 121, 46, 13, 10, 80, 101, 114, 104, 97, 112, 115, 32, 104, 101, 114, 101, 32, 105, 115, 32, 116, 104, 101, 32, 115, 111, 108, 117, 116, 105, 111, 110, 32, 121, 111, 117, 32, 110, 101, 101, 100, 46, 13, 10, 13, 10, 32, 32, 32, 32, 73, 116, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 115, 97, 105, 100, 32, 116, 104, 97, 116, 32, 116, 104, 101, 114, 101, 32, 111, 110, 99, 101, 32, 119, 97, 115, 32, 97, 32, 103, 114, 101, 97, 116, 32, 109, 97, 103, 105, 99, 105, 97, 110, 32, 119, 104, 111, 32, 99, 97, 108, 108, 101, 100, 32, 104, 105, 109, 115, 101, 108, 102, 13, 10, 80, 111, 108, 105, 110, 110, 101, 97, 117, 115, 46, 32, 32, 77, 97, 110, 121, 32, 121, 101, 97, 114, 115, 32, 97, 103, 111, 44, 32, 97, 102, 116, 101, 114, 32, 104, 97, 118, 105, 110, 103, 32, 109, 97, 110, 121, 32, 109, 105, 114, 97, 99, 117, 108, 111, 117, 115, 32, 115, 117, 99, 99, 101, 115, 115, 101, 115, 44, 32, 80, 111, 108, 105, 110, 110, 101, 97, 117, 115, 13, 10, 114, 101, 116, 105, 114, 101, 100, 32, 116, 111, 32, 116, 104, 101, 32, 99, 97, 118, 101, 114, 110, 115, 32, 111, 102, 32, 85, 108, 97, 114, 110, 44, 32, 119, 104, 101, 114, 101, 32, 104, 101, 32, 100, 101, 118, 111, 116, 101, 100, 32, 109, 111, 115, 116, 32, 111, 102, 32, 104, 105, 115, 32, 116, 105, 109, 101, 32, 116, 111, 32, 116, 104, 101, 13, 10, 99, 114, 101, 97, 116, 105, 111, 110, 32, 111, 102, 32, 109, 97, 103, 105, 99, 46, 32, 32, 32, 82, 117, 109, 111, 114, 115, 32, 104, 97, 118, 101, 32, 105, 116, 32, 116, 104, 97, 116, 32, 111, 110, 101, 32, 100, 97, 121, 32, 80, 111, 108, 105, 110, 110, 101, 97, 117, 115, 32, 115, 101, 116, 32, 111, 117, 116, 32, 116, 111, 32, 100, 105, 115, 112, 101, 108, 13, 10, 97, 110, 32, 97, 116, 116, 97, 99, 107, 105, 110, 103, 32, 97, 114, 109, 121, 32, 105, 110, 32, 97, 32, 102, 111, 114, 101, 115, 116, 32, 115, 111, 109, 101, 32, 100, 105, 115, 116, 97, 110, 99, 101, 32, 116, 111, 32, 116, 104, 101, 32, 110, 111, 114, 116, 104, 46, 32, 32, 73, 116, 32, 105, 115, 32, 98, 101, 108, 105, 101, 118, 101, 100, 32, 116, 104, 97, 116, 13, 10, 116, 104, 101, 114, 101, 32, 104, 101, 32, 109, 101, 116, 32, 104, 105, 115, 32, 100, 101, 109, 105, 115, 101, 46, 13, 10, 13, 10, 32, 32, 32, 32, 84, 104, 101, 32, 99, 97, 118, 101, 114, 110, 115, 32, 111, 102, 32, 85, 108, 97, 114, 110, 44, 32, 105, 116, 32, 105, 115, 32, 116, 104, 111, 117, 103, 104, 116, 44, 32, 109, 117, 115, 116, 32, 98, 101, 32, 109, 97, 103, 110, 105, 102, 105, 99, 101, 110, 116, 32, 105, 110, 32, 100, 101, 115, 105, 103, 110, 13, 10, 97, 110, 100, 32, 99, 111, 110, 116, 97, 105, 110, 32, 109, 117, 99, 104, 32, 109, 97, 103, 105, 99, 32, 97, 110, 100, 32, 116, 114, 101, 97, 115, 117, 114, 101, 46, 32, 32, 79, 110, 101, 32, 111, 112, 116, 105, 111, 110, 32, 121, 111, 117, 32, 104, 97, 118, 101, 32, 105, 115, 32, 116, 111, 32, 117, 110, 100, 101, 114, 116, 97, 107, 101, 32, 97, 13, 10, 106, 111, 117, 114, 110, 101, 121, 32, 105, 110, 116, 111, 32, 116, 104, 101, 115, 101, 32, 99, 97, 118, 101, 114, 110, 115, 46, 13, 10, 13, 10, 13, 10, 32, 32, 32, 32, 71, 111, 111, 100, 32, 76, 117, 99, 107, 33, 32, 32, 40, 89, 111, 117, 39, 114, 101, 32, 103, 111, 105, 110, 103, 32, 116, 111, 32, 110, 101, 101, 100, 32, 105, 116, 46, 41, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 94, 91, 91, 55, 109, 72, 101, 108, 112, 32, 70, 105, 108, 101, 32, 102, 111, 114, 32, 84, 104, 101, 32, 67, 97, 118, 101, 114, 110, 115, 32, 111, 102, 32, 85, 108, 97, 114, 110, 94, 91, 91, 109, 13, 10, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 94, 91, 91, 55, 109, 83, 116, 97, 110, 100, 97, 114, 100, 32, 67, 111, 109, 109, 97, 110, 100, 115, 94, 91, 91, 109, 13, 10, 104, 32, 32, 109, 111, 118, 101, 32, 116, 111, 32, 116, 104, 101, 32, 108, 101, 102, 116, 32, 32, 32, 32, 72, 32, 32, 114, 117, 110, 32, 108, 101, 102, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 115, 116, 97, 121, 32, 104, 101, 114, 101, 13, 10, 106, 32, 32, 109, 111, 118, 101, 32, 100, 111, 119, 110, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 74, 32, 32, 114, 117, 110, 32, 100, 111, 119, 110, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 90, 32, 32, 116, 101, 108, 101, 112, 111, 114, 116, 32, 121, 111, 117, 114, 115, 101, 108, 102, 13, 10, 107, 32, 32, 109, 111, 118, 101, 32, 117, 112, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 75, 32, 32, 114, 117, 110, 32, 117, 112, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 32, 32, 99, 97, 115, 116, 32, 97, 32, 115, 112, 101, 108, 108, 13, 10, 108, 32, 32, 109, 111, 118, 101, 32, 116, 111, 32, 116, 104, 101, 32, 114, 105, 103, 104, 116, 32, 32, 32, 76, 32, 32, 114, 117, 110, 32, 114, 105, 103, 104, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 32, 32, 114, 101, 97, 100, 32, 97, 32, 115, 99, 114, 111, 108, 108, 13, 10, 121, 32, 32, 109, 111, 118, 101, 32, 110, 111, 114, 116, 104, 119, 101, 115, 116, 32, 32, 32, 32, 32, 32, 89, 32, 32, 114, 117, 110, 32, 110, 111, 114, 116, 104, 119, 101, 115, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 113, 32, 32, 113, 117, 97, 102, 102, 32, 97, 32, 112, 111, 116, 105, 111, 110, 13, 10, 117, 32, 32, 109, 111, 118, 101, 32, 110, 111, 114, 116, 104, 101, 97, 115, 116, 32, 32, 32, 32, 32, 32, 85, 32, 32, 114, 117, 110, 32, 110, 111, 114, 116, 104, 101, 97, 115, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 87, 32, 32, 119, 101, 97, 114, 32, 97, 114, 109, 111, 114, 13, 10, 98, 32, 32, 109, 111, 118, 101, 32, 115, 111, 117, 116, 104, 119, 101, 115, 116, 32, 32, 32, 32, 32, 32, 66, 32, 32, 114, 117, 110, 32, 115, 111, 117, 116, 104, 119, 101, 115, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 84, 32, 32, 116, 97, 107, 101, 32, 111, 102, 102, 32, 97, 114, 109, 111, 114, 13, 10, 110, 32, 32, 109, 111, 118, 101, 32, 115, 111, 117, 116, 104, 101, 97, 115, 116, 32, 32, 32, 32, 32, 32, 78, 32, 32, 114, 117, 110, 32, 115, 111, 117, 116, 104, 101, 97, 115, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 32, 32, 119, 105, 101, 108, 100, 32, 97, 32, 119, 101, 97, 112, 111, 110, 13, 10, 94, 32, 32, 105, 100, 101, 110, 116, 105, 102, 121, 32, 97, 32, 116, 114, 97, 112, 32, 32, 32, 32, 32, 103, 32, 32, 112, 114, 101, 115, 101, 110, 116, 32, 112, 97, 99, 107, 32, 119, 101, 105, 103, 104, 116, 32, 32, 32, 80, 32, 32, 103, 105, 118, 101, 32, 116, 97, 120, 32, 115, 116, 97, 116, 117, 115, 13, 10, 100, 32, 32, 100, 114, 111, 112, 32, 97, 110, 32, 105, 116, 101, 109, 32, 32, 32, 32, 32, 32, 32, 32, 105, 32, 32, 105, 110, 118, 101, 110, 116, 111, 114, 121, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 81, 32, 32, 113, 117, 105, 116, 32, 116, 104, 101, 32, 103, 97, 109, 101, 13, 10, 118, 32, 32, 112, 114, 111, 103, 114, 97, 109, 32, 118, 101, 114, 115, 105, 111, 110, 32, 32, 32, 32, 32, 83, 32, 32, 115, 97, 118, 101, 32, 116, 104, 101, 32, 103, 97, 109, 101, 32, 32, 32, 32, 32, 32, 32, 32, 32, 92, 32, 32, 108, 105, 115, 116, 32, 97, 108, 108, 32, 105, 116, 101, 109, 115, 32, 102, 111, 117, 110, 100, 13, 10, 63, 32, 32, 116, 104, 105, 115, 32, 104, 101, 108, 112, 32, 115, 99, 114, 101, 101, 110, 32, 32, 32, 32, 67, 32, 32, 99, 108, 111, 115, 101, 32, 97, 110, 32, 111, 112, 101, 110, 32, 100, 111, 111, 114, 32, 32, 32, 32, 101, 32, 32, 101, 97, 116, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 13, 10, 84, 104, 101, 32, 107, 101, 121, 112, 97, 100, 32, 97, 110, 100, 32, 97, 114, 114, 111, 119, 32, 107, 101, 121, 115, 32, 109, 97, 121, 32, 97, 108, 115, 111, 32, 98, 101, 32, 117, 115, 101, 100, 32, 116, 111, 32, 109, 111, 118, 101, 32, 116, 104, 101, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 97, 114, 111, 117, 110, 100, 46, 13, 10, 75, 101, 121, 112, 97, 100, 32, 53, 32, 99, 97, 110, 32, 98, 101, 32, 117, 115, 101, 100, 32, 116, 111, 32, 114, 117, 110, 32, 105, 110, 32, 110, 101, 120, 116, 32, 101, 110, 116, 101, 114, 101, 100, 32, 100, 105, 114, 101, 99, 116, 105, 111, 110, 46, 13, 10, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 94, 91, 91, 55, 109, 69, 110, 104, 97, 110, 99, 101, 100, 32, 73, 110, 116, 101, 114, 102, 97, 99, 101, 32, 67, 111, 109, 109, 97, 110, 100, 115, 94, 91, 91, 109, 13, 10, 84, 104, 101, 115, 101, 32, 99, 111, 109, 109, 97, 110, 100, 115, 32, 97, 114, 101, 32, 111, 110, 108, 121, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 32, 105, 102, 32, 116, 104, 101, 32, 94, 91, 91, 55, 109, 101, 110, 104, 97, 110, 99, 101, 100, 95, 105, 110, 116, 101, 114, 102, 97, 99, 101, 94, 91, 91, 109, 32, 111, 112, 116, 105, 111, 110, 32, 105, 115, 32, 115, 101, 116, 32, 105, 110, 13, 10, 116, 104, 101, 32, 117, 108, 97, 114, 110, 46, 111, 112, 116, 32, 102, 105, 108, 101, 46, 13, 10, 13, 10, 111, 32, 32, 111, 112, 101, 110, 32, 97, 32, 99, 108, 111, 115, 101, 100, 32, 100, 111, 111, 114, 32, 32, 79, 32, 32, 111, 112, 101, 110, 32, 97, 32, 99, 104, 101, 115, 116, 32, 104, 101, 114, 101, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 94, 91, 91, 55, 109, 67, 111, 109, 109, 97, 110, 100, 32, 76, 105, 110, 101, 32, 79, 112, 116, 105, 111, 110, 115, 94, 91, 91, 109, 13, 10, 117, 108, 97, 114, 110, 32, 45, 115, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 115, 116, 32, 116, 104, 101, 32, 115, 99, 111, 114, 101, 98, 111, 97, 114, 100, 13, 10, 117, 108, 97, 114, 110, 32, 45, 105, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 115, 116, 32, 115, 99, 111, 114, 101, 115, 32, 119, 105, 116, 104, 32, 105, 110, 118, 101, 110, 116, 111, 114, 105, 101, 115, 13, 10, 117, 108, 97, 114, 110, 32, 45, 110, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 117, 112, 112, 114, 101, 115, 115, 32, 119, 101, 108, 99, 111, 109, 101, 32, 109, 101, 115, 115, 97, 103, 101, 32, 119, 104, 101, 110, 32, 98, 101, 103, 105, 110, 110, 105, 110, 103, 32, 97, 32, 103, 97, 109, 101, 13, 10, 117, 108, 97, 114, 110, 32, 45, 114, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 116, 111, 114, 101, 32, 99, 104, 101, 99, 107, 112, 111, 105, 110, 116, 101, 100, 32, 103, 97, 109, 101, 13, 10, 117, 108, 97, 114, 110, 32, 45, 100, 32, 60, 110, 117, 109, 98, 101, 114, 62, 32, 32, 32, 115, 112, 101, 99, 105, 102, 121, 32, 100, 105, 102, 102, 105, 99, 117, 108, 116, 121, 32, 108, 101, 118, 101, 108, 13, 10, 117, 108, 97, 114, 110, 32, 45, 111, 32, 60, 111, 112, 116, 115, 102, 105, 108, 101, 62, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 117, 108, 97, 114, 110, 46, 111, 112, 116, 32, 102, 105, 108, 101, 32, 116, 111, 32, 98, 101, 32, 117, 115, 101, 100, 13, 10, 117, 108, 97, 114, 110, 32, 45, 99, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 114, 101, 97, 116, 101, 32, 110, 101, 119, 32, 115, 99, 111, 114, 101, 98, 111, 97, 114, 100, 32, 40, 114, 101, 113, 117, 105, 114, 101, 115, 32, 119, 105, 122, 97, 114, 100, 32, 112, 97, 115, 115, 119, 111, 114, 100, 41, 13, 10, 117, 108, 97, 114, 110, 32, 45, 104, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 114, 105, 110, 116, 32, 111, 117, 116, 32, 97, 108, 108, 32, 116, 104, 101, 32, 99, 111, 109, 109, 97, 110, 100, 32, 108, 105, 110, 101, 32, 111, 112, 116, 105, 111, 110, 115, 13, 10, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 94, 91, 91, 55, 109, 83, 112, 101, 99, 105, 97, 108, 32, 78, 111, 116, 101, 115, 94, 91, 91, 109, 13, 10, 87, 104, 101, 110, 32, 100, 114, 111, 112, 112, 105, 110, 103, 32, 103, 111, 108, 100, 44, 32, 105, 102, 32, 121, 111, 117, 32, 116, 121, 112, 101, 32, 39, 42, 39, 32, 97, 115, 32, 121, 111, 117, 114, 32, 97, 109, 111, 117, 110, 116, 44, 32, 97, 108, 108, 32, 121, 111, 117, 114, 32, 103, 111, 108, 100, 32, 103, 101, 116, 115, 32, 100, 114, 111, 112, 112, 101, 100, 46, 13, 10, 73, 110, 32, 103, 101, 110, 101, 114, 97, 108, 44, 32, 116, 121, 112, 105, 110, 103, 32, 105, 110, 32, 39, 42, 39, 32, 109, 101, 97, 110, 115, 32, 97, 108, 108, 32, 111, 102, 32, 119, 104, 97, 116, 32, 121, 111, 117, 114, 32, 105, 110, 116, 101, 114, 101, 115, 116, 101, 100, 32, 105, 110, 46, 32, 32, 84, 104, 105, 115, 32, 105, 115, 32, 116, 114, 117, 101, 13, 10, 119, 104, 101, 110, 32, 118, 105, 115, 105, 116, 105, 110, 103, 32, 116, 104, 101, 32, 98, 97, 110, 107, 44, 32, 111, 114, 32, 119, 104, 101, 110, 32, 99, 111, 110, 116, 114, 105, 98, 117, 116, 105, 110, 103, 32, 97, 116, 32, 97, 108, 116, 97, 114, 115, 46, 13, 10, 13, 10, 87, 104, 101, 110, 32, 105, 110, 32, 116, 104, 101, 32, 115, 116, 111, 114, 101, 44, 32, 116, 114, 97, 100, 105, 110, 103, 32, 112, 111, 115, 116, 44, 32, 115, 99, 104, 111, 111, 108, 44, 32, 111, 114, 32, 104, 111, 109, 101, 44, 32, 97, 110, 32, 94, 91, 91, 55, 109, 60, 101, 115, 99, 97, 112, 101, 62, 94, 91, 91, 109, 32, 119, 105, 108, 108, 32, 103, 101, 116, 32, 121, 111, 117, 32, 111, 117, 116, 46, 13, 10, 13, 10, 87, 104, 101, 110, 32, 99, 97, 115, 116, 105, 110, 103, 32, 97, 32, 115, 112, 101, 108, 108, 44, 32, 105, 102, 32, 121, 111, 117, 32, 110, 101, 101, 100, 32, 97, 32, 108, 105, 115, 116, 32, 111, 102, 32, 115, 112, 101, 108, 108, 115, 32, 121, 111, 117, 32, 99, 97, 110, 32, 99, 97, 115, 116, 44, 32, 116, 121, 112, 101, 32, 39, 94, 91, 91, 55, 109, 68, 94, 91, 91, 109, 39, 32, 97, 115, 13, 10, 116, 104, 101, 32, 102, 105, 114, 115, 116, 32, 108, 101, 116, 116, 101, 114, 32, 111, 102, 32, 121, 111, 117, 114, 32, 115, 112, 101, 108, 108, 46, 32, 32, 84, 104, 101, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 32, 108, 105, 115, 116, 32, 111, 102, 32, 115, 112, 101, 108, 108, 115, 32, 119, 105, 108, 108, 32, 98, 101, 32, 115, 104, 111, 119, 110, 44, 13, 10, 97, 102, 116, 101, 114, 32, 119, 104, 105, 99, 104, 32, 121, 111, 117, 32, 109, 97, 121, 32, 101, 110, 116, 101, 114, 32, 116, 104, 101, 32, 115, 112, 101, 108, 108, 32, 99, 111, 100, 101, 46, 32, 32, 84, 104, 105, 115, 32, 111, 110, 108, 121, 32, 119, 111, 114, 107, 115, 32, 111, 110, 32, 116, 104, 101, 32, 49, 115, 116, 32, 108, 101, 116, 116, 101, 114, 13, 10, 111, 102, 32, 116, 104, 101, 32, 115, 112, 101, 108, 108, 32, 121, 111, 117, 32, 97, 114, 101, 32, 99, 97, 115, 116, 105, 110, 103, 46, 32, 32, 89, 111, 117, 32, 109, 97, 121, 32, 97, 108, 115, 111, 32, 116, 121, 112, 101, 32, 39, 94, 91, 91, 55, 92, 94, 91, 91, 109, 39, 32, 97, 116, 32, 97, 110, 121, 32, 116, 105, 109, 101, 32, 45, 32, 116, 104, 105, 115, 32, 119, 105, 108, 108, 13, 10, 115, 104, 111, 119, 32, 97, 108, 108, 32, 116, 104, 101, 32, 115, 112, 101, 108, 108, 115, 32, 121, 111, 117, 32, 107, 110, 111, 119, 44, 32, 97, 115, 32, 119, 101, 108, 108, 32, 97, 115, 32, 97, 108, 108, 32, 116, 104, 101, 32, 112, 111, 116, 105, 111, 110, 115, 32, 97, 110, 100, 32, 115, 99, 114, 111, 108, 108, 115, 32, 121, 111, 117, 32, 104, 97, 118, 101, 13, 10, 101, 110, 99, 111, 117, 110, 116, 101, 114, 101, 100, 32, 97, 110, 100, 32, 105, 100, 101, 110, 116, 105, 102, 105, 101, 100, 32, 115, 111, 32, 102, 97, 114, 46, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 94, 91, 91, 55, 109, 85, 108, 97, 114, 110, 32, 83, 112, 101, 108, 108, 32, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115, 94, 91, 91, 109, 13, 10, 70, 111, 108, 108, 111, 119, 105, 110, 103, 32, 97, 114, 101, 32, 116, 104, 101, 32, 85, 108, 97, 114, 110, 32, 83, 112, 101, 108, 108, 115, 46, 32, 83, 111, 109, 101, 32, 97, 114, 101, 32, 119, 101, 108, 108, 32, 117, 110, 100, 101, 114, 115, 116, 111, 111, 100, 44, 32, 111, 116, 104, 101, 114, 115, 32, 108, 101, 115, 115, 32, 115, 111, 46, 13, 10, 84, 104, 101, 121, 32, 97, 114, 101, 32, 108, 105, 115, 116, 101, 100, 32, 105, 110, 32, 111, 114, 100, 101, 114, 32, 111, 102, 32, 116, 104, 101, 105, 114, 32, 99, 105, 114, 99, 108, 101, 32, 119, 105, 116, 104, 58, 13, 10, 32, 32, 94, 91, 91, 55, 109, 78, 97, 109, 101, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 67, 111, 100, 101, 41, 32, 91, 84, 97, 114, 103, 101, 116, 93, 32, 123, 68, 117, 114, 97, 116, 105, 111, 110, 125, 94, 91, 91, 109, 32, 97, 110, 100, 32, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 46, 13, 10, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 94, 91, 91, 56, 109, 83, 112, 101, 108, 108, 115, 32, 111, 102, 32, 116, 104, 101, 32, 69, 107, 104, 45, 97, 119, 100, 32, 77, 105, 115, 104, 45, 112, 97, 119, 45, 107, 104, 97, 119, 32, 40, 70, 105, 114, 115, 116, 32, 67, 105, 114, 99, 108, 101, 41, 94, 91, 91, 109, 13, 10, 94, 91, 91, 55, 109, 80, 114, 111, 116, 101, 99, 116, 105, 111, 110, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 112, 114, 111, 41, 32, 91, 83, 101, 108, 102, 93, 32, 123, 76, 111, 110, 103, 125, 94, 91, 91, 109, 13, 10, 32, 32, 71, 101, 110, 101, 114, 97, 116, 101, 115, 32, 97, 32, 43, 50, 32, 112, 114, 111, 116, 101, 99, 116, 105, 111, 110, 32, 102, 105, 101, 108, 100, 13, 10, 32, 32, 78, 111, 110, 45, 99, 117, 109, 117, 108, 97, 116, 105, 118, 101, 44, 32, 114, 101, 112, 101, 116, 105, 116, 105, 111, 110, 32, 105, 110, 99, 114, 101, 97, 115, 101, 115, 32, 100, 117, 114, 97, 116, 105, 111, 110, 13, 10, 94, 91, 91, 55, 109, 77, 97, 103, 105, 99, 32, 77, 105, 115, 115, 105, 108, 101, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 109, 108, 101, 41, 32, 91, 82, 97, 110, 103, 101, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 67, 114, 101, 97, 116, 101, 115, 32, 97, 110, 100, 32, 104, 117, 114, 108, 115, 32, 97, 32, 109, 97, 103, 105, 99, 32, 109, 105, 115, 115, 105, 108, 101, 32, 101, 113, 117, 105, 118, 97, 108, 101, 110, 116, 32, 116, 111, 32, 97, 32, 43, 49, 32, 109, 97, 103, 105, 99, 32, 97, 114, 114, 111, 119, 13, 10, 32, 32, 73, 109, 112, 114, 111, 118, 101, 115, 32, 119, 105, 116, 104, 32, 101, 120, 112, 101, 114, 105, 101, 110, 99, 101, 13, 10, 94, 91, 91, 55, 109, 68, 101, 120, 116, 101, 114, 105, 116, 121, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 100, 101, 120, 41, 32, 91, 83, 101, 108, 102, 93, 32, 123, 76, 111, 110, 103, 125, 94, 91, 91, 109, 13, 10, 32, 32, 65, 100, 100, 115, 32, 43, 50, 32, 116, 111, 32, 116, 104, 101, 32, 99, 97, 115, 116, 101, 114, 39, 115, 32, 100, 101, 120, 116, 101, 114, 105, 116, 121, 13, 10, 32, 32, 78, 111, 110, 45, 99, 117, 109, 117, 108, 97, 116, 105, 118, 101, 44, 32, 114, 101, 112, 101, 116, 105, 116, 105, 111, 110, 32, 105, 110, 99, 114, 101, 97, 115, 101, 115, 32, 100, 117, 114, 97, 116, 105, 111, 110, 13, 10, 94, 91, 91, 55, 109, 83, 108, 101, 101, 112, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 115, 108, 101, 41, 32, 91, 84, 111, 117, 99, 104, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 67, 97, 117, 115, 101, 115, 32, 115, 111, 109, 101, 32, 109, 111, 110, 115, 116, 101, 114, 115, 32, 116, 111, 32, 103, 111, 32, 116, 111, 32, 115, 108, 101, 101, 112, 32, 115, 111, 32, 121, 111, 117, 32, 99, 97, 110, 32, 103, 101, 116, 32, 115, 111, 109, 101, 32, 113, 117, 105, 99, 107, 32, 101, 97, 115, 121, 32, 104, 105, 116, 115, 32, 105, 110, 13, 10, 94, 91, 91, 55, 109, 67, 104, 97, 114, 109, 32, 77, 111, 110, 115, 116, 101, 114, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 99, 104, 109, 41, 32, 91, 83, 101, 108, 102, 93, 32, 123, 83, 104, 111, 114, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 73, 110, 99, 114, 101, 97, 115, 101, 115, 32, 121, 111, 117, 114, 32, 99, 104, 97, 114, 109, 32, 115, 111, 32, 115, 111, 109, 101, 32, 109, 111, 110, 115, 116, 101, 114, 115, 32, 109, 97, 121, 32, 98, 101, 32, 97, 119, 101, 100, 32, 97, 116, 32, 121, 111, 117, 114, 32, 109, 97, 103, 110, 105, 102, 105, 99, 101, 110, 99, 101, 13, 10, 32, 32, 78, 111, 110, 45, 99, 117, 109, 117, 108, 97, 116, 105, 118, 101, 44, 32, 114, 101, 112, 101, 116, 105, 116, 105, 111, 110, 32, 105, 110, 99, 114, 101, 97, 115, 101, 115, 32, 100, 117, 114, 97, 116, 105, 111, 110, 13, 10, 94, 91, 91, 55, 109, 83, 111, 110, 105, 99, 32, 83, 112, 101, 97, 114, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 115, 115, 112, 41, 32, 91, 82, 97, 110, 103, 101, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 67, 97, 117, 115, 101, 115, 32, 116, 104, 101, 32, 99, 97, 115, 116, 101, 114, 39, 115, 32, 104, 97, 110, 100, 115, 32, 116, 111, 32, 101, 109, 105, 116, 32, 97, 32, 115, 99, 114, 101, 101, 99, 104, 105, 110, 103, 32, 115, 111, 117, 110, 100, 13, 10, 32, 32, 73, 109, 112, 114, 111, 118, 101, 115, 32, 119, 105, 116, 104, 32, 101, 120, 112, 101, 114, 105, 101, 110, 99, 101, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 94, 91, 91, 56, 109, 83, 112, 101, 108, 108, 115, 32, 111, 102, 32, 116, 104, 101, 32, 83, 104, 97, 121, 45, 110, 101, 101, 32, 77, 105, 115, 104, 45, 112, 97, 119, 45, 107, 104, 97, 119, 32, 40, 83, 101, 99, 111, 110, 100, 32, 67, 105, 114, 99, 108, 101, 41, 94, 91, 91, 109, 13, 10, 94, 91, 91, 55, 109, 87, 101, 98, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 119, 101, 98, 41, 32, 91, 84, 111, 117, 99, 104, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 87, 101, 98, 32, 101, 110, 116, 97, 110, 103, 108, 101, 115, 32, 121, 111, 117, 114, 32, 101, 110, 101, 109, 121, 32, 115, 111, 32, 121, 111, 117, 32, 99, 97, 110, 32, 103, 101, 116, 32, 115, 111, 109, 101, 32, 101, 97, 115, 121, 32, 104, 105, 116, 115, 32, 105, 110, 13, 10, 94, 91, 91, 55, 109, 83, 116, 114, 101, 110, 103, 116, 104, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 115, 116, 114, 41, 32, 91, 83, 101, 108, 102, 93, 32, 123, 76, 111, 110, 103, 125, 94, 91, 91, 109, 13, 10, 32, 32, 65, 100, 100, 115, 32, 43, 50, 32, 116, 111, 32, 116, 104, 101, 32, 99, 97, 115, 116, 101, 114, 39, 115, 32, 115, 116, 114, 101, 110, 103, 116, 104, 32, 102, 111, 114, 32, 97, 32, 116, 105, 109, 101, 13, 10, 32, 32, 78, 111, 110, 45, 99, 117, 109, 117, 108, 97, 116, 105, 118, 101, 44, 32, 114, 101, 112, 101, 116, 105, 116, 105, 111, 110, 32, 105, 110, 99, 114, 101, 97, 115, 101, 115, 32, 100, 117, 114, 97, 116, 105, 111, 110, 13, 10, 94, 91, 91, 55, 109, 69, 110, 108, 105, 103, 104, 116, 101, 110, 109, 101, 110, 116, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 101, 110, 108, 41, 32, 91, 76, 101, 118, 101, 108, 93, 32, 123, 80, 101, 114, 109, 97, 109, 101, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 84, 104, 101, 32, 99, 97, 115, 116, 101, 114, 32, 98, 101, 99, 111, 109, 101, 115, 32, 97, 119, 97, 114, 101, 32, 111, 102, 32, 116, 104, 101, 32, 97, 114, 101, 97, 32, 97, 114, 111, 117, 110, 100, 32, 116, 104, 101, 109, 13, 10, 94, 91, 91, 55, 109, 72, 101, 97, 108, 105, 110, 103, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 104, 101, 108, 41, 32, 91, 83, 101, 108, 102, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 82, 101, 115, 116, 111, 114, 101, 115, 32, 115, 111, 109, 101, 32, 111, 102, 32, 116, 104, 101, 32, 99, 97, 115, 116, 101, 114, 39, 115, 32, 104, 101, 97, 108, 116, 104, 13, 10, 32, 32, 71, 111, 111, 100, 32, 104, 101, 97, 108, 105, 110, 103, 32, 116, 104, 97, 116, 32, 105, 109, 112, 114, 111, 118, 101, 115, 32, 119, 105, 116, 104, 32, 101, 120, 112, 101, 114, 105, 101, 110, 99, 101, 13, 10, 94, 91, 91, 55, 109, 67, 117, 114, 101, 32, 66, 108, 105, 110, 100, 110, 101, 115, 115, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 99, 98, 108, 41, 32, 91, 83, 101, 108, 102, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 82, 101, 115, 116, 111, 114, 101, 115, 32, 115, 105, 103, 104, 116, 32, 116, 111, 32, 111, 110, 101, 32, 115, 111, 32, 117, 110, 102, 111, 114, 116, 117, 110, 97, 116, 101, 32, 97, 115, 32, 116, 111, 32, 98, 101, 32, 98, 108, 105, 110, 100, 101, 100, 13, 10, 94, 91, 91, 55, 109, 67, 114, 101, 97, 116, 101, 32, 77, 111, 110, 115, 116, 101, 114, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 99, 114, 101, 41, 32, 91, 78, 101, 120, 116, 32, 116, 111, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 67, 114, 101, 97, 116, 101, 115, 32, 97, 32, 109, 111, 110, 115, 116, 101, 114, 32, 110, 101, 97, 114, 32, 116, 111, 32, 116, 104, 101, 32, 99, 97, 115, 116, 101, 114, 13, 10, 94, 91, 91, 55, 109, 80, 104, 97, 110, 116, 97, 115, 109, 97, 108, 32, 70, 111, 114, 99, 101, 115, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 112, 104, 97, 41, 32, 91, 84, 111, 117, 99, 104, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 67, 114, 101, 97, 116, 101, 115, 32, 105, 108, 108, 117, 115, 105, 111, 110, 115, 32, 119, 104, 105, 99, 104, 32, 105, 102, 32, 98, 101, 108, 105, 101, 118, 101, 100, 32, 99, 97, 117, 115, 101, 32, 109, 111, 110, 115, 116, 101, 114, 115, 32, 116, 111, 32, 100, 105, 101, 13, 10, 32, 32, 71, 114, 101, 97, 116, 101, 114, 32, 119, 105, 115, 100, 111, 109, 32, 98, 114, 105, 110, 103, 115, 32, 103, 114, 101, 97, 116, 101, 114, 32, 101, 102, 102, 101, 99, 116, 105, 118, 101, 110, 101, 115, 115, 13, 10, 94, 91, 91, 55, 109, 73, 110, 118, 105, 115, 105, 98, 105, 108, 105, 116, 121, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 105, 110, 118, 41, 32, 91, 83, 101, 108, 102, 93, 32, 123, 76, 111, 110, 103, 125, 94, 91, 91, 109, 13, 10, 32, 32, 84, 104, 101, 32, 99, 97, 115, 116, 101, 114, 32, 98, 101, 99, 111, 109, 101, 115, 32, 105, 110, 118, 105, 115, 105, 98, 108, 101, 13, 10, 32, 32, 82, 101, 112, 101, 116, 105, 116, 105, 111, 110, 32, 105, 110, 99, 114, 101, 97, 115, 101, 115, 32, 100, 117, 114, 97, 116, 105, 111, 110, 13, 10, 13, 10, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 94, 91, 91, 56, 109, 83, 112, 101, 108, 108, 115, 32, 111, 102, 32, 116, 104, 101, 32, 83, 104, 101, 108, 45, 101, 101, 45, 115, 104, 101, 101, 32, 77, 105, 115, 104, 45, 112, 97, 119, 45, 107, 104, 97, 119, 32, 40, 84, 104, 105, 114, 100, 32, 67, 105, 114, 99, 108, 101, 41, 94, 91, 91, 109, 13, 10, 94, 91, 91, 55, 109, 70, 105, 114, 101, 98, 97, 108, 108, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 98, 97, 108, 41, 32, 91, 82, 97, 110, 103, 101, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 67, 114, 101, 97, 116, 101, 115, 32, 97, 32, 98, 97, 108, 108, 32, 111, 102, 32, 102, 105, 114, 101, 32, 116, 104, 97, 116, 32, 98, 117, 114, 110, 115, 32, 119, 104, 97, 116, 101, 118, 101, 114, 32, 105, 116, 32, 104, 105, 116, 115, 13, 10, 94, 91, 91, 55, 109, 67, 111, 108, 100, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 99, 108, 100, 41, 32, 91, 82, 97, 110, 103, 101, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 83, 101, 110, 100, 115, 32, 102, 111, 114, 116, 104, 32, 97, 32, 99, 111, 110, 101, 32, 111, 102, 32, 99, 111, 108, 100, 32, 119, 104, 105, 99, 104, 32, 102, 114, 101, 101, 122, 101, 115, 32, 119, 104, 97, 116, 101, 118, 101, 114, 32, 105, 116, 32, 116, 111, 117, 99, 104, 101, 115, 13, 10, 94, 91, 91, 55, 109, 80, 111, 108, 121, 109, 111, 114, 112, 104, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 112, 108, 121, 41, 32, 91, 84, 111, 117, 99, 104, 93, 32, 123, 80, 101, 114, 109, 97, 110, 101, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 67, 104, 97, 110, 103, 101, 32, 116, 104, 101, 32, 110, 97, 116, 117, 114, 101, 32, 111, 102, 32, 121, 111, 117, 114, 32, 97, 116, 116, 97, 99, 107, 101, 114, 44, 32, 102, 111, 114, 32, 98, 101, 116, 116, 101, 114, 32, 111, 114, 32, 102, 111, 114, 32, 119, 111, 114, 115, 101, 32, 105, 115, 32, 117, 112, 32, 116, 111, 32, 102, 97, 116, 101, 13, 10, 94, 91, 91, 55, 109, 67, 97, 110, 99, 101, 108, 108, 97, 116, 105, 111, 110, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 99, 97, 110, 41, 32, 91, 83, 101, 108, 102, 93, 32, 123, 76, 111, 110, 103, 125, 94, 91, 91, 109, 13, 10, 32, 32, 67, 114, 101, 97, 116, 101, 115, 32, 97, 110, 32, 97, 117, 114, 97, 32, 116, 104, 97, 116, 32, 115, 116, 111, 112, 115, 32, 97, 32, 109, 111, 110, 115, 116, 101, 114, 32, 102, 114, 111, 109, 32, 117, 115, 105, 110, 103, 32, 105, 116, 115, 32, 115, 112, 101, 99, 105, 97, 108, 32, 97, 98, 105, 108, 105, 116, 105, 101, 115, 13, 10, 32, 32, 82, 101, 112, 101, 116, 105, 116, 105, 111, 110, 32, 105, 110, 99, 114, 101, 97, 115, 101, 115, 32, 100, 117, 114, 97, 116, 105, 111, 110, 44, 32, 97, 110, 100, 32, 105, 116, 32, 105, 109, 112, 114, 111, 118, 101, 115, 32, 119, 105, 116, 104, 32, 101, 120, 112, 101, 114, 105, 101, 110, 99, 101, 13, 10, 94, 91, 91, 55, 109, 72, 97, 115, 116, 101, 32, 83, 101, 108, 102, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 104, 97, 115, 41, 32, 91, 83, 101, 108, 102, 93, 32, 123, 76, 111, 110, 103, 125, 94, 91, 91, 109, 13, 10, 32, 32, 83, 112, 101, 101, 100, 115, 32, 117, 112, 32, 116, 104, 101, 32, 99, 97, 115, 116, 101, 114, 39, 115, 32, 109, 111, 118, 101, 109, 101, 110, 116, 115, 13, 10, 32, 32, 82, 101, 112, 101, 116, 105, 116, 105, 111, 110, 32, 105, 110, 99, 114, 101, 97, 115, 101, 115, 32, 100, 117, 114, 97, 116, 105, 111, 110, 44, 32, 97, 110, 100, 32, 105, 116, 32, 105, 109, 112, 114, 111, 118, 101, 115, 32, 119, 105, 116, 104, 32, 101, 120, 112, 101, 114, 105, 101, 110, 99, 101, 13, 10, 94, 91, 91, 55, 109, 67, 108, 111, 117, 100, 32, 75, 105, 108, 108, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 99, 107, 108, 41, 32, 91, 83, 117, 114, 114, 111, 117, 110, 100, 115, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 65, 32, 102, 111, 103, 32, 111, 102, 32, 112, 111, 105, 115, 111, 110, 111, 117, 115, 32, 103, 97, 115, 32, 119, 104, 105, 99, 104, 32, 100, 97, 109, 97, 103, 101, 115, 32, 97, 108, 108, 32, 116, 104, 97, 116, 32, 105, 115, 32, 119, 105, 116, 104, 105, 110, 32, 105, 116, 13, 10, 32, 32, 65, 32, 115, 116, 114, 111, 110, 103, 32, 115, 112, 101, 108, 108, 13, 10, 94, 91, 91, 55, 109, 86, 97, 112, 111, 114, 105, 122, 101, 32, 82, 111, 99, 107, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 118, 112, 114, 41, 32, 91, 83, 117, 114, 114, 111, 117, 110, 100, 115, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 67, 104, 97, 110, 103, 101, 115, 32, 114, 111, 99, 107, 32, 116, 111, 32, 97, 105, 114, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 94, 91, 91, 56, 109, 83, 112, 101, 108, 108, 115, 32, 111, 102, 32, 116, 104, 101, 32, 82, 101, 98, 45, 101, 101, 45, 101, 101, 32, 77, 105, 115, 104, 45, 112, 97, 119, 45, 107, 104, 97, 119, 32, 40, 70, 111, 117, 114, 116, 104, 32, 67, 105, 114, 99, 108, 101, 41, 94, 91, 91, 109, 13, 10, 94, 91, 91, 55, 109, 68, 101, 104, 121, 100, 114, 97, 116, 105, 111, 110, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 100, 114, 121, 41, 32, 91, 84, 111, 117, 99, 104, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 68, 114, 105, 101, 115, 32, 117, 112, 32, 119, 97, 116, 101, 114, 32, 105, 110, 32, 116, 104, 101, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 32, 118, 105, 99, 105, 110, 105, 116, 121, 13, 10, 32, 32, 65, 32, 118, 101, 114, 121, 32, 112, 111, 119, 101, 114, 102, 117, 108, 32, 115, 112, 101, 108, 108, 32, 116, 104, 97, 116, 32, 105, 109, 112, 114, 111, 118, 101, 115, 32, 119, 105, 116, 104, 32, 101, 120, 112, 101, 114, 105, 101, 110, 99, 101, 13, 10, 94, 91, 91, 55, 109, 76, 105, 103, 104, 116, 110, 105, 110, 103, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 108, 105, 116, 41, 32, 91, 82, 97, 110, 103, 101, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 67, 97, 117, 115, 101, 115, 32, 116, 104, 101, 32, 99, 97, 115, 116, 101, 114, 39, 115, 32, 102, 105, 110, 103, 101, 114, 32, 116, 111, 32, 101, 109, 105, 116, 32, 108, 105, 103, 104, 116, 110, 105, 110, 103, 32, 98, 111, 108, 116, 115, 13, 10, 94, 91, 91, 55, 109, 68, 114, 97, 105, 110, 32, 76, 105, 102, 101, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 100, 114, 108, 41, 32, 91, 84, 111, 117, 99, 104, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 83, 117, 98, 116, 114, 97, 99, 116, 115, 32, 104, 105, 116, 32, 112, 111, 105, 110, 116, 115, 32, 102, 114, 111, 109, 32, 98, 111, 116, 104, 32, 121, 111, 117, 32, 97, 110, 100, 32, 97, 32, 109, 111, 110, 115, 116, 101, 114, 13, 10, 32, 32, 65, 32, 112, 111, 119, 101, 114, 102, 117, 108, 32, 97, 110, 100, 32, 100, 97, 110, 103, 101, 114, 111, 117, 115, 32, 115, 112, 101, 108, 108, 13, 10, 94, 91, 91, 55, 109, 73, 110, 118, 117, 108, 110, 101, 114, 97, 98, 105, 108, 105, 116, 121, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 103, 108, 111, 41, 32, 91, 83, 101, 108, 102, 93, 32, 123, 76, 111, 110, 103, 125, 94, 91, 91, 109, 13, 10, 32, 32, 84, 104, 105, 115, 32, 103, 108, 111, 98, 101, 32, 104, 101, 108, 112, 115, 32, 116, 111, 32, 112, 114, 111, 116, 101, 99, 116, 32, 116, 104, 101, 32, 112, 108, 97, 121, 101, 114, 32, 102, 114, 111, 109, 32, 112, 104, 121, 115, 105, 99, 97, 108, 32, 97, 116, 116, 97, 99, 107, 13, 10, 32, 32, 66, 111, 111, 115, 116, 115, 32, 121, 111, 117, 114, 32, 100, 101, 102, 101, 110, 115, 101, 32, 102, 111, 114, 32, 97, 32, 116, 105, 109, 101, 44, 32, 97, 116, 32, 97, 32, 99, 111, 115, 116, 13, 10, 94, 91, 91, 55, 109, 70, 108, 111, 111, 100, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 102, 108, 111, 41, 32, 91, 83, 117, 114, 114, 111, 117, 110, 100, 115, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 67, 114, 101, 97, 116, 101, 115, 32, 97, 32, 100, 101, 108, 117, 103, 101, 32, 111, 102, 32, 119, 97, 116, 101, 114, 32, 102, 108, 111, 111, 100, 105, 110, 103, 32, 116, 104, 101, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 32, 99, 104, 97, 109, 98, 101, 114, 13, 10, 32, 32, 65, 32, 112, 111, 119, 101, 114, 102, 117, 108, 32, 115, 112, 101, 108, 108, 32, 116, 104, 97, 116, 32, 105, 109, 112, 114, 111, 118, 101, 115, 32, 119, 105, 116, 104, 32, 101, 120, 112, 101, 114, 105, 101, 110, 99, 101, 13, 10, 94, 91, 91, 55, 109, 70, 105, 110, 103, 101, 114, 32, 111, 102, 32, 68, 101, 97, 116, 104, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 102, 103, 114, 41, 32, 91, 84, 111, 117, 99, 104, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 65, 32, 104, 111, 108, 121, 32, 115, 112, 101, 108, 108, 32, 99, 97, 108, 108, 105, 110, 103, 32, 111, 110, 32, 121, 111, 117, 114, 32, 103, 111, 100, 32, 116, 111, 32, 98, 97, 99, 107, 32, 121, 111, 117, 32, 117, 112, 13, 10, 32, 32, 65, 110, 32, 101, 120, 116, 114, 101, 109, 101, 108, 121, 32, 112, 111, 119, 101, 114, 102, 117, 108, 44, 32, 116, 104, 111, 117, 103, 104, 32, 112, 111, 116, 101, 110, 116, 105, 97, 108, 108, 121, 32, 100, 101, 97, 100, 108, 121, 32, 115, 112, 101, 108, 108, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 94, 91, 91, 56, 109, 83, 112, 101, 108, 108, 115, 32, 111, 102, 32, 116, 104, 101, 32, 75, 104, 97, 109, 45, 101, 101, 45, 115, 104, 101, 101, 32, 77, 105, 115, 104, 45, 112, 97, 119, 45, 107, 104, 97, 119, 32, 40, 70, 105, 102, 116, 104, 32, 67, 105, 114, 99, 108, 101, 41, 94, 91, 91, 109, 13, 10, 94, 91, 91, 55, 109, 83, 99, 97, 114, 101, 32, 77, 111, 110, 115, 116, 101, 114, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 115, 99, 97, 41, 32, 91, 83, 101, 108, 102, 93, 32, 123, 83, 104, 111, 114, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 67, 114, 101, 97, 116, 101, 115, 32, 97, 110, 32, 97, 117, 114, 97, 32, 116, 104, 97, 116, 32, 116, 101, 114, 114, 105, 102, 105, 101, 115, 32, 109, 111, 110, 115, 116, 101, 114, 115, 32, 115, 111, 32, 116, 104, 101, 121, 32, 109, 97, 121, 32, 110, 111, 116, 32, 104, 105, 116, 32, 121, 111, 117, 13, 10, 32, 32, 73, 109, 112, 114, 111, 118, 101, 115, 32, 119, 105, 116, 104, 32, 101, 120, 112, 101, 114, 105, 101, 110, 99, 101, 13, 10, 94, 91, 91, 55, 109, 72, 111, 108, 100, 32, 77, 111, 110, 115, 116, 101, 114, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 104, 108, 100, 41, 32, 91, 76, 101, 118, 101, 108, 93, 32, 123, 83, 104, 111, 114, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 70, 114, 101, 101, 122, 101, 115, 32, 109, 111, 110, 115, 116, 101, 114, 115, 32, 105, 110, 32, 116, 104, 101, 105, 114, 32, 116, 114, 97, 99, 107, 115, 13, 10, 32, 32, 73, 109, 112, 114, 111, 118, 101, 115, 32, 119, 105, 116, 104, 32, 101, 120, 112, 101, 114, 105, 101, 110, 99, 101, 13, 10, 94, 91, 91, 55, 109, 84, 105, 109, 101, 32, 83, 116, 111, 112, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 115, 116, 112, 41, 32, 91, 76, 101, 118, 101, 108, 93, 32, 123, 83, 104, 111, 114, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 65, 108, 108, 32, 109, 111, 118, 101, 109, 101, 110, 116, 32, 105, 110, 32, 116, 104, 101, 32, 99, 97, 118, 101, 114, 110, 115, 32, 99, 101, 97, 115, 101, 115, 32, 102, 111, 114, 32, 97, 32, 108, 105, 109, 105, 116, 101, 100, 32, 100, 117, 114, 97, 116, 105, 111, 110, 13, 10, 32, 32, 73, 109, 112, 114, 111, 118, 101, 115, 32, 119, 105, 116, 104, 32, 101, 120, 112, 101, 114, 105, 101, 110, 99, 101, 13, 10, 94, 91, 91, 55, 109, 84, 101, 108, 101, 112, 111, 114, 116, 32, 65, 119, 97, 121, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 116, 101, 108, 41, 32, 91, 84, 111, 117, 99, 104, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 84, 101, 108, 101, 112, 111, 114, 116, 115, 32, 97, 32, 109, 111, 110, 115, 116, 101, 114, 13, 10, 94, 91, 91, 55, 109, 77, 97, 103, 105, 99, 32, 70, 105, 114, 101, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 109, 102, 105, 41, 32, 91, 83, 117, 114, 114, 111, 117, 110, 100, 115, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 67, 114, 101, 97, 116, 101, 115, 32, 97, 32, 99, 117, 114, 116, 97, 105, 110, 32, 111, 102, 32, 102, 105, 114, 101, 32, 97, 114, 111, 117, 110, 100, 32, 116, 104, 101, 32, 99, 97, 115, 116, 101, 114, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 94, 91, 91, 56, 109, 83, 112, 101, 108, 108, 115, 32, 111, 102, 32, 116, 104, 101, 32, 83, 104, 105, 115, 104, 45, 115, 104, 101, 101, 32, 77, 105, 115, 104, 45, 112, 97, 119, 45, 107, 104, 97, 119, 32, 40, 83, 105, 120, 116, 104, 32, 67, 105, 114, 99, 108, 101, 41, 94, 91, 91, 109, 13, 10, 94, 91, 91, 55, 109, 77, 97, 107, 101, 32, 97, 32, 87, 97, 108, 108, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 109, 107, 119, 41, 32, 91, 84, 111, 117, 99, 104, 93, 32, 123, 80, 101, 114, 109, 97, 110, 101, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 77, 97, 107, 101, 115, 32, 97, 32, 119, 97, 108, 108, 32, 105, 110, 32, 116, 104, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 112, 108, 97, 99, 101, 13, 10, 32, 32, 65, 32, 112, 111, 119, 101, 114, 102, 117, 108, 32, 115, 112, 101, 108, 108, 32, 116, 104, 97, 116, 32, 105, 109, 112, 114, 111, 118, 101, 115, 32, 119, 105, 116, 104, 32, 101, 120, 112, 101, 114, 105, 101, 110, 99, 101, 13, 10, 94, 91, 91, 55, 109, 83, 112, 104, 101, 114, 101, 32, 111, 102, 32, 65, 110, 110, 105, 104, 105, 108, 97, 116, 105, 111, 110, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 115, 112, 104, 41, 32, 91, 78, 101, 120, 116, 32, 116, 111, 93, 32, 123, 83, 104, 111, 114, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 65, 110, 121, 116, 104, 105, 110, 103, 32, 99, 97, 117, 103, 104, 116, 32, 105, 110, 32, 116, 104, 105, 115, 32, 115, 112, 104, 101, 114, 101, 32, 105, 115, 32, 105, 110, 115, 116, 97, 110, 116, 108, 121, 32, 107, 105, 108, 108, 101, 100, 46, 13, 10, 94, 91, 91, 55, 109, 71, 101, 110, 111, 99, 105, 100, 101, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 103, 101, 110, 41, 32, 91, 71, 97, 109, 101, 93, 32, 123, 80, 101, 114, 109, 97, 110, 101, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 69, 108, 105, 109, 105, 110, 97, 116, 101, 115, 32, 97, 32, 115, 112, 101, 99, 105, 101, 115, 32, 111, 102, 32, 109, 111, 110, 115, 116, 101, 114, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 103, 97, 109, 101, 13, 10, 94, 91, 91, 55, 109, 83, 117, 109, 109, 111, 110, 32, 68, 101, 109, 111, 110, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 115, 117, 109, 41, 32, 91, 84, 111, 117, 99, 104, 93, 32, 123, 73, 110, 115, 116, 97, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 83, 117, 109, 109, 111, 110, 115, 32, 97, 32, 100, 101, 109, 111, 110, 32, 119, 104, 111, 32, 109, 97, 121, 32, 104, 101, 108, 112, 32, 121, 111, 117, 32, 111, 117, 116, 13, 10, 32, 32, 65, 110, 32, 101, 120, 116, 114, 101, 109, 101, 108, 121, 32, 112, 111, 119, 101, 114, 102, 117, 108, 32, 115, 112, 101, 108, 108, 32, 116, 104, 97, 116, 32, 109, 97, 121, 32, 98, 97, 99, 107, 102, 105, 114, 101, 13, 10, 94, 91, 91, 55, 109, 87, 97, 108, 107, 32, 84, 104, 114, 111, 117, 103, 104, 32, 87, 97, 108, 108, 115, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 119, 116, 119, 41, 32, 91, 83, 101, 108, 102, 93, 32, 123, 83, 104, 111, 114, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 65, 108, 108, 111, 119, 115, 32, 116, 104, 101, 32, 112, 108, 97, 121, 101, 114, 32, 116, 111, 32, 119, 97, 108, 107, 32, 116, 104, 114, 111, 117, 103, 104, 32, 119, 97, 108, 108, 115, 32, 102, 111, 114, 32, 97, 32, 115, 104, 111, 114, 116, 32, 112, 101, 114, 105, 111, 100, 32, 111, 102, 32, 116, 105, 109, 101, 13, 10, 94, 91, 91, 55, 109, 65, 108, 116, 101, 114, 32, 82, 101, 97, 108, 105, 116, 121, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 97, 108, 116, 41, 32, 91, 76, 101, 118, 101, 108, 93, 32, 123, 80, 101, 114, 109, 97, 110, 101, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 84, 104, 105, 115, 32, 119, 105, 108, 108, 32, 114, 101, 115, 116, 114, 117, 99, 116, 117, 114, 101, 32, 114, 101, 97, 108, 105, 116, 121, 32, 97, 115, 32, 121, 111, 117, 32, 99, 117, 114, 114, 101, 110, 116, 108, 121, 32, 107, 110, 111, 119, 32, 105, 116, 13, 10, 94, 91, 91, 55, 109, 80, 101, 114, 109, 97, 110, 101, 110, 99, 101, 94, 91, 91, 109, 32, 94, 91, 91, 57, 109, 40, 112, 101, 114, 41, 32, 91, 83, 101, 108, 102, 93, 32, 123, 80, 101, 114, 109, 97, 110, 101, 110, 116, 125, 94, 91, 91, 109, 13, 10, 32, 32, 77, 97, 107, 101, 115, 32, 97, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 115, 112, 101, 108, 108, 32, 112, 101, 114, 109, 97, 110, 101, 110, 116, 44, 32, 101, 46, 103, 46, 32, 112, 114, 111, 116, 101, 99, 116, 105, 111, 110, 44, 32, 115, 116, 114, 101, 110, 103, 116, 104, 44, 32, 101, 116, 99, 46, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 9, 9, 32, 32, 32, 94, 91, 91, 55, 109, 72, 111, 119, 32, 116, 111, 32, 117, 115, 101, 32, 116, 104, 101, 32, 117, 108, 97, 114, 110, 46, 111, 112, 116, 32, 111, 112, 116, 105, 111, 110, 32, 102, 105, 108, 101, 94, 91, 91, 109, 13, 10, 84, 104, 101, 32, 102, 105, 108, 101, 32, 34, 117, 108, 97, 114, 110, 46, 111, 112, 116, 34, 44, 32, 105, 102, 32, 117, 115, 101, 100, 44, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 105, 110, 32, 121, 111, 117, 114, 32, 104, 111, 109, 101, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 111, 114, 13, 10, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 111, 110, 32, 116, 104, 101, 32, 99, 111, 109, 109, 97, 110, 100, 32, 108, 105, 110, 101, 32, 40, 115, 101, 101, 32, 45, 111, 41, 46, 13, 10, 76, 105, 110, 101, 115, 32, 105, 110, 32, 116, 104, 101, 32, 111, 112, 116, 105, 111, 110, 115, 32, 102, 105, 108, 101, 32, 115, 116, 97, 114, 116, 105, 110, 103, 32, 119, 105, 116, 104, 32, 97, 32, 39, 35, 39, 32, 97, 114, 101, 32, 99, 111, 109, 109, 101, 110, 116, 115, 32, 97, 110, 100, 32, 97, 114, 101, 32, 105, 103, 110, 111, 114, 101, 100, 46, 13, 10, 71, 97, 109, 101, 32, 111, 112, 116, 105, 111, 110, 115, 32, 97, 114, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 119, 111, 114, 100, 32, 39, 79, 80, 84, 73, 79, 78, 61, 39, 32, 97, 110, 100, 32, 97, 114, 101, 32, 102, 111, 108, 108, 111, 119, 101, 100, 32, 98, 121, 32, 97, 13, 10, 99, 111, 109, 109, 97, 32, 115, 101, 112, 97, 114, 97, 116, 101, 100, 32, 108, 105, 115, 116, 32, 111, 102, 32, 111, 112, 116, 105, 111, 110, 115, 32, 40, 77, 117, 108, 116, 105, 112, 108, 101, 32, 111, 112, 116, 105, 111, 110, 32, 108, 105, 110, 101, 115, 32, 97, 114, 101, 32, 97, 108, 108, 111, 119, 101, 100, 41, 46, 13, 10, 79, 112, 116, 105, 111, 110, 115, 32, 116, 111, 32, 101, 110, 97, 98, 108, 101, 32, 102, 101, 97, 116, 117, 114, 101, 115, 32, 109, 97, 121, 32, 98, 101, 32, 112, 114, 101, 102, 105, 120, 101, 100, 32, 119, 105, 116, 104, 32, 110, 111, 32, 116, 111, 32, 100, 105, 115, 97, 98, 108, 101, 32, 116, 104, 97, 116, 32, 102, 101, 97, 116, 117, 114, 101, 46, 13, 10, 79, 112, 116, 105, 111, 110, 115, 32, 116, 104, 97, 116, 32, 115, 112, 101, 99, 105, 102, 121, 32, 97, 32, 118, 97, 108, 117, 101, 32, 97, 114, 101, 32, 105, 110, 32, 116, 104, 101, 32, 102, 111, 114, 109, 32, 60, 111, 112, 116, 105, 111, 110, 32, 119, 111, 114, 100, 62, 58, 60, 118, 97, 108, 117, 101, 62, 46, 13, 10, 13, 10, 9, 94, 91, 91, 55, 109, 79, 112, 116, 105, 111, 110, 32, 119, 111, 114, 100, 94, 91, 91, 109, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 94, 91, 91, 55, 109, 77, 101, 97, 110, 105, 110, 103, 94, 91, 91, 109, 13, 10, 32, 32, 40, 110, 111, 41, 119, 101, 108, 99, 111, 109, 101, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 115, 47, 101, 110, 97, 98, 108, 101, 32, 100, 105, 115, 112, 108, 97, 121, 32, 111, 102, 32, 105, 110, 116, 114, 111, 32, 109, 101, 115, 115, 97, 103, 101, 13, 10, 32, 32, 40, 110, 111, 41, 110, 97, 112, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 105, 109, 105, 110, 97, 116, 101, 47, 117, 115, 101, 32, 100, 101, 108, 97, 121, 115, 32, 119, 104, 101, 110, 32, 112, 108, 97, 121, 105, 110, 103, 32, 103, 97, 109, 101, 13, 10, 32, 32, 40, 110, 111, 41, 101, 110, 104, 97, 110, 99, 101, 100, 95, 105, 110, 116, 101, 114, 102, 97, 99, 101, 32, 32, 100, 105, 115, 47, 101, 110, 97, 98, 108, 101, 32, 101, 110, 104, 97, 110, 99, 101, 100, 32, 105, 110, 116, 101, 114, 102, 97, 99, 101, 13, 10, 32, 32, 40, 110, 111, 41, 98, 101, 101, 112, 32].concat([32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 115, 47, 101, 110, 97, 98, 108, 101, 32, 98, 101, 101, 112, 115, 32, 100, 117, 114, 105, 110, 103, 32, 103, 97, 109, 101, 13, 10, 32, 32, 110, 97, 109, 101, 58, 60, 110, 97, 109, 101, 62, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 116, 32, 116, 104, 101, 32, 112, 108, 97, 121, 101, 114, 115, 32, 110, 97, 109, 101, 32, 116, 111, 32, 60, 110, 97, 109, 101, 62, 13, 10, 32, 32, 99, 108, 97, 115, 115, 58, 60, 99, 108, 97, 115, 115, 62, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 108, 97, 121, 32, 97, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 111, 102, 32, 60, 99, 108, 97, 115, 115, 62, 32, 40, 116, 104, 101, 32, 110, 97, 109, 101, 32, 111, 102, 32, 116, 104, 101, 32, 99, 108, 97, 115, 115, 41, 13, 10, 32, 32, 103, 101, 110, 100, 101, 114, 58, 60, 109, 97, 108, 101, 47, 102, 101, 109, 97, 108, 101, 62, 32, 32, 32, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 103, 101, 110, 100, 101, 114, 32, 111, 102, 32, 116, 104, 101, 32, 99, 104, 97, 114, 97, 99, 101, 116, 101, 114, 13, 10, 13, 10, 83, 111, 109, 101, 32, 112, 97, 116, 104, 32, 110, 97, 109, 101, 115, 32, 117, 115, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 103, 97, 109, 101, 32, 99, 97, 110, 32, 97, 108, 115, 111, 32, 98, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 111, 112, 116, 105, 111, 110, 115, 32, 102, 105, 108, 101, 46, 13, 10, 32, 32, 76, 73, 66, 68, 73, 82, 58, 60, 108, 111, 99, 97, 116, 105, 111, 110, 32, 111, 102, 32, 116, 104, 101, 32, 108, 105, 98, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 62, 13, 10, 32, 32, 83, 65, 86, 69, 68, 73, 82, 58, 60, 108, 111, 99, 97, 116, 105, 111, 110, 32, 111, 102, 32, 116, 104, 101, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 116, 111, 32, 104, 111, 108, 100, 32, 115, 97, 118, 101, 100, 32, 103, 97, 109, 101, 115, 62, 13, 10, 73, 102, 32, 116, 104, 101, 115, 101, 32, 97, 114, 101, 32, 110, 111, 116, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 116, 104, 101, 110, 32, 103, 97, 109, 101, 115, 32, 119, 105, 108, 108, 32, 98, 101, 32, 115, 97, 118, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 13, 10, 97, 110, 100, 32, 116, 104, 101, 32, 103, 97, 109, 101, 32, 119, 105, 108, 108, 32, 108, 111, 111, 107, 32, 105, 110, 32, 46, 47, 108, 105, 98, 32, 102, 111, 114, 32, 116, 104, 101, 32, 108, 105, 98, 114, 97, 114, 121, 32, 102, 105, 108, 101, 115, 46, 13, 10, 9, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 94, 91, 91, 55, 109, 69, 120, 97, 109, 112, 108, 101, 32, 117, 108, 97, 114, 110, 46, 111, 112, 116, 32, 102, 105, 108, 101, 94, 91, 91, 109, 13, 10, 13, 10, 35, 32, 69, 120, 97, 109, 112, 108, 101, 32, 117, 108, 97, 114, 110, 32, 111, 112, 116, 105, 111, 110, 115, 32, 102, 105, 108, 101, 13, 10, 35, 13, 10, 35, 32, 83, 101, 116, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 100, 97, 116, 97, 32, 104, 101, 114, 101, 13, 10, 35, 13, 10, 79, 80, 84, 73, 79, 78, 61, 110, 97, 109, 101, 58, 70, 114, 101, 100, 44, 103, 101, 110, 100, 101, 114, 58, 109, 97, 108, 101, 13, 10, 35, 32, 110, 97, 112, 47, 110, 111, 110, 97, 112, 32, 45, 32, 97, 100, 100, 32, 116, 105, 109, 101, 32, 100, 101, 108, 97, 121, 115, 13, 10, 79, 80, 84, 73, 79, 78, 61, 110, 97, 112, 13, 10, 35, 32, 119, 101, 108, 99, 111, 109, 101, 47, 110, 111, 119, 101, 108, 99, 111, 109, 101, 32, 45, 32, 83, 104, 111, 119, 32, 116, 104, 101, 32, 105, 110, 116, 114, 111, 100, 117, 99, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 13, 10, 79, 80, 84, 73, 79, 78, 61, 119, 101, 108, 99, 111, 109, 101, 13, 10, 79, 80, 84, 73, 79, 78, 61, 110, 111, 101, 110, 104, 97, 110, 99, 101, 100, 95, 105, 110, 116, 101, 114, 102, 97, 99, 101, 13, 10, 79, 80, 84, 73, 79, 78, 61, 98, 101, 101, 112, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 9, 32, 32, 32, 32, 32, 32, 32, 94, 91, 91, 55, 109, 69, 120, 112, 108, 97, 110, 97, 116, 105, 111, 110, 32, 111, 102, 32, 116, 104, 101, 32, 85, 108, 97, 114, 110, 32, 115, 99, 111, 114, 101, 98, 111, 97, 114, 100, 32, 102, 97, 99, 105, 108, 105, 116, 121, 94, 91, 91, 109, 13, 10, 13, 10, 32, 32, 32, 32, 85, 108, 97, 114, 110, 32, 115, 117, 112, 112, 111, 114, 116, 115, 32, 84, 87, 79, 32, 115, 99, 111, 114, 101, 98, 111, 97, 114, 100, 115, 44, 32, 111, 110, 101, 32, 102, 111, 114, 32, 119, 105, 110, 110, 101, 114, 115, 44, 32, 97, 110, 100, 32, 111, 110, 101, 32, 102, 111, 114, 32, 100, 101, 99, 101, 97, 115, 101, 100, 13, 10, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 46, 32, 32, 69, 97, 99, 104, 32, 112, 108, 97, 121, 101, 114, 32, 105, 115, 32, 97, 108, 108, 111, 119, 101, 100, 32, 111, 110, 101, 32, 115, 108, 111, 116, 32, 111, 110, 32, 101, 97, 99, 104, 32, 115, 99, 111, 114, 101, 98, 111, 97, 114, 100, 44, 32, 105, 102, 32, 116, 104, 101, 32, 115, 99, 111, 114, 101, 13, 10, 105, 115, 32, 105, 110, 32, 116, 104, 101, 32, 116, 111, 112, 32, 116, 101, 110, 32, 102, 111, 114, 32, 116, 104, 97, 116, 32, 115, 99, 111, 114, 101, 98, 111, 97, 114, 100, 46, 32, 32, 84, 104, 105, 115, 32, 100, 101, 115, 105, 103, 110, 32, 104, 101, 108, 112, 115, 32, 101, 110, 115, 117, 114, 101, 32, 116, 104, 97, 116, 32, 102, 114, 101, 113, 117, 101, 110, 116, 32, 13, 10, 112, 108, 97, 121, 101, 114, 115, 32, 111, 102, 32, 85, 108, 97, 114, 110, 32, 100, 111, 32, 110, 111, 116, 32, 104, 111, 103, 32, 116, 104, 101, 32, 115, 99, 111, 114, 101, 98, 111, 97, 114, 100, 32, 97, 110, 100, 32, 103, 105, 118, 101, 115, 32, 109, 111, 114, 101, 32, 112, 108, 97, 121, 101, 114, 115, 32, 97, 32, 99, 104, 97, 110, 99, 101, 32, 13, 10, 102, 111, 114, 32, 103, 108, 111, 114, 121, 46, 32, 32, 76, 101, 118, 101, 108, 32, 111, 102, 32, 100, 105, 102, 102, 105, 99, 117, 108, 116, 121, 32, 105, 115, 32, 97, 108, 115, 111, 32, 110, 111, 116, 101, 100, 32, 111, 110, 32, 116, 104, 101, 32, 115, 99, 111, 114, 101, 98, 111, 97, 114, 100, 115, 32, 97, 110, 100, 32, 116, 104, 105, 115, 32, 13, 10, 116, 97, 107, 101, 115, 32, 112, 114, 101, 99, 101, 100, 101, 110, 99, 101, 32, 111, 118, 101, 114, 32, 115, 99, 111, 114, 101, 32, 102, 111, 114, 32, 100, 101, 116, 101, 114, 109, 105, 110, 105, 110, 103, 32, 119, 104, 97, 116, 32, 101, 110, 116, 114, 121, 32, 105, 115, 32, 111, 110, 32, 116, 104, 101, 32, 115, 99, 111, 114, 101, 98, 111, 97, 114, 100, 46, 32, 32, 13, 10, 70, 111, 114, 32, 101, 120, 97, 109, 112, 108, 101, 58, 32, 105, 102, 32, 34, 83, 97, 116, 121, 114, 44, 32, 116, 104, 101, 32, 85, 108, 97, 114, 110, 32, 71, 111, 100, 34, 32, 104, 97, 115, 32, 97, 32, 115, 99, 111, 114, 101, 32, 111, 102, 32, 49, 50, 56, 48, 48, 51, 32, 111, 110, 32, 116, 104, 101, 32, 115, 99, 111, 114, 101, 98, 111, 97, 114, 100, 32, 13, 10, 97, 116, 32, 100, 105, 102, 102, 32, 48, 44, 32, 116, 104, 101, 110, 32, 104, 105, 115, 32, 103, 97, 109, 101, 32, 97, 116, 32, 100, 105, 102, 102, 32, 49, 32, 97, 110, 100, 32, 97, 32, 115, 99, 111, 114, 101, 32, 111, 102, 32, 52, 49, 49, 50, 32, 119, 111, 117, 108, 100, 32, 114, 101, 112, 108, 97, 99, 101, 32, 104, 105, 115, 32, 13, 10, 112, 114, 101, 118, 105, 111, 117, 115, 32, 101, 110, 116, 114, 121, 32, 111, 110, 32, 116, 104, 101, 32, 115, 99, 111, 114, 101, 98, 111, 97, 114, 100, 46, 32, 32, 78, 111, 116, 101, 32, 116, 104, 97, 116, 32, 119, 104, 101, 110, 32, 97, 32, 112, 108, 97, 121, 101, 114, 32, 100, 105, 101, 115, 44, 32, 104, 105, 115, 32, 105, 110, 118, 101, 110, 116, 111, 114, 121, 32, 13, 10, 105, 115, 32, 115, 116, 111, 114, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 115, 99, 111, 114, 101, 98, 111, 97, 114, 100, 32, 115, 111, 32, 116, 104, 97, 116, 32, 101, 118, 101, 114, 121, 111, 110, 101, 32, 99, 97, 110, 32, 115, 101, 101, 32, 119, 104, 97, 116, 32, 105, 116, 101, 109, 115, 32, 116, 104, 101, 32, 112, 108, 97, 121, 101, 114, 32, 104, 97, 100, 13, 10, 97, 116, 32, 116, 104, 101, 32, 116, 105, 109, 101, 32, 111, 102, 32, 104, 105, 115, 32, 100, 101, 97, 116, 104, 46, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 85, 108, 97, 114, 110, 32, 119, 97, 115, 32, 119, 114, 105, 116, 116, 101, 110, 32, 105, 110, 32, 49, 57, 56, 55, 32, 98, 121, 32, 80, 104, 105, 108, 32, 67, 111, 114, 100, 105, 101, 114, 32, 97, 116, 32, 85, 67, 32, 83, 97, 110, 116, 97, 32, 67, 114, 117, 122, 46, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 73, 116, 32, 119, 97, 115, 32, 117, 112, 100, 97, 116, 101, 100, 32, 105, 110, 32, 50, 48, 48, 49, 32, 98, 121, 32, 74, 111, 115, 104, 32, 66, 114, 97, 110, 100, 116, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 67, 111, 110, 116, 97, 99, 116, 32, 104, 105, 109, 32, 97, 116, 32, 109, 117, 116, 101, 64, 103, 119, 101, 101, 112, 46, 110, 101, 116, 32, 102, 111, 114, 32, 105, 110, 102, 111, 32, 114, 101, 103, 97, 114, 100, 105, 110, 103, 32, 116, 104, 101, 32, 103, 97, 109, 101, 46, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 87, 105, 110, 100, 111, 119, 115, 32, 51, 50, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 43, 32, 84, 105, 108, 101, 115, 32, 115, 117, 112, 112, 111, 114, 116, 32, 105, 110, 32, 50, 48, 48, 51, 32, 98, 121, 32, 74, 117, 108, 105, 97, 110, 32, 79, 108, 100, 115, 13, 10, 13, 10, 13, 10]), true, true);
Module['FS_createDataFile']('/lib', 'Umaps', [35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 46, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 68, 32, 46, 32, 32, 32, 35, 13, 10, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 35, 35, 68, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 46, 32, 32, 46, 35, 13, 10, 35, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 68, 32, 35, 35, 35, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 46, 46, 46, 32, 35, 46, 35, 32, 32, 32, 35, 32, 35, 32, 32, 35, 32, 46, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 35, 35, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 35, 35, 68, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 35, 46, 35, 32, 35, 32, 35, 32, 35, 35, 32, 35, 32, 32, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 32, 35, 32, 35, 45, 32, 32, 35, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 46, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 46, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 35, 32, 35, 45, 32, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 45, 32, 32, 32, 32, 32, 68, 32, 35, 35, 35, 35, 32, 35, 32, 35, 32, 46, 32, 68, 32, 32, 32, 32, 35, 32, 35, 46, 35, 32, 35, 32, 46, 46, 46, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 35, 32, 35, 46, 35, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 35, 32, 35, 32, 35, 32, 32, 32, 46, 32, 46, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 35, 45, 35, 32, 35, 32, 126, 46, 33, 32, 35, 13, 10, 35, 35, 35, 68, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 68, 35, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 46, 46, 46, 35, 13, 10, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 68, 35, 35, 35, 13, 10, 35, 32, 32, 46, 32, 32, 35, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 45, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 46, 46, 46, 46, 46, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 68, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 32, 32, 32, 32, 32, 68, 46, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 46, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 45, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 35, 13, 10, 35, 32, 35, 68, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 46, 35, 13, 10, 35, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 35, 32, 35, 35, 13, 10, 35, 46, 35, 46, 35, 68, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 46, 32, 35, 13, 10, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 35, 45, 35, 13, 10, 35, 32, 35, 45, 35, 32, 35, 68, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 35, 32, 46, 35, 13, 10, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 46, 32, 32, 32, 32, 32, 35, 32, 45, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 46, 32, 32, 32, 45, 35, 32, 32, 46, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 35, 33, 35, 32, 35, 32, 32, 35, 32, 35, 35, 13, 10, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 46, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 46, 35, 35, 35, 46, 35, 35, 35, 126, 35, 32, 35, 32, 32, 35, 46, 32, 35, 13, 10, 35, 46, 35, 32, 35, 32, 35, 32, 46, 32, 32, 32, 35, 32, 46, 32, 32, 46, 32, 32, 35, 32, 32, 32, 32, 46, 32, 32, 35, 32, 32, 32, 32, 45, 32, 32, 35, 32, 46, 32, 46, 32, 32, 32, 35, 32, 32, 32, 46, 46, 46, 46, 35, 46, 46, 46, 46, 46, 35, 32, 35, 32, 32, 35, 35, 32, 35, 13, 10, 35, 32, 35, 46, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 35, 32, 46, 35, 13, 10, 35, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 32, 35, 45, 35, 35, 13, 10, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 46, 32, 35, 13, 10, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 32, 32, 32, 32, 32, 45, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 46, 32, 46, 32, 35, 35, 32, 35, 13, 10, 35, 45, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 13, 10, 35, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 35, 35, 32, 32, 32, 35, 32, 32, 32, 32, 35, 35, 32, 32, 35, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 46, 32, 46, 32, 32, 46, 32, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 35, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 46, 35, 35, 35, 13, 10, 35, 32, 35, 35, 32, 32, 32, 32, 32, 35, 32, 32, 35, 35, 32, 32, 32, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 35, 46, 32, 32, 32, 35, 35, 32, 32, 35, 35, 35, 35, 35, 68, 35, 68, 32, 35, 13, 10, 35, 32, 68, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 32, 32, 35, 35, 35, 35, 35, 32, 32, 32, 35, 32, 32, 32, 32, 68, 32, 68, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 32, 35, 32, 32, 35, 32, 32, 32, 35, 35, 32, 32, 35, 35, 32, 45, 46, 46, 35, 35, 32, 32, 35, 13, 10, 35, 32, 35, 32, 35, 35, 46, 46, 45, 32, 35, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 35, 32, 35, 35, 32, 32, 46, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 35, 32, 32, 35, 35, 35, 32, 32, 35, 35, 35, 32, 32, 35, 35, 35, 32, 32, 35, 13, 10, 35, 32, 35, 32, 32, 35, 35, 45, 46, 46, 35, 32, 32, 32, 32, 35, 35, 32, 46, 32, 32, 35, 35, 32, 32, 35, 32, 32, 35, 35, 45, 46, 32, 35, 35, 32, 46, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 35, 35, 32, 35, 32, 32, 35, 45, 46, 45, 35, 35, 32, 35, 32, 32, 35, 13, 10, 35, 32, 35, 32, 32, 32, 35, 35, 32, 45, 35, 35, 35, 35, 35, 32, 35, 35, 32, 32, 32, 35, 32, 32, 46, 32, 32, 35, 35, 32, 46, 32, 45, 32, 35, 35, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 35, 35, 32, 32, 35, 32, 32, 35, 46, 46, 35, 35, 32, 32, 35, 32, 32, 35, 13, 10, 35, 46, 35, 35, 35, 35, 32, 35, 35, 68, 35, 35, 45, 46, 35, 32, 32, 35, 35, 32, 32, 35, 32, 32, 46, 32, 35, 35, 32, 46, 46, 46, 46, 46, 45, 35, 35, 32, 32, 35, 32, 35, 32, 35, 32, 35, 46, 46, 35, 35, 32, 32, 45, 35, 35, 35, 35, 32, 35, 35, 32, 32, 32, 35, 32, 32, 35, 13, 10, 35, 32, 35, 32, 32, 35, 32, 68, 68, 32, 35, 35, 45, 46, 68, 32, 32, 32, 35, 35, 32, 35, 32, 46, 46, 35, 35, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 35, 46, 68, 68, 32, 32, 35, 35, 35, 32, 32, 68, 35, 35, 32, 32, 35, 35, 35, 32, 32, 35, 13, 10, 35, 32, 35, 46, 35, 35, 32, 35, 35, 32, 35, 35, 35, 35, 35, 32, 32, 35, 35, 32, 35, 35, 35, 32, 32, 32, 32, 35, 32, 32, 35, 68, 35, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 35, 46, 46, 35, 35, 32, 32, 32, 35, 32, 32, 32, 32, 35, 35, 46, 46, 46, 35, 32, 32, 35, 13, 10, 35, 32, 35, 46, 35, 32, 35, 35, 46, 46, 35, 35, 32, 32, 32, 32, 35, 35, 32, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 35, 35, 46, 35, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 35, 35, 32, 32, 35, 35, 32, 32, 35, 35, 35, 35, 46, 46, 35, 32, 32, 35, 13, 10, 35, 45, 35, 46, 32, 35, 35, 46, 46, 46, 35, 35, 32, 32, 32, 35, 35, 46, 32, 32, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 32, 46, 45, 35, 35, 32, 32, 32, 32, 35, 32, 32, 45, 32, 32, 35, 32, 32, 32, 32, 35, 35, 32, 32, 35, 35, 32, 32, 32, 32, 35, 35, 32, 35, 32, 32, 35, 13, 10, 35, 32, 35, 32, 35, 35, 46, 46, 35, 46, 35, 35, 32, 32, 35, 35, 46, 32, 35, 35, 35, 32, 32, 35, 32, 35, 32, 35, 35, 46, 45, 46, 32, 46, 35, 35, 32, 32, 32, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 32, 32, 35, 35, 35, 35, 32, 32, 35, 35, 68, 46, 32, 35, 13, 10, 35, 32, 35, 35, 35, 32, 35, 35, 35, 35, 35, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 35, 35, 35, 33, 46, 32, 46, 32, 46, 126, 35, 35, 46, 32, 32, 32, 35, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 35, 35, 32, 32, 32, 45, 35, 35, 32, 32, 35, 13, 10, 35, 32, 35, 35, 32, 35, 35, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 35, 32, 32, 35, 35, 32, 32, 35, 35, 35, 35, 32, 32, 35, 35, 32, 35, 13, 10, 35, 35, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 68, 32, 32, 32, 32, 46, 32, 46, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 45, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 32, 32, 32, 32, 32, 32, 32, 35, 35, 46, 46, 46, 46, 46, 32, 32, 35, 35, 35, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 46, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 35, 35, 35, 35, 32, 32, 32, 32, 46, 46, 32, 35, 13, 10, 35, 32, 35, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 35, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 46, 32, 46, 32, 32, 35, 32, 32, 32, 32, 32, 32, 46, 32, 35, 32, 32, 32, 32, 32, 32, 46, 35, 32, 32, 46, 32, 35, 35, 46, 32, 32, 46, 46, 32, 35, 13, 10, 35, 32, 35, 46, 32, 32, 35, 32, 32, 46, 32, 32, 32, 32, 32, 46, 32, 32, 35, 32, 32, 35, 32, 46, 32, 35, 32, 32, 32, 32, 32, 35, 68, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 68, 35, 35, 32, 32, 45, 32, 35, 13, 10, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 35, 35, 46, 35, 35, 32, 46, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 35, 35, 32, 32, 32, 35, 13, 10, 35, 32, 35, 32, 32, 32, 32, 32, 46, 35, 32, 32, 32, 46, 32, 32, 32, 32, 35, 32, 32, 32, 35, 35, 35, 32, 32, 32, 32, 35, 35, 46, 32, 46, 35, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 35, 35, 32, 32, 35, 13, 10, 35, 32, 35, 32, 32, 45, 32, 32, 46, 68, 32, 32, 32, 46, 32, 45, 32, 32, 35, 32, 32, 35, 32, 45, 32, 35, 32, 32, 35, 35, 32, 32, 35, 32, 32, 35, 35, 32, 32, 32, 35, 46, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 35, 32, 35, 35, 32, 35, 13, 10, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 46, 46, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 35, 35, 35, 32, 32, 35, 35, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 35, 35, 32, 32, 35, 35, 35, 13, 10, 35, 32, 68, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 35, 35, 33, 35, 35, 32, 32, 35, 35, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 32, 46, 46, 32, 35, 35, 13, 10, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 46, 32, 32, 32, 32, 35, 35, 32, 32, 35, 35, 46, 126, 46, 35, 35, 32, 32, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 32, 46, 46, 46, 32, 35, 13, 10, 35, 32, 68, 46, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 46, 32, 35, 32, 32, 32, 32, 32, 35, 35, 46, 32, 35, 35, 32, 46, 35, 46, 32, 35, 35, 32, 32, 35, 35, 32, 46, 46, 35, 32, 35, 32, 35, 46, 35, 32, 35, 32, 35, 46, 35, 32, 32, 32, 32, 46, 32, 45, 46, 32, 35, 13, 10, 35, 32, 35, 32, 46, 45, 32, 46, 32, 35, 46, 32, 32, 32, 32, 45, 32, 32, 35, 32, 32, 32, 32, 35, 35, 32, 32, 35, 35, 32, 46, 46, 35, 46, 46, 32, 35, 35, 32, 32, 35, 35, 32, 32, 35, 32, 35, 32, 35, 45, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 35, 32, 32, 32, 32, 32, 32, 68, 46, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 35, 32, 32, 35, 35, 32, 32, 35, 35, 35, 35, 35, 45, 32, 35, 35, 32, 32, 35, 35, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 35, 46, 35, 32, 32, 32, 32, 35, 13, 10, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 68, 35, 35, 32, 32, 35, 35, 32, 32, 35, 35, 32, 46, 46, 32, 46, 46, 46, 32, 46, 46, 32, 35, 35, 32, 32, 35, 35, 35, 35, 35, 32, 35, 46, 35, 32, 35, 32, 35, 32, 35, 35, 32, 35, 32, 32, 32, 45, 32, 35, 35, 13, 10, 35, 32, 35, 46, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 32, 46, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 35, 32, 35, 32, 32, 46, 32, 35, 13, 10, 35, 32, 35, 32, 32, 32, 32, 32, 45, 32, 32, 32, 32, 32, 32, 32, 46, 32, 35, 35, 35, 32, 32, 32, 32, 32, 45, 32, 32, 32, 32, 46, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 46, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 35, 35, 35, 32, 35, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 35, 32, 46, 45, 32, 46, 32, 35, 46, 32, 32, 32, 32, 45, 32, 32, 35, 32, 32, 32, 32, 35, 35, 32, 32, 35, 35, 32, 46, 46, 35, 46, 32, 32, 35, 35, 32, 32, 35, 35, 32, 32, 35, 32, 35, 32, 35, 45, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 35, 32, 32, 32, 32, 32, 32, 68, 46, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 35, 32, 32, 35, 35, 32, 32, 35, 35, 35, 35, 35, 45, 32, 35, 35, 32, 32, 35, 35, 32, 46, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 35, 46, 35, 32, 32, 32, 32, 35, 13, 10, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 68, 35, 35, 32, 32, 35, 35, 32, 32, 35, 35, 32, 46, 32, 32, 32, 32, 32, 32, 46, 46, 32, 35, 35, 32, 32, 35, 35, 35, 35, 35, 32, 35, 46, 35, 32, 35, 32, 35, 32, 35, 35, 32, 35, 32, 32, 32, 45, 32, 35, 35, 13, 10, 35, 46, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 32, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 35, 35, 35, 35, 32, 32, 32, 32, 46, 46, 32, 35, 13, 10, 35, 32, 35, 68, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 35, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 46, 32, 46, 32, 32, 35, 32, 32, 32, 32, 32, 32, 46, 32, 35, 32, 32, 32, 32, 32, 32, 46, 35, 32, 32, 46, 32, 35, 35, 46, 32, 32, 46, 46, 32, 35, 13, 10, 35, 32, 35, 46, 32, 32, 35, 32, 32, 46, 32, 32, 32, 32, 32, 46, 32, 32, 35, 32, 32, 35, 32, 46, 32, 35, 32, 32, 32, 32, 32, 35, 68, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 68, 35, 35, 32, 32, 45, 32, 35, 13, 10, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 46, 32, 32, 32, 32, 35, 35, 32, 32, 35, 35, 46, 32, 46, 35, 35, 32, 32, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 32, 46, 46, 46, 32, 35, 13, 10, 35, 32, 68, 46, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 46, 32, 35, 32, 32, 32, 32, 32, 35, 35, 46, 32, 35, 35, 32, 46, 35, 46, 32, 35, 35, 32, 32, 35, 35, 32, 46, 46, 35, 32, 35, 32, 35, 46, 35, 32, 35, 32, 35, 46, 35, 32, 32, 32, 32, 46, 32, 45, 46, 32, 35, 13, 10, 35, 32, 35, 46, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 32, 46, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 35, 32, 35, 32, 32, 46, 32, 35, 13, 10, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 35, 35, 46, 35, 35, 32, 46, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 35, 35, 32, 32, 32, 35, 13, 10, 35, 32, 35, 32, 32, 32, 32, 32, 46, 35, 32, 32, 32, 46, 32, 32, 32, 32, 35, 32, 32, 35, 35, 35, 35, 32, 32, 32, 32, 35, 35, 46, 32, 46, 35, 35, 68, 68, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 35, 35, 32, 32, 35, 13, 10, 35, 32, 35, 32, 32, 45, 32, 32, 46, 68, 32, 32, 32, 46, 32, 45, 32, 32, 35, 32, 32, 35, 32, 45, 35, 35, 32, 32, 35, 35, 32, 32, 35, 32, 32, 35, 35, 32, 32, 32, 35, 46, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 46, 32, 32, 35, 32, 32, 32, 35, 35, 32, 35, 35, 32, 35, 13, 10, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 46, 46, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 35, 32, 32, 35, 35, 32, 46, 35, 35, 35, 32, 46, 35, 35, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 35, 35, 32, 32, 35, 35, 35, 13, 10, 35, 32, 68, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 35, 32, 32, 35, 35, 33, 35, 35, 32, 32, 35, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 32, 46, 46, 32, 35, 35, 13, 10, 35, 32, 35, 32, 32, 32, 32, 32, 45, 32, 32, 32, 32, 32, 32, 32, 46, 32, 35, 35, 35, 32, 32, 32, 32, 45, 35, 35, 32, 46, 32, 46, 126, 46, 32, 46, 32, 35, 35, 32, 32, 32, 32, 32, 35, 35, 35, 46, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 35, 35, 35, 32, 35, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 46, 46, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 45, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 35, 35, 32, 35, 35, 32, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 32, 35, 13, 10, 35, 46, 35, 33, 35, 126, 35, 32, 35, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 46, 45, 35, 32, 35, 32, 35, 45, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 35, 32, 35, 32, 45, 35, 32, 35, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 35, 32, 35, 46, 35, 32, 32, 46, 32, 32, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 35, 32, 35, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 13, 10, 35, 32, 35, 32, 46, 46, 35, 32, 35, 35, 35, 35, 35, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 35, 35, 35, 32, 35, 32, 32, 32, 32, 35, 35, 32, 35, 35, 32, 35, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 32, 35, 13, 10, 35, 32, 45, 32, 46, 46, 68, 32, 35, 32, 32, 32, 68, 32, 32, 32, 35, 32, 32, 32, 46, 32, 68, 32, 35, 32, 35, 32, 32, 35, 32, 35, 46, 35, 35, 35, 35, 35, 32, 35, 35, 32, 35, 35, 32, 35, 32, 35, 46, 32, 35, 46, 35, 32, 35, 46, 46, 35, 32, 32, 35, 32, 35, 35, 35, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 32, 32, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 35, 32, 68, 32, 32, 35, 32, 68, 32, 32, 68, 32, 32, 32, 35, 46, 46, 68, 32, 32, 35, 32, 32, 32, 32, 32, 35, 13, 10, 35, 45, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 32, 35, 32, 35, 35, 35, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 35, 32, 35, 32, 35, 46, 32, 35, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 13, 10, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 45, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 46, 32, 35, 32, 32, 32, 32, 32, 35, 46, 46, 35, 32, 35, 35, 35, 32, 32, 32, 32, 35, 32, 32, 32, 45, 32, 46, 46, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 32, 35, 35, 35, 32, 35, 13, 10, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 35, 32, 35, 35, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 13, 10, 35, 45, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 68, 32, 32, 32, 32, 35, 35, 35, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 68, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 32, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 46, 46, 32, 32, 32, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 68, 35, 35, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 45, 32, 35, 32, 35, 32, 35, 32, 35, 45, 32, 32, 32, 32, 68, 32, 32, 32, 32, 35, 32, 35, 32, 126, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 35, 35, 35, 32, 35, 32, 32, 35, 32, 35, 32, 32, 32, 32, 68, 32, 32, 32, 45, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 32, 46, 46, 46, 46, 32, 35, 32, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 35, 33, 35, 32, 35, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 46, 46, 32, 32, 35, 46, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 32, 46, 46, 46, 46, 32, 35, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 35, 35, 32, 35, 32, 35, 32, 32, 35, 32, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 68, 35, 35, 35, 35, 32, 35, 32, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 32, 46, 46, 46, 46, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 68, 32, 32, 32, 35, 32, 35, 45, 32, 35, 32, 35, 46, 46, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 46, 46, 46, 35, 46, 35, 32, 35, 32, 35, 46, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 35, 35, 32, 32, 32, 35, 32, 35, 35, 35, 35, 32, 35, 46, 45, 32, 32, 68, 32, 32, 32, 45, 32, 32, 32, 32, 32, 32, 35, 46, 35, 32, 35, 46, 35, 46, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 35, 35, 35, 35, 68, 68, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 68, 32, 68, 46, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 46, 46, 46, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 35, 32, 32, 32, 46, 46, 35, 32, 35, 32, 32, 32, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 46, 46, 46, 46, 46, 46, 35, 32, 35, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 35, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 68, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 35, 13, 10, 35, 32, 32, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 46, 46, 45, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 46, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 33, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 46, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 46, 35, 35, 32, 32, 32, 32, 46, 46, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 46, 46, 46, 46, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 46, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 45, 32, 32, 35, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 68, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 46, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 35, 35, 35, 35, 68, 32, 32, 126, 32, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 46, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 35, 35, 32, 46, 46, 46, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 46, 46, 46, 46, 32, 32, 32, 32, 35, 35, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 46, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 46, 32, 32, 32, 32, 32, 45, 32, 32, 35, 35, 35, 35, 68, 35, 35, 35, 35, 32, 32, 32, 45, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 46, 45, 32, 32, 35, 46, 46, 46, 35, 35, 32, 35, 35, 32, 32, 32, 46, 46, 46, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 32, 32, 46, 46, 46, 46, 46, 46, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 46, 32, 32, 32, 35, 46, 46, 35, 35, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 32, 32, 32, 32, 46, 46, 46, 32, 35, 35, 32, 32, 32, 35, 35, 35, 32, 32, 32, 35, 35, 32, 46, 46, 32, 32, 35, 13, 10, 35, 32, 32, 35, 46, 46, 32, 32, 35, 46, 35, 35, 32, 32, 32, 32, 32, 35, 35, 32, 35, 35, 32, 45, 32, 32, 35, 35, 32, 32, 46, 32, 32, 35, 35, 35, 35, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 35, 35, 35, 35, 35, 32, 32, 32, 35, 35, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 35, 35, 35, 35, 68, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 35, 35, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 32, 32, 32, 32, 35, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 35, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 68, 32, 32, 45, 46, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 68, 68, 35, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 35, 68, 32, 32, 35, 13, 10, 35, 32, 32, 35, 35, 35, 35, 35, 35, 32, 32, 32, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 35, 13, 10, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 35, 35, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 35, 35, 35, 35, 46, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 35, 46, 35, 46, 35, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 32, 35, 46, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 35, 33, 32, 32, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 35, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 35, 35, 46, 46, 46, 35, 35, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 45, 35, 32, 35, 13, 10, 35, 32, 46, 46, 45, 32, 68, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 35, 32, 46, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 32, 32, 46, 46, 32, 35, 35, 35, 32, 35, 32, 32, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 35, 35, 46, 32, 32, 32, 126, 32, 46, 35, 35, 32, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 32, 35, 35, 35, 32, 32, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 32, 35, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 35, 35, 32, 32, 46, 32, 46, 32, 32, 32, 46, 35, 35, 32, 32, 32, 35, 46, 46, 46, 35, 32, 46, 46, 32, 35, 46, 35, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 13, 10, 35, 32, 32, 46, 46, 32, 32, 32, 32, 32, 46, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 45, 32, 32, 32, 35, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 32, 68, 46, 68, 32, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 68, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 35, 35, 46, 46, 46, 46, 46, 46, 46, 35, 35, 32, 32, 32, 32, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 46, 35, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 45, 32, 46, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 35, 32, 46, 32, 35, 32, 32, 32, 32, 35, 35, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35].concat([32, 35, 46, 35, 46, 35, 32, 35, 32, 32, 32, 32, 32, 32, 35, 35, 35, 68, 35, 35, 35, 32, 32, 32, 32, 32, 32, 35, 32, 46, 32, 35, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 45, 35, 32, 68, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 32, 32, 35, 32, 32, 46, 35, 32, 32, 32, 32, 35, 35, 35, 46, 46, 46, 46, 35, 35, 32, 32, 35, 35, 45, 35, 35, 35, 32, 35, 13, 10, 35, 35, 35, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 35, 35, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 32, 32, 35, 13, 10, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 35, 46, 46, 46, 46, 46, 46, 32, 35, 35, 32, 32, 32, 35, 35, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 32, 35, 32, 33, 35, 35, 46, 46, 46, 46, 32, 35, 35, 32, 32, 32, 32, 35, 35, 32, 32, 35, 13, 10, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 35, 35, 32, 32, 35, 35, 32, 32, 32, 32, 46, 46, 46, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 32, 35, 46, 46, 46, 35, 35, 32, 126, 32, 35, 35, 32, 35, 35, 35, 35, 35, 35, 32, 32, 35, 13, 10, 35, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 32, 35, 32, 46, 46, 32, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 35, 13, 10, 35, 32, 32, 32, 35, 32, 32, 32, 32, 45, 32, 46, 46, 32, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 32, 35, 32, 32, 46, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 32, 32, 35, 13, 10, 35, 32, 32, 32, 35, 35, 35, 35, 35, 32, 32, 35, 35, 35, 35, 35, 32, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 46, 46, 46, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 68, 68, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 46, 46, 46, 46, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 35, 35, 32, 32, 32, 32, 32, 35, 35, 32, 32, 35, 13, 10, 35, 32, 32, 32, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 46, 46, 46, 46, 35, 32, 32, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 35, 35, 35, 35, 32, 35, 35, 32, 32, 35, 13, 10, 35, 32, 32, 32, 35, 45, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 46, 46, 35, 32, 32, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 45, 32, 32, 35, 46, 46, 32, 32, 35, 35, 32, 32, 32, 35, 35, 32, 32, 35, 13, 10, 35, 32, 32, 32, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 32, 32, 35, 46, 46, 46, 46, 46, 35, 35, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 46, 46, 46, 32, 32, 35, 35, 35, 35, 32, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 68, 35, 35, 35, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 32, 35, 13, 10, 35, 46, 46, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 45, 46, 46, 68, 32, 35, 35, 35, 35, 35, 35, 32, 32, 32, 35, 35, 32, 32, 32, 32, 35, 32, 35, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 35, 32, 46, 46, 35, 35, 32, 32, 32, 32, 35, 35, 35, 32, 35, 35, 35, 35, 32, 35, 13, 10, 35, 32, 32, 35, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 35, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 35, 32, 32, 35, 35, 35, 35, 35, 32, 35, 32, 32, 35, 35, 32, 35, 35, 35, 32, 35, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 32, 35, 32, 32, 35, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 35, 32, 35, 35, 35, 35, 32, 32, 35, 32, 35, 46, 46, 35, 35, 35, 35, 35, 32, 45, 32, 35, 35, 35, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 32, 35, 46, 46, 46, 35, 32, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 126, 46, 32, 32, 32, 46, 46, 46, 46, 32, 32, 32, 35, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 46, 46, 46, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 35, 32, 35, 35, 35, 32, 32, 32, 35, 35, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 32, 35, 32, 35, 45, 35, 35, 35, 35, 35, 33, 35, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 32, 32, 35, 35, 32, 35, 35, 35, 35, 32, 32, 32, 32, 35, 32, 32, 35, 13, 10, 35, 32, 32, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 46, 46, 32, 46, 46, 46, 46, 35, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 35, 32, 32, 35, 32, 32, 35, 35, 32, 32, 32, 35, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 45, 46, 35, 32, 32, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 46, 46, 46, 35, 35, 32, 32, 35, 32, 32, 32, 32, 46, 32, 32, 46, 35, 32, 32, 35, 46, 46, 35, 32, 32, 35, 32, 32, 32, 35, 35, 32, 32, 32, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 35, 46, 35, 35, 35, 32, 32, 32, 35, 35, 35, 35, 35, 46, 35, 35, 35, 35, 32, 32, 35, 35, 35, 35, 32, 32, 35, 35, 35, 32, 32, 35, 35, 32, 32, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 35, 45, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 46, 46, 46, 46, 35, 35, 35, 35, 32, 32, 32, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 35, 46, 35, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 35, 32, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 46, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 35, 35, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 45, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 46, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 13, 10, 35, 32, 35, 32, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 35, 35, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 32, 35, 32, 35, 13, 10, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 46, 33, 46, 32, 45, 46, 46, 32, 35, 46, 35, 35, 46, 35, 32, 35, 32, 35, 13, 10, 35, 32, 35, 32, 46, 32, 45, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 32, 35, 32, 32, 32, 35, 13, 10, 35, 46, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 68, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 13, 10, 35, 46, 32, 32, 32, 32, 32, 45, 35, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 13, 10, 35, 32, 32, 32, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 68, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 32, 32, 35, 35, 35, 68, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 68, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 68, 35, 35, 35, 32, 35, 35, 35, 46, 35, 35, 35, 32, 35, 13, 10, 35, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 35, 32, 46, 35, 32, 32, 32, 32, 46, 35, 32, 35, 46, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 46, 32, 32, 32, 35, 32, 35, 13, 10, 35, 32, 32, 35, 35, 35, 32, 35, 32, 45, 35, 32, 32, 35, 35, 35, 32, 46, 35, 46, 32, 45, 32, 46, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 46, 46, 46, 45, 32, 35, 32, 35, 32, 46, 46, 32, 32, 35, 32, 35, 32, 32, 45, 46, 46, 35, 32, 35, 32, 46, 32, 32, 32, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 35, 35, 35, 32, 32, 35, 46, 32, 126, 32, 46, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 46, 46, 32, 46, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 13, 10, 35, 46, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 35, 35, 35, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 46, 46, 46, 46, 46, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 13, 10, 35, 32, 35, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 13, 10, 35, 32, 35, 32, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 46, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 68, 32, 46, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 35, 35, 68, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 46, 32, 32, 46, 35, 13, 10, 35, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 35, 35, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 46, 46, 46, 32, 35, 46, 32, 32, 32, 32, 35, 32, 35, 33, 126, 32, 32, 46, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 45, 45, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 68, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 35, 46, 35, 32, 35, 32, 35, 32, 35, 35, 32, 35, 32, 32, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 45, 45, 35, 32, 35, 32, 35, 45, 32, 32, 35, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 46, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 46, 32, 32, 35, 32, 35, 45, 35, 32, 35, 32, 35, 35, 32, 35, 45, 32, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 45, 32, 32, 32, 32, 32, 68, 32, 35, 35, 32, 35, 32, 35, 32, 35, 32, 46, 32, 68, 32, 35, 35, 35, 35, 32, 35, 46, 35, 32, 35, 32, 46, 46, 46, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 35, 32, 35, 45, 35, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 35, 32, 35, 32, 35, 32, 32, 32, 46, 32, 46, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 35, 45, 35, 32, 35, 32, 45, 46, 45, 32, 35, 13, 10, 35, 35, 35, 68, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 68, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 46, 46, 46, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 68, 35, 35, 35, 13, 10, 35, 32, 32, 46, 32, 32, 35, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 45, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 46, 46, 46, 46, 46, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 68, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 68, 32, 32, 32, 32, 32, 68, 46, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 46, 46, 32, 46, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 45, 32, 32, 35, 13, 10, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 35, 35, 32, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 32, 35, 13, 10, 35, 46, 35, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 46, 45, 35, 32, 35, 32, 35, 45, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 35, 32, 35, 32, 45, 35, 32, 35, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 35, 32, 35, 46, 35, 32, 32, 46, 32, 32, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 35, 32, 35, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 13, 10, 35, 32, 35, 32, 46, 46, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 35, 35, 35, 32, 35, 32, 32, 32, 32, 35, 35, 32, 35, 35, 32, 35, 35, 33, 35, 32, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 32, 35, 13, 10, 35, 32, 45, 32, 46, 46, 68, 32, 35, 32, 32, 32, 68, 32, 32, 32, 35, 32, 32, 32, 46, 32, 68, 32, 35, 32, 35, 32, 32, 35, 32, 35, 46, 35, 35, 35, 35, 35, 32, 35, 35, 32, 35, 35, 32, 35, 32, 35, 46, 32, 35, 46, 35, 32, 35, 46, 46, 35, 32, 32, 35, 32, 35, 35, 35, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 32, 32, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 35, 32, 68, 32, 32, 35, 32, 68, 32, 32, 68, 32, 32, 32, 35, 46, 46, 68, 32, 32, 35, 32, 32, 32, 32, 32, 35, 13, 10, 35, 45, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 32, 35, 32, 35, 35, 35, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 35, 32, 35, 32, 35, 46, 32, 35, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 13, 10, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 45, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 35, 32, 35, 35, 35, 32, 32, 32, 32, 35, 32, 32, 32, 45, 32, 46, 46, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 32, 35, 35, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 32, 35, 45, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 45, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 13, 10, 35, 45, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 35, 35, 35, 68, 32, 32, 32, 32, 35, 35, 35, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 13, 10, 35, 126, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 68, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 32, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 46, 46, 32, 32, 32, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 68, 35, 35, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 45, 32, 35, 32, 35, 32, 35, 32, 35, 45, 32, 32, 32, 32, 68, 32, 32, 32, 32, 35, 32, 35, 46, 33, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 35, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 35, 35, 35, 32, 35, 35, 32, 35, 32, 35, 46, 46, 46, 46, 68, 32, 32, 32, 45, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 32, 46, 46, 46, 46, 32, 35, 32, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 35, 126, 35, 32, 35, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 46, 46, 32, 32, 35, 46, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 35, 35, 46, 46, 46, 46, 35, 35, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 35, 35, 46, 35, 32, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 68, 35, 35, 32, 35, 32, 35, 32, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 32, 46, 46, 46, 46, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 68, 32, 32, 46, 35, 32, 35, 45, 32, 35, 32, 32, 46, 46, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 46, 46, 46, 35, 46, 35, 32, 35, 32, 35, 46, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 32, 32, 35, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 35, 35, 32, 32, 46, 35, 32, 35, 35, 35, 35, 32, 32, 46, 45, 32, 32, 68, 32, 32, 32, 45, 32, 32, 32, 32, 32, 32, 35, 46, 35, 32, 35, 46, 35, 46, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 35, 35, 35, 35, 68, 68, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 46, 46, 46, 32, 46, 35, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 46, 35, 46, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 35, 32, 32, 32, 46, 46, 35, 32, 35, 32, 32, 32, 32, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 46, 46, 46, 46, 46, 46, 35, 32, 35, 32, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 68, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 68, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 45, 46, 45, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 35, 13, 10, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 35, 35, 32, 46, 46, 45, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 46, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 35, 35, 32, 46, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 46, 32, 32, 32, 32, 35, 35, 46, 46, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 46, 46, 46, 46, 35, 35, 35, 35, 35, 35, 32, 32, 32, 35, 35, 32, 32, 32, 35, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 32, 46, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 45, 32, 32, 35, 32, 32, 32, 32, 35, 35, 32, 32, 32, 35, 35, 32, 32, 32, 35, 35, 68, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 46, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 46, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 35, 35, 32, 46, 46, 46, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 46, 46, 46, 46, 32, 32, 32, 32, 35, 35, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 35, 35, 32, 32, 45, 32, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 46, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 46, 32, 32, 32, 32, 32, 45, 32, 32, 35, 35, 35, 35, 68, 35, 35, 35, 35, 46, 46, 32, 68, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 46, 45, 32, 32, 35, 46, 46, 46, 35, 35, 32, 35, 35, 32, 32, 32, 46, 46, 46, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 32, 32, 46, 46, 46, 46, 46, 46, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 46, 32, 32, 32, 35, 46, 46, 35, 35, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 32, 32, 32, 32, 46, 46, 46, 32, 35, 35, 32, 32, 32, 35, 35, 35, 32, 32, 32, 35, 35, 32, 46, 46, 32, 32, 35, 13, 10, 35, 32, 32, 35, 46, 46, 32, 32, 35, 46, 35, 35, 32, 32, 32, 32, 32, 35, 35, 32, 35, 35, 32, 45, 32, 32, 35, 35, 32, 32, 46, 32, 32, 35, 35, 35, 35, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 35, 35, 35, 35, 35, 32, 32, 32, 35, 35, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 35, 35, 32, 32, 35, 35, 32, 32, 32, 32, 32, 35, 35, 46, 46, 35, 35, 32, 32, 35, 35, 32, 32, 32, 32, 35, 35, 32, 32, 32, 35, 35, 32, 32, 32, 35, 35, 32, 32, 32, 35, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 68, 32, 32, 45, 46, 35, 35, 32, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 32, 35, 35, 35, 35, 32, 32, 32, 32, 32, 35, 35, 46, 45, 46, 45, 35, 35, 32, 32, 35, 35, 68, 68, 35, 35, 32, 32, 32, 32, 35, 35, 35, 32, 35, 35, 35, 35, 32, 32, 32, 35, 35, 32, 32, 35, 13, 10, 35, 32, 32, 35, 35, 35, 35, 35, 35, 46, 32, 32, 46, 46, 46, 35, 32, 35, 35, 35, 35, 32, 32, 35, 35, 32, 32, 32, 32, 32, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 35, 35, 68, 35, 13, 10, 35, 35, 35, 35, 126, 33, 46, 46, 46, 46, 32, 32, 32, 32, 32, 68, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 35, 35, 35, 35, 46, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 35, 46, 35, 46, 35, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 32, 32, 46, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 35, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 45, 45, 35, 35, 46, 46, 46, 35, 35, 45, 45, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 45, 35, 32, 35, 13, 10, 35, 32, 46, 46, 45, 32, 68, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 35, 45, 35, 35, 32, 46, 32, 32, 32, 35, 35, 45, 35, 32, 32, 32, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 32, 32, 46, 46, 32, 35, 35, 35, 32, 35, 32, 32, 32, 35, 32, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 35, 35, 46, 32, 32, 32, 32, 32, 46, 35, 35, 35, 32, 32, 32, 35, 32, 126, 32, 35, 32, 32, 32, 32, 35, 35, 35, 32, 32, 32, 35, 35, 35, 32, 35, 35, 35, 35, 35, 32, 35, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 35, 35, 32, 32, 46, 32, 46, 32, 32, 32, 46, 35, 35, 32, 32, 32, 35, 46, 46, 46, 35, 32, 46, 46, 32, 35, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 13, 10, 35, 32, 32, 46, 46, 32, 32, 32, 32, 32, 46, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 45, 32, 32, 32, 35, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 32, 68, 46, 32, 32, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 68, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 35, 35, 35, 46, 46, 46, 46, 46, 46, 46, 35, 35, 35, 32, 32, 32, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 46, 35, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 45, 32, 46, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 45, 35, 35, 32, 32, 32, 32, 32, 35, 35, 45, 32, 32, 32, 32, 35, 32, 46, 32, 32, 32, 32, 32, 32, 35, 35, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 46, 35, 46, 35, 32, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 32, 32, 32, 35, 32, 46, 32, 32, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 33, 35, 45, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 32, 32, 35, 32, 32, 46, 32, 32, 32, 32, 32, 35, 35, 35, 46, 46, 46, 46, 35, 35, 32, 32, 35, 35, 45, 35, 35, 35, 32, 35, 13, 10, 35, 35, 35, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 35, 35, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 68, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 68, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 35, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 32, 35, 32, 32, 35, 35, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 32, 32, 35, 35, 32, 32, 32, 32, 46, 46, 46, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 32, 35, 46, 46, 46, 35, 35, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 35, 32, 32, 32, 32, 126, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 35, 33, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 32, 35, 32, 46, 46, 32, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 35, 32, 32, 32, 32, 45, 32, 46, 46, 32, 32, 32, 32, 32, 35, 32, 35, 32]).concat([32, 32, 32, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 32, 35, 32, 32, 46, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 35, 35, 35, 35, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 32, 35, 46, 46, 46, 32, 32, 32, 35, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 46, 32, 32, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 68, 32, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 46, 32, 32, 35, 32, 32, 35, 32, 32, 46, 46, 46, 46, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 35, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 35, 35, 35, 35, 35, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 32, 32, 46, 46, 46, 46, 35, 32, 32, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 35, 35, 35, 35, 68, 35, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 35, 45, 32, 32, 32, 32, 35, 35, 32, 35, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 46, 46, 35, 32, 32, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 45, 32, 32, 35, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 32, 32, 35, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 46, 46, 46, 32, 32, 35, 35, 35, 35, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 68, 35, 35, 35, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 32, 35, 13, 10, 35, 46, 46, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 126, 46, 46, 68, 32, 35, 35, 35, 35, 35, 35, 32, 32, 32, 35, 35, 32, 32, 32, 32, 35, 32, 35, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 35, 32, 46, 46, 35, 35, 32, 32, 32, 32, 35, 35, 35, 32, 35, 35, 35, 35, 32, 35, 13, 10, 35, 32, 32, 35, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 35, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 32, 32, 35, 32, 32, 35, 35, 35, 35, 35, 32, 35, 32, 32, 35, 35, 32, 35, 35, 35, 32, 35, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 32, 35, 32, 32, 35, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 35, 32, 35, 35, 35, 35, 32, 32, 35, 32, 35, 46, 46, 35, 35, 35, 35, 35, 32, 45, 32, 35, 35, 35, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 32, 35, 46, 46, 46, 35, 32, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 33, 46, 32, 32, 32, 46, 46, 46, 46, 32, 32, 32, 35, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 35, 46, 46, 46, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 35, 32, 35, 35, 35, 32, 32, 32, 35, 35, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 32, 35, 32, 35, 45, 32, 32, 32, 32, 35, 32, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 32, 32, 32, 32, 35, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 46, 46, 32, 46, 46, 46, 46, 35, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 35, 32, 32, 32, 35, 35, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 45, 46, 32, 32, 32, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 46, 46, 46, 35, 35, 32, 32, 35, 32, 32, 32, 32, 46, 32, 32, 46, 35, 32, 32, 32, 46, 46, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 32, 32, 32, 35, 35, 35, 35, 35, 46, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 45, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 46, 46, 46, 46, 35, 35, 35, 35, 32, 32, 32, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 35, 46, 35, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 35, 32, 35, 32, 35, 13, 10, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 46, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 35, 35, 35, 32, 35, 13, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 68, 32, 68, 32, 32, 32, 32, 32, 35, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 46, 35, 35, 35, 35, 35, 46, 35, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 13, 10, 35, 32, 35, 32, 35, 35, 35, 35, 35, 32, 32, 35, 46, 45, 35, 46, 35, 126, 35, 35, 35, 46, 35, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 35, 32, 35, 35, 35, 32, 32, 32, 32, 32, 32, 46, 46, 46, 46, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 32, 35, 32, 35, 13, 10, 35, 32, 35, 32, 46, 32, 32, 32, 35, 32, 35, 68, 35, 35, 35, 46, 46, 46, 46, 46, 46, 46, 35, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 46, 32, 45, 46, 46, 32, 35, 46, 32, 35, 46, 35, 32, 35, 32, 35, 13, 10, 35, 32, 35, 32, 46, 32, 45, 32, 35, 32, 35, 35, 46, 32, 35, 46, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 35, 32, 32, 32, 35, 13, 10, 35, 68, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 35, 35, 46, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 68, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 13, 10, 35, 46, 32, 68, 32, 68, 32, 45, 35, 32, 35, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 13, 10, 35, 32, 32, 35, 35, 35, 35, 35, 35, 32, 35, 35, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 35, 13, 10, 35, 32, 32, 35, 32, 32, 32, 32, 68, 32, 32, 32, 32, 35, 35, 35, 32, 32, 35, 35, 35, 68, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 68, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 68, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 35, 32, 35, 13, 10, 35, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 35, 32, 46, 35, 32, 32, 32, 32, 46, 35, 32, 35, 46, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 46, 32, 32, 32, 35, 32, 35, 13, 10, 35, 32, 32, 35, 35, 35, 32, 32, 32, 45, 35, 32, 32, 35, 32, 35, 32, 46, 35, 46, 32, 45, 32, 46, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 46, 46, 46, 45, 32, 35, 32, 35, 32, 46, 46, 32, 32, 35, 32, 35, 32, 32, 45, 46, 46, 35, 32, 35, 32, 46, 32, 32, 32, 35, 32, 35, 13, 10, 35, 68, 68, 35, 32, 32, 32, 32, 32, 32, 35, 32, 32, 35, 32, 35, 32, 32, 35, 46, 32, 32, 32, 46, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 46, 46, 32, 46, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 13, 10, 35, 46, 35, 35, 35, 35, 35, 35, 32, 32, 35, 32, 32, 32, 32, 35, 32, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 46, 46, 46, 46, 46, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 33, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 35, 32, 35, 13, 10, 35, 32, 35, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 32, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 68, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 32, 35, 35, 35, 68, 35, 13, 10, 35, 32, 35, 32, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 45, 68, 32, 32, 46, 32, 32, 32, 32, 32, 32, 45, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 45, 45, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 45, 45, 32, 32, 46, 45, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 13, 10, 35, 32, 35, 32, 35, 32, 32, 32, 46, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 46, 32, 32, 32, 32, 46, 32, 35, 13, 10, 35, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 35, 45, 32, 46, 32, 32, 32, 32, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 46, 35, 32, 35, 32, 35, 46, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 46, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 45, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 13, 10, 35, 32, 35, 32, 35, 46, 45, 45, 46, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 46, 32, 32, 32, 35, 13, 10, 35, 32, 35, 32, 35, 45, 46, 46, 45, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 32, 35, 32, 35, 35, 35, 35, 32, 35, 45, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 35, 32, 35, 35, 35, 35, 35, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 45, 35, 32, 32, 32, 32, 32, 35, 32, 35, 32, 32, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 46, 35, 32, 32, 46, 32, 32, 35, 46, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 32, 35, 32, 35, 35, 35, 35, 32, 35, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 13, 10, 35, 32, 35, 35, 35, 35, 35, 32, 35, 32, 35, 46, 35, 32, 35, 46, 35, 32, 35, 46, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 46, 35, 46, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 46, 32, 32, 32, 35, 13, 10, 35, 32, 35, 32, 46, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 46, 35, 32, 35, 32, 35, 46, 35, 32, 35, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 13, 10, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 13, 10, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 33, 126, 45, 45, 45, 68, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 35, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 46, 32, 35, 13, 10, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13, 10]), true, true);
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }
})();
// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };
  Module['load'] = function load(f) {
    globalEval(read(f));
  };
  Module['arguments'] = process['argv'].slice(2);
  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }
  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };
  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  this['Module'] = Module;
  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  if (typeof console !== 'undefined') {
    Module['print'] = function print(x) {
      console.log(x);
    };
    Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];
// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + Pointer_stringify(code) + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;
      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }
      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;
// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;
function demangle(func) {
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    var i = 3;
    // params, etc.
    var basicTypes = {
      'v': 'void',
      'b': 'bool',
      'c': 'char',
      's': 'short',
      'i': 'int',
      'l': 'long',
      'f': 'float',
      'd': 'double',
      'w': 'wchar_t',
      'a': 'signed char',
      'h': 'unsigned char',
      't': 'unsigned short',
      'j': 'unsigned int',
      'm': 'unsigned long',
      'x': 'long long',
      'y': 'unsigned long long',
      'z': '...'
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = '';
      for (var a = 0; a < i; a++) pre += ' ';
      Module.print (pre + '^');
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === 'K') i++; // ignore const
      var parts = [];
      while (func[i] !== 'E') {
        if (func[i] === 'S') { // substitution
          i++;
          var next = func.indexOf('_', i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || '?');
          i = next+1;
          continue;
        }
        if (func[i] === 'C') { // constructor
          parts.push(parts[parts.length-1]);
          i += 2;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) { i--; break; } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    var first = true;
    function parse(rawList, limit, allowVoid) { // main parser
      limit = limit || Infinity;
      var ret = '', list = [];
      function flushList() {
        return '(' + list.join(', ') + ')';
      }
      var name;
      if (func[i] === 'N') {
        // namespaced N-E
        name = parseNested().join('::');
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      } else {
        // not namespaced
        if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      }
      first = false;
      if (func[i] === 'I') {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
            case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
            case 'L': { // literal
              i++; // skip basic type
              var end = func.indexOf('E', i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case 'A': { // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== '_') throw '?';
              i++; // skip _
              list.push(parse(true, 1, true)[0] + ' [' + size + ']');
              break;
            }
            case 'E': break paramLoop;
            default: ret += '?' + c; break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch(e) {
    return func;
  }
}
function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}
function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays in asm.js. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', or (2) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited
var runtimeInitialized = false;
function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
var memoryInitializer = null;
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 137112;
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });
/* memory initializer */ allocate([152,157,0,0,64,154,0,0,32,150,0,0,112,147,0,0,144,144,0,0,200,140,0,0,232,137,0,0,24,135,0,0,200,132,0,0,200,130,0,0,8,129,0,0,144,127,0,0,32,126,0,0,208,124,0,0,48,123,0,0,152,121,0,0,40,120,0,0,216,118,0,0,104,117,0,0,184,115,0,0,88,114,0,0,8,113,0,0,248,111,0,0,208,110,0,0,216,109,0,0,184,108,0,0,176,107,0,0,176,106,0,0,72,105,0,0,200,103,0,0,136,102,0,0,56,101,0,0,40,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,31,0,0,0,21,0,0,0,26,0,0,0,27,0,0,0,49,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,38,0,0,0,43,0,0,0,64,0,0,0,44,0,0,0,45,0,0,0,47,0,0,0,50,0,0,0,39,0,0,0,61,0,0,0,62,0,0,0,70,0,0,0,71,0,0,0,65,0,0,0,68,0,0,0,74,0,0,0,97,0,0,0,28,0,0,0,30,0,0,0,1,2,3,5,6,8,9,11,13,14,0,0,0,0,0,0,1,4,7,11,15,20,24,28,30,32,33,34,35,36,37,38,38,38,38,38,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,4,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,4,0,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,15,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,8,0,10,2,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,10,1,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,8,0,4,0,0,0,0,0,0,14,0,0,0,0,0,0,4,0,4,0,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,8,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,0,0,0,0,0,14,0,0,0,0,0,0,4,0,0,0,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,8,0,4,1,0,0,0,0,0,0,0,0,4,0,0,0,4,0,4,0,4,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,10,1,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,3,0,0,0,0,0,0,0,0,5,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,8,3,4,1,0,0,0,0,0,0,0,0,0,9,0,0,4,0,0,0,0,0,16,4,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,8,3,4,1,0,0,0,0,0,14,5,0,4,9,0,0,4,0,4,0,4,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,9,0,0,12,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,9,0,0,11,0,0,0,0,0,14,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,8,3,10,1,0,0,0,0,0,14,5,0,0,9,0,0,4,0,4,0,9,0,4,4,3,0,0,9,4,9,0,0,0,0,0,0,0,13,0,8,3,10,1,0,0,0,0,0,14,5,0,0,9,0,0,4,0,4,0,9,0,4,4,3,0,0,9,4,9,0,0,0,0,0,0,0,13,0,8,3,10,1,0,0,0,0,0,14,5,0,0,9,0,0,4,0,4,0,9,0,4,4,3,0,0,9,4,9,0,0,0,0,0,0,0,13,0,8,3,10,1,0,0,0,0,0,14,5,0,0,9,0,0,4,0,4,0,9,0,4,4,3,0,0,9,4,9,0,0,0,0,0,0,0,13,0,8,3,10,1,0,0,0,0,0,14,5,0,0,9,0,0,4,0,4,0,9,0,4,4,3,0,0,9,4,9,0,0,0,0,0,0,0,13,0,8,3,10,1,0,0,0,0,0,14,5,0,0,4,0,0,4,0,4,0,0,0,4,4,3,0,0,9,4,9,0,0,0,0,0,0,0,13,0,8,3,10,1,0,0,0,0,0,14,5,0,0,4,0,0,4,0,4,0,0,0,4,4,3,0,0,9,4,9,0,0,0,0,0,0,0,13,0,8,3,10,1,0,0,0,0,0,14,5,0,0,4,0,0,4,0,4,0,4,0,4,4,3,0,0,9,4,9,0,0,0,0,0,0,0,13,0,8,3,10,1,0,0,0,0,0,14,5,18,0,9,0,0,4,0,4,18,4,0,0,4,4,4,0,9,4,9,0,17,0,0,0,0,0,0,152,108,0,0,152,107,0,0,144,106,0,0,40,105,0,0,160,103,0,0,88,102,0,0,72,86,0,0,16,101,0,0,8,100,0,0,0,99,0,0,88,98,0,0,96,97,0,0,176,96,0,0,192,95,0,0,160,94,0,0,192,93,0,0,160,92,0,0,32,92,0,0,64,91,0,0,136,90,0,0,168,89,0,0,0,88,0,0,248,86,0,0,56,86,0,0,24,85,0,0,80,84,0,0,72,83,0,0,224,82,0,0,56,82,0,0,104,81,0,0,224,80,0,0,232,79,0,0,32,79,0,0,0,78,0,0,176,76,0,0,208,75,0,0,176,74,0,0,0,74,0,0,24,73,0,0,0,0,0,0,112,246,1,0,208,145,0,0,144,145,0,0,88,145,0,0,24,145,0,0,232,144,0,0,168,144,0,0,80,144,0,0,16,144,0,0,152,143,0,0,32,143,0,0,120,142,0,0,56,142,0,0,224,141,0,0,144,141,0,0,104,141,0,0,216,140,0,0,112,140,0,0,48,140,0,0,0,0,0,0,24,72,0,0,24,71,0,0,64,70,0,0,112,69,0,0,80,68,0,0,80,67,0,0,88,66,0,0,96,65,0,0,144,64,0,0,144,63,0,0,176,62,0,0,8,62,0,0,192,60,0,0,0,60,0,0,56,59,0,0,16,58,0,0,40,57,0,0,64,56,0,0,224,55,0,0,232,54,0,0,88,54,0,0,168,53,0,0,184,52,0,0,232,179,0,0,16,179,0,0,112,178,0,0,208,177,0,0,32,177,0,0,160,176,0,0,224,175,0,0,40,175,0,0,152,174,0,0,224,173,0,0,232,172,0,0,232,171,0,0,232,170,0,0,144,169,0,0,168,168,0,0,232,167,0,0,0,0,0,0,120,177,0,0,168,172,0,0,192,134,0,0,200,118,0,0,160,106,0,0,208,95,0,0,72,86,0,0,24,78,0,0,128,68,0,0,112,59,0,0,80,179,0,0,24,172,0,0,152,165,0,0,48,161,0,0,168,156,0,0,216,153,0,0,152,149,0,0,32,147,0,0,40,144,0,0,88,140,0,0,24,137,0,0,168,134,0,0,112,132,0,0,160,130,0,0,232,128,0,0,80,127,0,0,248,125,0,0,160,124,0,0,32,123,0,0,96,121,0,0,24,120,0,0,192,118,0,0,72,117,0,0,152,115,0,0,24,114,0,0,240,112,0,0,216,111,0,0,176,110,0,0,184,109,0,0,0,0,0,0,0,0,0,0,10,0,0,0,20,0,0,0,40,0,0,0,80,0,0,0,160,0,0,0,64,1,0,0,128,2,0,0,0,5,0,0,0,10,0,0,0,20,0,0,0,40,0,0,0,80,0,0,0,160,0,0,160,134,1,0,64,13,3,0,128,26,6,0,96,174,10,0,64,66,15,0,128,132,30,0,192,198,45,0,0,9,61,0,64,75,76,0,128,141,91,0,0,18,122,0,128,150,152,0,0,27,183,0,128,159,213,0,0,36,244,0,128,168,18,1,0,45,49,1,128,177,79,1,0,54,110,1,128,186,140,1,0,63,171,1,128,195,201,1,0,72,232,1,128,204,6,2,0,81,37,2,128,213,67,2,0,90,98,2,128,222,128,2,0,99,159,2,128,231,189,2,0,108,220,2,128,240,250,2,0,117,25,3,128,249,55,3,0,126,86,3,128,2,117,3,0,135,147,3,128,11,178,3,0,144,208,3,128,20,239,3,0,153,13,4,128,29,44,4,0,162,74,4,128,38,105,4,0,171,135,4,128,47,166,4,0,180,196,4,128,56,227,4,0,189,1,5,128,65,32,5,0,198,62,5,128,74,93,5,0,207,123,5,128,83,154,5,0,216,184,5,128,92,215,5,0,225,245,5,64,44,66,6,128,119,142,6,192,194,218,6,0,14,39,7,64,89,115,7,128,164,191,7,192,239,11,8,0,59,88,8,64,134,164,8,128,209,240,8,192,28,61,9,0,104,137,9,64,179,213,9,128,254,33,10,192,73,110,10,0,149,186,10,64,224,6,11,128,43,83,11,192,118,159,11,0,194,235,11,128,88,132,12,0,239,28,13,128,133,181,13,0,28,78,14,0,73,127,15,0,118,176,16,0,163,225,17,0,208,18,19,0,253,67,20,128,192,13,22,0,0,0,0,1,0,0,0,0,0,0,0,152,55,0,0,216,138,0,0,160,120,0,0,32,108,0,0,8,97,0,0,96,87,0,0,136,79,0,0,240,69,0,0,72,60,0,0,104,52,0,0,80,173,0,0,40,166,0,0,128,161,0,0,56,157,0,0,48,154,0,0,16,150,0,0,96,147,0,0,128,144,0,0,176,140,0,0,216,137,0,0,8,135,0,0,184,132,0,0,184,130,0,0,240,128,0,0,136,127,0,0,136,127,0,0,136,127,0,0,136,127,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,8,8,8,9,9,9,9,10,10,10,10,11,11,11,12,12,12,13,13,13,13,14,14,15,15,16,16,16,17,17,18,18,19,19,19,20,20,20,20,21,22,22,22,23,0,0,0,0,0,0,0,28,0,254,255,27,0,252,255,25,0,251,255,29,0,250,255,24,0,248,255,30,0,247,255,80,0,0,0,0,0,0,0,0,0,1,1,1,2,3,3,4,4,5,5,6,6,7,7,8,9,9,9,10,10,10,11,11,12,12,13,14,15,16,17,18,19,19,20,20,22,22,23,23,0,0,0,0,0,0,0,144,66,0,0,64,143,0,0,144,122,0,0,120,109,0,0,40,98,0,0,80,89,0,0,160,80,0,0,248,70,0,0,112,61,0,0,96,53,0,0,56,174,0,0,176,166,0,0,208,161,0,0,224,157,0,0,96,154,0,0,72,150,0,0,160,147,0,0,216,144,0,0,0,141,0,0,32,138,0,0,64,135,0,0,224,132,0,0,232,130,0,0,40,129,0,0,176,127,0,0,176,127,0,0,176,127,0,0,176,127,0,0,176,127,0,0,176,127,0,0,176,127,0,0,176,127,0,0,176,127,0,0,176,127,0,0,176,127,0,0,0,0,0,0,175,0,0,0,191,0,0,0,64,0,0,0,65,0,0,0,142,0,0,0,144,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,74,0,0,0,76,0,0,0,77,0,0,0,80,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,81,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,131,0,0,0,155,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,128,0,0,0,153,0,0,0,154,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,66,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,148,0,0,0,149,0,0,0,150,0,0,0,151,0,0,0,152,0,0,0,162,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,73,0,0,0,75,0,0,0,79,0,0,0,78,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,132,0,0,0,140,0,0,0,145,0,0,0,161,0,0,0,191,0,0,0,129,0,0,0,191,0,0,0,136,0,0,0,138,0,0,0,191,0,0,0,191,0,0,0,143,0,0,0,146,0,0,0,147,0,0,0,156,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,160,0,0,0,0,0,0,0,32,32,65,84,84,84,80,37,126,70,38,94,61,37,126,102,79,68,35,42,42,42,42,111,91,91,91,91,91,91,91,91,91,91,40,40,40,40,40,40,40,40,40,40,40,40,61,61,61,61,61,61,61,61,41,63,33,66,67,111,34,111,46,46,46,46,46,46,47,47,34,60,60,60,60,77,83,36,36,69,86,86,72,84,76,80,32,94,32,94,94,32,32,115,99,117,58,58,58,58,58,0,0,0,40,246,1,0,40,246,1,0,80,159,0,0,104,129,0,0,104,129,0,0,176,114,0,0,0,103,0,0,232,92,0,0,160,83,0,0,32,75,0,0,192,65,0,0,128,56,0,0,104,177,0,0,224,168,0,0,8,164,0,0,160,159,0,0,72,155,0,0,88,152,0,0,224,148,0,0,0,146,0,0,0,146,0,0,0,146,0,0,0,146,0,0,240,142,0,0,120,139,0,0,16,136,0,0,128,133,0,0,104,131,0,0,176,129,0,0,8,128,0,0,216,126,0,0,104,125,0,0,240,123,0,0,128,122,0,0,192,120,0,0,72,119,0,0,16,118,0,0,168,116,0,0,240,114,0,0,192,113,0,0,152,112,0,0,128,111,0,0,120,110,0,0,96,109,0,0,72,108,0,0,40,107,0,0,232,105,0,0,120,104,0,0,24,103,0,0,248,101,0,0,216,100,0,0,200,99,0,0,192,98,0,0,8,98,0,0,40,97,0,0,120,96,0,0,8,95,0,0,72,94,0,0,24,93,0,0,120,92,0,0,200,91,0,0,8,91,0,0,48,90,0,0,48,89,0,0,144,87,0,0,192,86,0,0,128,85,0,0,232,84,0,0,208,83,0,0,40,83,0,0,176,82,0,0,24,82,0,0,32,81,0,0,136,80,0,0,176,79,0,0,184,78,0,0,48,77,0,0,120,76,0,0,96,75,0,0,136,74,0,0,200,73,0,0,176,72,0,0,208,71,0,0,224,70,0,0,24,70,0,0,48,69,0,0,0,68,0,0,0,68,0,0,32,67,0,0,32,67,0,0,232,65,0,0,232,65,0,0,128,56,0,0,16,65,0,0,48,64,0,0,96,63,0,0,112,62,0,0,96,61,0,0,120,60,0,0,160,59,0,0,200,58,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,3,0,0,0,0,0,0,0,1,1,2,2,3,4,0,0,0,0,0,0,0,55,55,55,55,56,56,56,56,19,19,19,19,57,57,57,57,39,39,39,26,26,26,47,48,49,50,51,38,54,27,28,32,42,25,37,24,41,0,0,0,0,0,0,0,1,1,2,2,3,3,4,5,6,7,0,0,0,0,1,1,1,1,2,2,3,3,4,5,0,0,0,0,0,0,1,1,1,2,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,32,108,71,72,74,75,79,83,99,106,116,65,69,76,78,81,82,90,97,98,104,105,67,84,89,100,101,103,109,118,122,70,87,102,108,111,114,88,86,32,112,113,115,121,85,107,77,119,68,68,80,120,110,68,68,117,68,49,50,51,52,53,54,55,57,48,0,0,0,0,0,0,5,11,17,22,27,33,39,42,46,50,53,56,0,0,0,0,152,101,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,154,0,0,1,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,240,127,0,0,1,10,1,0,8,0,30,0,2,0,0,0,2,0,0,0,130,0,0,0,160,113,0,0,1,13,2,0,5,0,25,0,3,0,0,0,2,0,0,0,10,0,0,0,200,101,0,0,1,7,1,0,4,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,96,92,0,0,1,15,1,0,7,0,10,0,1,0,0,0,1,0,0,0,130,0,0,0,16,83,0,0,2,15,3,0,9,0,40,0,5,0,0,0,2,0,0,0,2,0,0,0,88,74,0,0,2,10,1,0,3,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,248,64,0,0,2,13,1,4,3,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,16,56,0,0,2,9,1,0,3,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,216,176,0,0,2,10,2,0,5,0,80,0,5,0,0,0,3,0,0,0,10,0,0,0,64,168,0,0,2,8,1,4,4,0,0,0,5,0,0,0,4,0,0,0,2,0,0,0,184,163,0,0,3,8,2,0,3,0,0,0,7,0,0,0,2,0,0,0,16,0,0,0,104,159,0,0,3,3,0,8,3,0,220,5,15,0,0,0,40,0,0,0,2,0,0,0,0,155,0,0,3,3,0,14,9,0,0,0,20,0,0,0,40,0,0,0,2,0,0,0,48,152,0,0,3,5,3,0,3,0,0,0,14,0,0,0,10,0,0,0,2,0,0,0,184,148,0,0,3,5,0,1,3,0,0,0,18,0,0,0,20,0,0,0,2,0,0,0,200,145,0,0,3,12,3,0,3,0,0,0,9,0,0,0,7,0,0,0,66,0,0,0,104,142,0,0,4,4,3,0,3,0,0,0,23,0,0,0,13,0,0,0,2,0,0,0,8,139,0,0,4,5,4,15,5,0,40,0,24,0,0,0,33,0,0,0,130,0,0,0,200,135,0,0,4,5,2,2,6,0,0,0,20,0,0,0,33,0,0,0,2,0,0,0,80,133,0,0,4,11,3,10,6,0,50,0,19,0,0,0,23,0,0,0,10,0,0,0,64,131,0,0,4,6,4,0,10,0,40,0,25,0,0,0,43,0,0,0,2,0,0,0,144,129,0,0,5,9,5,0,9,0,80,0,55,0,0,0,250,0,0,0,2,0,0,0,248,127,0,0,5,8,4,0,5,0,50,0,45,0,0,0,90,0,0,0,2,0,0,0,176,126,0,0,5,4,5,5,16,0,244,1,65,0,0,0,232,3,0,0,2,0,0,0,80,125,0,0,5,3,3,0,15,0,50,0,25,0,0,0,33,0,0,0,130,0,0,0,144,123,0,0,5,9,3,0,3,0,0,0,24,0,0,0,43,0,0,0,0,0,0,0,56,122,0,0,6,9,3,0,3,0,0,0,32,0,0,0,40,0,0,0,8,0,0,0,184,120,0,0,6,5,4,0,3,0,0,0,33,0,0,0,53,0,0,0,0,0,0,0,64,119,0,0,6,15,3,0,3,0,0,0,34,0,0,0,33,0,0,0,2,0,0,0,248,117,0,0,6,12,3,0,3,0,0,0,39,0,0,0,90,0,0,0,0,0,0,0,160,116,0,0,6,3,1,6,3,0,0,0,36,0,0,0,44,1,0,0,82,0,0,0,224,114,0,0,6,3,5,0,7,0,0,0,55,0,0,0,14,1,0,0,130,0,0,0,176,113,0,0,7,14,7,0,6,0,0,0,36,0,0,0,70,0,0,0,2,0,0,0,144,112,0,0,7,4,7,16,4,0,0,0,36,0,0,0,90,0,0,0,2,0,0,0,120,111,0,0,7,15,5,0,3,0,100,0,53,0,0,0,230,0,0,0,130,0,0,0,112,110,0,0,7,6,7,0,13,0,0,0,63,0,0,0,34,1,0,0,128,0,0,0,88,109,0,0,7,5,4,6,17,0,0,0,55,0,0,0,182,3,0,0,82,0,0,0,48,108,0,0,7,5,6,0,5,0,0,0,55,0,0,0,74,1,0,0,10,0,0,0,24,107,0,0,8,1,8,0,3,0,0,0,55,0,0,0,174,1,0,0,32,0,0,0,200,105,0,0,8,3,1,9,3,0,0,0,57,0,0,0,244,1,0,0,2,0,0,0,104,104,0,0,8,13,5,0,6,0,0,0,47,0,0,0,134,1,0,0,0,0,0,0,8,103,0,0,8,12,4,0,3,0,0,0,37,0,0,0,240,0,0,0,0,0,0,0,208,101,0,0,8,6,7,11,14,0,0,0,67,0,0,0,88,2,0,0,130,0,0,0,200,100,0,0,9,255,10,0,18,0,208,7,120,0,0,0,184,11,0,0,130,0,0,0,192,99,0,0,9,9,7,0,8,0,0,0,57,0,0,0,100,0,0,0,0,0,0,0,176,98,0,0,9,246,15,7,20,0,0,0,155,0,0,0,152,58,0,0,6,0,0,0,248,97,0,0,9,5,9,3,16,0,44,1,90,0,0,0,160,15,0,0,18,0,0,0,24,97,0,0,9,4,4,10,15,0,200,0,80,0,0,0,196,9,0,0,18,0,0,0,104,96,0,0,9,255,13,0,3,0,100,0,130,0,0,0,152,58,0,0,2,0,0,0,240,94,0,0,9,254,14,0,13,0,0,0,100,0,0,0,232,3,0,0,10,0,0,0,56,94,0,0,10,236,15,12,23,0,0,0,100,0,0,0,32,78,0,0,182,0,0,0,8,93,0,0,10,252,10,3,20,0,188,2,110,0,0,0,16,39,0,0,18,0,0,0,104,92,0,0,10,249,15,13,22,0,232,3,150,0,0,0,168,97,0,0,18,0,0,0,184,91,0,0,10,251,12,0,3,0,0,0,95,0,0,0,136,19,0,0,0,0,0,0,248,90,0,0,10,252,13,3,19,0,32,3,120,0,0,0,176,54,0,0,18,0,0,0,24,90,0,0,12,216,20,3,20,0,0,0,150,0,0,0,80,195,0,0,150,0,0,0,24,89,0,0,13,211,25,5,22,0,0,0,200,0,0,0,248,36,1,0,150,0,0,0,120,87,0,0,14,206,30,9,24,0,0,0,250,0,0,0,160,134,1,0,150,0,0,0,168,86,0,0,15,201,35,11,26,0,0,0,44,1,0,0,72,232,1,0,150,0,0,0,104,85,0,0,16,196,40,13,28,0,0,0,94,1,0,0,240,73,2,0,150,0,0,0,184,84,0,0,17,191,45,13,30,0,0,0,144,1,0,0,152,171,2,0,150,0,0,0,184,83,0,0,18,186,50,6,32,0,0,0,194,1,0,0,64,13,3,0,150,0,0,0,24,83,0,0,19,166,80,6,40,0,0,0,232,3,0,0,32,161,7,0,150,0,0,0,160,82,0,0,20,136,100,6,100,0,0,0,255,127,0,0,64,66,15,0,150,0,0,0,46,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,240,0,0,0,241,0,0,0,242,0,0,0,243,0,0,0,244,0,0,0,245,0,0,0,246,0,0,0,247,0,0,0,248,0,0,0,249,0,0,0,250,0,0,0,251,0,0,0,252,0,0,0,253,0,0,0,254,0,0,0,255,0,0,0,0,0,0,0,6,0,0,0,0,1,0,0,16,1,0,0,32,1,0,0,48,1,0,0,64,1,0,0,80,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,1,0,0,17,1,0,0,33,1,0,0,49,1,0,0,65,1,0,0,81,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,2,1,0,0,18,1,0,0,34,1,0,0,50,1,0,0,66,1,0,0,82,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,3,1,0,0,19,1,0,0,35,1,0,0,51,1,0,0,67,1,0,0,83,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,4,1,0,0,20,1,0,0,36,1,0,0,52,1,0,0,68,1,0,0,84,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,5,1,0,0,21,1,0,0,37,1,0,0,53,1,0,0,69,1,0,0,85,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,1,0,0,22,1,0,0,38,1,0,0,54,1,0,0,70,1,0,0,86,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,7,1,0,0,23,1,0,0,39,1,0,0,55,1,0,0,71,1,0,0,87,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,8,1,0,0,24,1,0,0,40,1,0,0,56,1,0,0,72,1,0,0,88,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,9,1,0,0,25,1,0,0,41,1,0,0,57,1,0,0,73,1,0,0,89,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,10,1,0,0,26,1,0,0,42,1,0,0,58,1,0,0,74,1,0,0,90,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,11,1,0,0,27,1,0,0,43,1,0,0,59,1,0,0,75,1,0,0,91,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,1,0,0,28,1,0,0,44,1,0,0,60,1,0,0,76,1,0,0,92,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,13,1,0,0,29,1,0,0,45,1,0,0,61,1,0,0,77,1,0,0,93,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,105,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,130,0,0,112,164,0,0,120,131,0,0,192,116,0,0,144,104,0,0,104,94,0,0,8,85,0,0,160,76,0,0,48,67,0,0,216,57,0,0,88,178,0,0,144,170,0,0,208,164,0,0,160,160,0,0,240,155,0,0,64,153,0,0,48,149,0,0,128,146,0,0,144,143,0,0,192,139,0,0,112,136,0,0,0,0,0,0,24,246,1,0,192,105,0,0,96,104,0,0,248,102,0,0,192,101,0,0,184,100,0,0,24,100,0,0,8,99,0,0,104,98,0,0,128,97,0,0,200,96,0,0,8,96,0,0,176,94,0,0,200,93,0,0,176,92,0,0,48,92,0,0,80,91,0,0,152,90,0,0,184,89,0,0,88,88,0,0,8,87,0,0,104,86,0,0,40,85,0,0,88,84,0,0,88,83,0,0,240,82,0,0,72,82,0,0,120,81,0,0,240,80,0,0,0,80,0,0,48,79,0,0,40,78,0,0,192,76,0,0,224,75,0,0,200,74,0,0,16,74,0,0,40,73,0,0,56,72,0,0,96,71,0,0,112,70,0,0,152,69,0,0,192,68,0,0,136,67,0,0,152,66,0,0,144,65,0,0,200,64,0,0,184,63,0,0,232,62,0,0,48,62,0,0,24,61,0,0,32,60,0,0,128,59,0,0,80,58,0,0,88,57,0,0,120,56,0,0,8,56,0,0,48,55,0,0,112,54,0,0,216,53,0,0,32,53,0,0,32,180,0,0,144,179,0,0,176,178,0,0,0,178,0,0,88,177,0,0,200,176,0,0,32,176,0,0,64,175,0,0,200,174,0,0,32,174,0,0,32,173,0,0,88,172,0,0,16,171,0,0,224,169,0,0,208,168,0,0,48,168,0,0,160,167,0,0,64,167,0,0,240,166,0,0,160,166,0,0,184,165,0,0,168,165,0,0,0,165,0,0,184,164,0,0,0,164,0,0,168,163,0,0,80,163,0,0,184,162,0,0,32,162,0,0,200,161,0,0,112,161,0,0,64,161,0,0,192,160,0,0,32,160,0,0,152,159,0,0,96,159,0,0,0,159,0,0,168,158,0,0,112,158,0,0,24,246,1,0,2,0,0,0,0,0,0,0,26,0,3,0,10,0,0,0,0,0,0,0,28,0,2,0,40,0,0,0,0,0,0,0,27,0,2,0,85,0,0,0,0,0,0,0,25,0,2,0,220,0,0,0,0,0,0,0,29,0,1,0,144,1,0,0,0,0,0,0,24,0,1,0,132,3,0,0,0,0,0,0,30,0,1,0,40,10,0,0,0,0,0,0,31,0,1,0,150,0,0,0,0,0,0,0,32,0,1,0,136,19,0,0,0,0,0,0,33,0,0,0,232,3,0,0,0,0,0,0,59,0,0,0,16,39,0,0,0,0,0,0,45,0,0,0,2,0,0,0,0,0,0,0,39,0,3,0,20,0,0,0,0,0,0,0,38,0,3,0,80,0,0,0,0,0,0,0,42,0,2,0,150,0,0,0,0,0,0,0,40,0,2,0,194,1,0,0,0,0,0,0,41,0,2,0,232,3,0,0,0,0,0,0,37,0,2,0,136,19,0,0,0,0,0,0,36,0,1,0,32,78,0,0,0,0,0,0,43,0,1,0,208,7,0,0,0,0,0,0,34,0,0,0,76,29,0,0,0,0,0,0,35,0,0,0,150,0,0,0,0,0,0,0,48,1,1,0,85,0,0,0,0,0,0,0,51,1,1,0,120,0,0,0,0,0,0,0,50,1,1,0,120,0,0,0,0,0,0,0,52,1,1,0,180,0,0,0,0,0,0,0,49,0,1,0,125,0,0,0,0,0,0,0,53,0,1,0,220,0,0,0,0,0,0,0,47,0,1,0,232,3,0,0,0,0,0,0,46,0,1,0,24,1,0,0,0,0,0,0,54,0,1,0,144,1,0,0,0,0,0,0,60,5,1,0,244,1,0,0,0,0,0,0].concat([63,0,0,0,88,2,0,0,0,0,0,0,64,0,0,0,78,2,0,0,0,0,0,0,58,3,1,0,200,0,0,0,0,0,0,0,57,2,1,0,10,0,0,0,0,0,0,0,94,0,3,0,154,2,0,0,0,0,0,0,66,0,0,0,20,0,0,0,208,231,0,0,56,0,6,0,90,0,0,0,208,231,0,0,56,1,5,0,8,2,0,0,208,231,0,0,56,2,1,0,100,0,0,0,208,231,0,0,56,3,2,0,50,0,0,0,208,231,0,0,56,4,2,0,150,0,0,0,208,231,0,0,56,5,2,0,70,0,0,0,208,231,0,0,56,6,1,0,30,0,0,0,208,231,0,0,56,7,7,0,200,0,0,0,208,231,0,0,56,8,1,0,50,0,0,0,208,231,0,0,56,9,1,0,80,0,0,0,208,231,0,0,56,10,1,0,30,0,0,0,208,231,0,0,56,11,3,0,20,0,0,0,208,231,0,0,56,12,5,0,40,0,0,0,208,231,0,0,56,13,3,0,35,0,0,0,208,231,0,0,56,14,2,0,8,2,0,0,208,231,0,0,56,15,1,0,90,0,0,0,208,231,0,0,56,16,2,0,200,0,0,0,208,231,0,0,56,17,2,0,220,0,0,0,208,231,0,0,56,18,4,0,80,0,0,0,208,231,0,0,56,19,6,0,114,1,0,0,208,231,0,0,56,20,3,0,50,0,0,0,208,231,0,0,56,22,1,0,150,0,0,0,208,231,0,0,56,23,3,0,82,3,0,0,0,0,0,0,61,0,0,0,238,2,0,0,0,0,0,0,62,0,0,0,64,31,0,0,0,0,0,0,44,0,0,0,100,0,0,0,160,199,0,0,55,0,2,0,125,0,0,0,160,199,0,0,55,1,2,0,60,0,0,0,160,199,0,0,55,2,4,0,10,0,0,0,160,199,0,0,55,3,4,0,100,0,0,0,160,199,0,0,55,4,3,0,200,0,0,0,160,199,0,0,55,5,2,0,110,0,0,0,160,199,0,0,55,6,1,0,244,1,0,0,160,199,0,0,55,7,2,0,200,0,0,0,160,199,0,0,55,8,2,0,250,0,0,0,160,199,0,0,55,9,4,0,20,0,0,0,160,199,0,0,55,10,5,0,30,0,0,0,160,199,0,0,55,11,3,0,84,1,0,0,160,199,0,0,55,12,1,0,84,1,0,0,160,199,0,0,55,13,1,0,44,1,0,0,160,199,0,0,55,14,2,0,144,1,0,0,160,199,0,0,55,15,2,0,244,1,0,0,160,199,0,0,55,16,2,0,232,3,0,0,160,199,0,0,55,17,1,0,244,1,0,0,160,199,0,0,55,18,1,0,84,1,0,0,160,199,0,0,55,19,2,0,220,0,0,0,160,199,0,0,55,20,3,0,60,15,0,0,160,199,0,0,55,21,0,0,98,2,0,0,160,199,0,0,55,22,1,0,184,11,0,0,160,199,0,0,55,23,0,0,44,1,0,0,0,0,0,0,67,0,0,0,150,0,0,0,0,0,0,0,68,0,0,0,50,0,0,0,0,0,0,0,65,0,0,0,28,37,0,0,0,0,0,0,69,0,0,0,16,39,0,0,0,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,255,0,255,255,1,1,0,0,0,0,0,0,0,0,0,1,0,255,1,255,1,255,0,0,0,0,0,0,0,100,105,97,103,102,105,108,101,46,116,120,116,0,0,0,0,10,15,10,20,10,10,10,5,10,85,108,97,114,110,32,99,114,101,97,116,101,100,32,98,121,32,80,104,105,108,32,67,111,114,100,105,101,114,32,45,45,32,98,97,115,101,100,32,111,110,32,76,97,114,110,32,98,121,32,78,111,97,104,32,77,111,114,103,97,110,10,32,32,85,112,100,97,116,101,100,32,98,121,32,74,111,115,104,32,66,114,97,110,100,116,32,97,110,100,32,68,97,118,105,100,32,82,105,99,104,101,114,98,121,10,32,32,82,101,119,114,105,116,101,32,97,110,100,32,87,105,110,100,111,119,115,51,50,47,88,49,49,47,65,109,105,103,97,32,103,114,97,112,104,105,99,115,32,99,111,110,118,101,114,115,105,111,110,32,98,121,32,74,117,108,105,97,110,32,79,108,100,115,0,208,81,0,0,48,148,0,0,32,125,0,0,16,111,0,0,112,99,0,0,200,90,0,0,184,81,0,0,104,72,0,0,248,62,0,0,120,54,0,0,80,175,0,0,80,167,0,0,200,162,0,0,176,158,0,0,168,154,0,0,192,150,0,0,24,148,0,0,64,145,0,0,200,141,0,0,128,138,0,0,104,135,0,0,16,133,0,0,16,131,0,0,56,129,0,0,72,52,0,0,72,52,0,0,72,52,0,0,72,52,0,0,72,52,0,0,72,52,0,0,72,52,0,0,72,52,0,0,72,52,0,0,72,52,0,0,72,52,0,0,72,52,0,0,72,52,0,0,72,52,0,0,72,52,0,0,48,52,0,0,48,52,0,0,48,52,0,0,48,52,0,0,48,52,0,0,48,52,0,0,48,52,0,0,48,52,0,0,48,52,0,0,24,52,0,0,24,52,0,0,24,52,0,0,24,52,0,0,24,52,0,0,24,52,0,0,24,52,0,0,24,52,0,0,24,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,232,51,0,0,232,51,0,0,232,51,0,0,232,51,0,0,232,51,0,0,232,51,0,0,232,51,0,0,232,51,0,0,232,51,0,0,208,51,0,0,208,51,0,0,208,51,0,0,208,51,0,0,208,51,0,0,208,51,0,0,208,51,0,0,208,51,0,0,208,51,0,0,184,51,0,0,184,51,0,0,184,51,0,0,160,51,0,0,160,51,0,0,160,51,0,0,160,51,0,0,160,51,0,0,160,51,0,0,184,127,0,0,144,126,0,0,8,125,0,0,104,123,0,0,24,122,0,0,112,120,0,0,136,51,0,0,136,51,0,0,136,51,0,0,1,0,0,0,0,0,0,0,117,108,97,114,110,46,99,107,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,157,0,0,24,157,0,0,184,156,0,0,16,156,0,0,168,155,0,0,56,155,0,0,240,154,0,0,208,154,0,0,160,154,0,0,128,154,0,0,88,154,0,0,8,154,0,0,240,153,0,0,112,153,0,0,232,152,0,0,72,152,0,0,40,152,0,0,240,150,0,0,176,150,0,0,104,150,0,0,64,150,0,0,224,149,0,0,168,149,0,0,72,149,0,0,24,149,0,0,216,148,0,0,168,148,0,0,88,148,0,0,8,148,0,0,192,147,0,0,152,147,0,0,88,147,0,0,64,147,0,0,184,146,0,0,80,146,0,0,240,145,0,0,184,145,0,0,120,145,0,0,48,145,0,0,16,145,0,0,200,144,0,0,112,144,0,0,64,144,0,0,168,143,0,0,80,143,0,0,160,142,0,0,88,142,0,0,8,142,0,0,184,141,0,0,128,141,0,0,240,140,0,0,152,140,0,0,104,140,0,0,232,139,0,0,24,246,1,0,24,246,1,0,24,246,1,0,24,246,1,0,24,246,1,0,152,139,0,0,32,139,0,0,248,138,0,0,184,138,0,0,120,138,0,0,88,138,0,0,24,138,0,0,88,137,0,0,32,137,0,0,152,136,0,0,56,136,0,0,248,135,0,0,184,135,0,0,128,135,0,0,24,246,1,0,96,135,0,0,88,135,0,0,48,135,0,0,224,134,0,0,176,134,0,0,80,134,0,0,144,133,0,0,120,133,0,0,72,133,0,0,40,133,0,0,0,133,0,0,248,132,0,0,216,132,0,0,176,132,0,0,224,131,0,0,216,131,0,0,128,131,0,0,96,131,0,0,56,131,0,0,40,131,0,0,8,131,0,0,240,130,0,0,224,130,0,0,176,130,0,0,24,246,1,0,24,246,1,0,64,0,0,0,216,122,0,0,62,0,0,0,16,121,0,0,61,0,0,0,144,119,0,0,33,0,0,0,128,118,0,0,46,0,0,0,16,117,0,0,45,0,0,0,96,115,0,0,49,0,0,0,232,113,0,0,50,0,0,0,184,112,0,0,26,0,0,0,168,111,0,0,27,0,0,0,144,110,0,0,43,0,0,0,160,109,0,0,36,0,0,0,128,108,0,0,35,0,0,0,80,107,0,0,34,0,0,0,120,106,0,0,31,0,0,0,0,105,0,0,21,0,0,0,136,103,0,0,74,0,0,0,48,102,0,0,32,32,32,32,84,104,101,32,67,114,101,97,116,111,114,32,32,32,32,0,0,0,0,0,97,112,112,114,101,110,116,105,99,101,32,103,117,97,114,100,105,97,110,0,0,0,0,0,32,32,110,111,118,105,99,101,32,103,117,97,114,100,105,97,110,32,32,0,0,0,0,0,32,32,32,32,109,97,106,111,114,32,100,101,105,116,121,32,32,32,32,0,0,0,0,0,32,32,32,32,109,105,110,111,114,32,100,101,105,116,121,32,32,32,32,0,0,0,0,0,32,32,109,97,106,111,114,32,100,101,109,105,45,103,111,100,32,32,32,0,0,0,0,0,32,32,109,105,110,111,114,32,100,101,109,105,45,103,111,100,32,32,32,0,0,0,0,0,97,112,112,114,101,110,116,105,99,101,32,100,101,109,105,45,103,111,100,0,0,0,0,0,32,109,105,103,104,116,121,32,101,118,105,108,32,109,97,115,116,101,114,0,0,0,0,0,32,43,37,100,0,0,0,0,32,101,120,112,97,110,100,101,100,32,97,119,97,114,101,110,101,115,115,0,0,0,0,0,84,104,101,32,37,115,32,99,111,117,108,100,110,39,116,32,102,105,110,100,32,97,110,121,32,103,111,108,100,32,116,111,32,115,116,101,97,108,46,0,75,105,108,108,101,114,32,83,112,101,101,100,0,0,0,0,67,97,117,115,101,115,32,116,104,101,32,99,97,115,116,101,114,39,115,32,102,105,110,103,101,114,32,116,111,32,101,109,105,116,32,108,105,103,104,116,110,105,110,103,32,98,111,108,116,115,0,0,0,0,0,0,32,107,105,108,108,101,100,32,104,101,114,32,102,97,109,105,108,121,32,97,110,100,32,99,111,109,109,105,116,116,101,100,32,115,117,105,99,105,100,101,0,0,0,0,0,0,0,0,79,83,80,73,82,73,84,83,67,65,82,65,66,0,0,0,84,104,101,32,37,115,32,104,105,116,32,121,111,117,46,32,32,89,111,117,114,32,112,117,114,115,101,32,102,101,101,108,115,32,108,105,103,104,116,101,114,46,0,0,0,0,0,0,32,103,111,108,100,32,100,101,116,101,99,116,105,111,110,0,121,111,117,39,108,108,32,102,105,110,100,32,97,110,121,119,104,101,114,101,32,105,110,32,85,108,97,114,110,32,45,45,32,99,104,101,99,107,32,105,116,32,111,117,116,46,46,46,32,0,0,0,0,0,0,0,68,114,105,101,115,32,117,112,32,119,97,116,101,114,32,105,110,32,116,104,101,32,105,109,109,101,100,105,97,116,101,32,118,105,99,105,110,105,116,121,0,0,0,0,0,0,0,0,79,79,82,66,79,70,68,82,65,71,79,78,0,0,0,0,84,104,101,32,37,115,32,103,111,116,32,121,111,117,32,119,105,116,104,32,97,32,103,117,115,104,101,114,33,0,0,0,72,101,121,32,109,97,110,44,32,119,101,108,99,111,109,101,32,116,111,32,68,101,97,108,101,114,32,77,99,68,111,112,101,39,115,32,80,97,100,33,32,32,73,32,103,111,116,115,32,116,104,101,32,115,111,109,101,32,111,102,32,116,104,101,32,102,105,110,101,115,116,32,100,111,112,101,32,0,0,0,67,104,97,110,103,101,115,32,114,111,99,107,32,116,111,32,97,105,114,0,0,0,0,0,79,65,77,85,76,69,84,0,32,32,97,112,112,114,101,110,116,105,99,101,32,109,97,103,101,32,32,0,0,0,0,0,84,104,101,32,37,115,32,100,114,97,105,110,115,32,121,111,117,32,111,102,32,121,111,117,114,32,108,105,102,101,32,101,110,101,114,103,121,33,0,0,83,111,114,114,121,32,109,97,110,44,32,73,32,97,105,110,39,116,32,103,111,116,32,110,111,32,109,111,114,101,32,111,102,32,116,104,97,116,32,115,116,117,102,102,46,0,0,0,67,114,101,97,116,101,115,32,97,32,102,111,103,32,111,102,32,112,111,105,115,111,110,111,117,115,32,103,97,115,32,119,104,105,99,104,32,107,105,108,108,115,32,97,108,108,32,116,104,97,116,32,105,115,32,119,105,116,104,105,110,32,105,116,0,0,0,0,0,0,0,0,79,67,72,69,83,84,0,0,89,111,117,32,115,117,100,100,101,110,108,121,32,102,101,101,108,32,115,105,99,107,32,97,110,100,32,66,65,82,70,32,97,108,108,32,111,118,101,114,32,121,111,117,114,32,115,104,111,101,115,33,0,0,0,0,84,104,101,32,37,115,32,98,108,97,115,116,115,32,121,111,117,32,119,105,116,104,32,104,105,115,32,99,111,108,100,32,98,114,101,97,116,104,46,0,32,101,110,99,104,97,110,116,32,97,114,109,111,114,0,0,87,104,97,116,116,97,121,97,32,116,114,121,105,110,103,32,116,111,32,112,117,108,108,32,111,110,32,109,101,63,32,89,111,117,32,97,105,110,116,32,103,111,116,32,116,104,101,32,99,97,115,104,33,0,0,0,83,112,101,101,100,115,32,117,112,32,116,104,101,32,99,97,115,116,101,114,39,115,32,109,111,118,101,109,101,110,116,115,0,0,0,0,0,0,0,0,79,66,79,79,75,0,0,0,106,97,99,117,108,105,0,0,84,104,101,32,37,115,32,115,116,117,110,103,32,121,111,117,33,0,0,0,0,0,0,0,79,107,44,32,104,101,114,101,32,121,97,32,103,111,46,0,83,116,111,112,115,32,97,32,109,111,110,115,116,101,114,32,102,114,111,109,32,117,115,105,110,103,32,105,116,115,32,115,112,101,99,105,97,108,32,97,98,105,108,105,116,105,101,115,0,0,0,0,0,0,0,0,79,80,79,84,73,79,78,0,97,32,116,101,108,101,112,111,114,116,32,116,114,97,112,0,84,104,101,32,37,115,32,115,116,117,110,103,32,121,111,117,33,32,32,89,111,117,32,102,101,101,108,32,119,101,97,107,101,114,46,0,0,0,0,0,97,110,32,97,116,116,97,99,107,105,110,103,32,97,114,109,121,32,105,110,32,97,32,102,111,114,101,115,116,32,115,111,109,101,32,100,105,115,116,97,110,99,101,32,116,111,32,116,104,101,32,110,111,114,116,104,46,32,32,73,116,32,105,115,32,98,101,108,105,101,118,101,100,32,116,104,97,116,32,0,72,101,121,44,32,121,111,117,32,99,97,110,39,116,32,99,97,114,114,121,32,97,110,121,32,109,111,114,101,46,0,0,89,111,117,32,99,97,110,32,102,105,110,100,32,111,117,116,32,119,104,97,116,32,116,104,105,115,32,100,111,101,115,32,102,111,114,32,121,111,117,114,115,101,108,102,0,0,0,0,79,83,67,82,79,76,76,0,84,104,101,32,97,108,116,97,114,32,99,114,117,109,98,108,101,115,32,105,110,116,111,32,97,32,112,105,108,101,32,111,102,32,100,117,115,116,32,98,101,102,111,114,101,32,121,111,117,114,32,101,121,101,115,46,0,0,0,0,0,0,0,0,105,118,101,110,91,37,100,93,32,37,45,49,50,115,32,61,32,37,100,0,0,0,0,0,84,104,101,32,37,115,32,98,114,101,97,116,104,101,115,32,102,105,114,101,32,97,116,32,121,111,117,33,0,0,0,0,32,57,0,0,0,0,0,0,100,101,112,116,104,115,32,111,102,32,116,104,101,32,99,97,118,101,115,32,99,97,110,32,116,104,105,115,32,112,111,116,105,111,110,32,98,101,32,102,111,117,110,100,46,32,0,0,83,101,110,100,115,32,102,111,114,116,104,32,97,32,99,111,110,101,32,111,102,32,99,111,108,100,32,119,104,105,99,104,32,102,114,101,101,122,101,115,32,119,104,97,116,101,118,101,114,32,105,116,32,116,111,117,99,104,101,115,0,0,0,0,79,66,69,76,84,0,0,0,123,34,120,34,58,37,100,44,34,121,34,58,37,100,44,34,116,105,108,101,73,100,115,34,58,91,37,100,44,37,100,44,37,100,93,125,0,0,0,0,84,104,101,32,37,115,39,115,32,102,108,97,109,101,32,100,111,101,115,110,39,116,32,102,97,122,101,32,121,111,117,33,0,0,0,0,0,0,0,0,89,111,117,32,100,111,110,39,116,32,107,110,111,119,32,97,110,121,32,115,112,101,108,108,115,46,0,0,0,0,0,0,115,111,109,101,32,99,111,99,97,105,110,101,0,0,0,0,70,105,103,104,116,101,114,39,115,32,84,114,97,105,110,105,110,103,32,73,0,0,0,0,112,111,116,105,111,110,32,111,102,32,99,117,114,101,32,100,105,97,110,116,104,114,111,114,105,116,105,115,46,32,32,73,116,32,105,115,32,114,117,109,111,114,101,100,32,116,104,97,116,32,111,110,108,121,32,100,101,101,112,32,105,110,32,116,104,101,32,0,0,0,0,0,67,114,101,97,116,101,115,32,97,32,98,97,108,108,32,111,102,32,102,105,114,101,32,116,104,97,116,32,98,117,114,110,115,32,119,104,97,116,101,118,101,114,32,105,116,32,104,105,116,115,0,0,0,0,0,0,104,101,108,0,0,0,0,0,110,111,110,101,0,0,0,0,79,68,65,77,82,73,78,71,0,0,0,0,0,0,0,0,37,115,32,104,105,116,115,32,116,104,101,32,37,115,46,0,115,111,109,101,32,109,97,103,105,99,32,109,117,115,104,114,111,111,109,115,0,0,0,0,73,116,39,115,32,117,112,32,116,111,32,121,111,117,32,116,111,32,102,105,110,100,32,116,104,101,32,111,110,108,121,32,104,111,112,101,32,102,111,114,32,121,111,117,114,32,100,97,117,103,104,116,101,114,44,32,116,104,101,32,118,101,114,121,32,114,97,114,101,32,0,0,84,104,101,32,99,97,115,116,101,114,32,98,101,99,111,109,101,115,32,105,110,118,105,115,105,98,108,101,0,0,0,0,79,67,76,69,86,69,82,82,73,78,71,0,0,0,0,0,89,111,117,32,99,97,110,39,116,32,119,101,97,114,32,116,104,97,116,33,0,0,0,0,32,116,101,108,101,112,111,114,116,97,116,105,111,110,0,0,37,115,32,104,105,116,115,32,97,110,100,32,107,105,108,108,115,32,116,104,101,32,37,115,46,0,0,0,0,0,0,0,115,111,109,101,32,104,97,115,104,105,115,104,0,0,0,0,121,111,117,114,32,100,97,117,103,104,116,101,114,32,104,97,115,32,111,110,108,121,32,37,100,32,109,111,98,117,108,115,32,108,101,102,116,32,105,110,32,116,104,105,115,32,119,111,114,108,100,46,0,0,0,0,67,114,101,97,116,101,115,32,105,108,108,117,115,105,111,110,115,32,119,104,105,99,104,44,32,105,102,32,98,101,108,105,101,118,101,100,44,32,99,97,117,115,101,32,109,111,110,115,116,101,114,115,32,116,111,32,100,105,101,0,0,0,0,0,32,107,105,108,108,101,100,32,98,121,32,37,115,32,37,115,0,0,0,0,0,0,0,0,79,83,84,82,82,73,78,71,0,0,0,0,0,0,0,0,32,37,100,0,0,0,0,0,84,104,101,32,37,115,37,115,32,105,115,32,99,97,114,114,105,101,100,32,97,119,97,121,32,98,121,32,97,110,32,101,108,101,118,97,116,111,114,33,0,0,0,0,0,0,0,0,115,111,109,101,32,76,83,68,0,0,0,0,0,0,0,0,32,108,101,97,114,110,105,110,103,0,0,0,0,0,0,0,73,32,97,109,32,115,111,32,115,111,114,114,121,32,98,117,116,32,121,111,117,114,32,99,104,97,114,97,99,116,101,114,32,105,115,32,97,32,108,105,116,116,108,101,32,84,79,79,32,103,111,111,100,33,32,32,83,105,110,99,101,32,116,104,105,115,0,0,0,0,0,0,84,104,101,32,100,105,97,103,110,111,115,105,115,32,105,115,32,99,111,110,102,105,114,109,101,100,32,97,115,32,100,105,97,110,116,104,114,111,114,105,116,105,115,46,32,32,72,101,32,103,117,101,115,115,101,115,32,116,104,97,116,32,0,0,67,114,101,97,116,101,115,32,97,32,109,111,110,115,116,101,114,32,110,101,97,114,32,116,111,32,116,104,101,32,99,97,115,116,101,114,0,0,0,0,79,68,69,88,82,73,78,71,0,0,0,0,0,0,0,0,32,43,32,37,100,0,0,0,84,104,101,32,37,115,37,115,32,102,101,108,108,32,116,104,114,111,117,103,104,32,97,32,116,114,97,112,100,111,111,114,46,0,0,0,0,0,0,0,115,111,109,101,32,115,112,101,101,100,0,0,0,0,0,0,73,110,32,121,111,117,114,32,97,103,111,110,121,44,32,121,111,117,32,107,105,108,108,32,116,104,101,32,100,111,99,116,111,114,44,32,121,111,117,114,32,0,0,0,0,0,0,0,82,101,115,116,111,114,101,115,32,115,105,103,104,116,32,116,111,32,111,110,101,32,115,111,32,117,110,102,111,114,116,117,110,97,116,101,32,97,115,32,116,111,32,98,101,32,98,108,105,110,100,101,100,0,0,0,79,69,78,69,82,71,89,82,73,78,71,0,0,0,0,0,32,32,109,97,115,116,101,114,32,99,111,110,106,117,114,101,114,32,32,0,0,0,0,0,84,104,101,32,103,101,110,105,101,32,112,114,101,102,101,114,115,32,110,111,116,32,116,111,32,98,101,32,100,105,115,116,117,114,98,101,100,32,97,103,97,105,110,46,0,0,0,0,84,104,101,32,37,115,37,115,32,102,101,108,108,32,105,110,116,111,32,97,32,112,105,116,46,0,0,0,0,0,0,0,97,32,103,111,108,100,101,110,32,117,114,110,0,0,0,0,89,111,117,32,100,105,100,110,39,116,32,109,97,107,101,32,105,116,32,105,110,32,116,105,109,101,46,0,0,0,0,0,82,101,115,116,111,114,101,115,32,115,111,109,101,32,111,102,32,116,104,101,32,99,97,115,116,101,114,39,115,32,104,101,97,108,116,104,0,0,0,0,79,80,82,79,84,82,73,78,71,0,0,0,0,0,0,0,89,111,117,32,98,101,103,105,110,32,116,111,32,108,111,115,101,32,104,97,110,100,45,101,121,101,32,99,111,45,111,114,100,105,110,97,116,105,111,110,33,0,0,0,0,0,0,0,83,112,101,108,108,58,32,32,37,115,32,45,45,32,37,115,60,98,114,47,62,0,0,0,84,104,101,32,37,115,37,115,32,103,101,116,115,32,116,101,108,101,112,111,114,116,101,100,46,0,0,0,0,0,0,0,97,32,102,111,114,116,117,110,101,32,99,111,111,107,105,101,0,0,0,0,0,0,0,0,84,104,101,32,100,111,99,116,111,114,32,104,97,115,32,116,104,101,32,115,97,100,32,100,117,116,121,32,116,111,32,105,110,102,111,114,109,32,121,111,117,32,116,104,97,116,32,121,111,117,114,32,100,97,117,103,104,116,101,114,32,104,97,115,32,100,105,101,100,33,0,0,84,104,101,32,99,97,115,116,101,114,32,98,101,99,111,109,101,115,32,109,111,114,101,32,97,119,97,114,101,32,111,102,32,116,104,105,110,103,115,32,97,114,111,117,110,100,32,116,104,101,109,0,0,0,0,0,79,82,69,71,69,78,82,73,78,71,0,0,0,0,0,0,89,111,117,114,32,110,111,115,101,32,98,101,103,105,110,115,32,116,111,32,98,108,101,101,100,33,0,0,0,0,0,0,103,105,97,110,116,32,99,101,110,116,105,112,101,100,101,0,65,32,100,97,114,116,0,0,97,32,115,112,104,101,114,101,32,111,102,32,97,110,110,105,104,105,108,97,116,105,111,110,0,0,0,0,0,0,0,0,76,97,116,101,115,116,32,119,111,114,100,32,102,114,111,109,32,116,104,101,32,100,111,99,116,111,114,32,105,115,32,110,111,116,32,103,111,111,100,46,0,0,0,0,0,0,0,0,65,100,100,115,32,43,50,32,116,111,32,116,104,101,32,99,97,115,116,101,114,39,115,32,115,116,114,101,110,103,116,104,32,102,111,114,32,97,32,116,105,109,101,0,0,0,0,0,79,82,73,78,71,79,70,69,88,84,82,65,0,0,0,0,87,79,87,33,32,89,111,117,32,102,101,101,108,32,115,116,111,111,111,111,111,111,110,101,100,46,46,46,0,0,0,0,97,32,103,114,101,97,116,32,109,97,114,98,108,101,32,115,116,97,116,117,101,0,0,0,65,110,32,97,114,114,111,119,0,0,0,0,0,0,0,0,97,32,116,114,97,112,100,111,111,114,0,0,0,0,0,0,99,114,101,97,116,105,111,110,32,111,102,32,109,97,103,105,99,46,32,32,32,82,117,109,111,114,115,32,104,97,118,101,32,105,116,32,116,104,97,116,32,111,110,101,32,100,97,121,32,80,111,108,105,110,110,101,97,117,115,32,115,101,116,32,111,117,116,32,116,111,32,100,105,115,112,101,108,32,0,0,87,101,108,99,111,109,101,32,104,111,109,101,46,0,0,0,67,97,117,115,101,115,32,115,116,114,97,110,100,115,32,111,102,32,115,116,105,99,107,121,32,116,104,114,101,97,100,32,116,111,32,101,110,116,97,110,103,108,101,32,97,110,32,101,110,101,109,121,0,0,0,0,32,115,108,101,101,112,0,0,79,76,65,78,67,69,0,0,111,97,108,116,97,114,95,109,0,0,0,0,0,0,0,0,73,110,118,101,110,116,111,114,121,10,0,0,0,0,0,0,89,111,117,32,97,114,101,32,110,111,119,32,102,114,121,105,110,103,32,121,111,117,114,32,97,115,115,32,111,102,102,33,0,0,0,0,0,0,0,0,84,104,101,32,37,115,37,115,32,105,115,32,100,101,115,116,114,111,121,101,100,32,98,121,32,116,104,101,32,115,112,104,101,114,101,32,111,102,32,97,110,110,105,104,105,108,97,116,105,111,110,33,0,0,0,0,97,32,100,97,114,116,32,116,114,97,112,0,0,0,0,0,32,56,0,0,0,0,0,0,67,111,110,103,114,97,116,117,108,97,116,105,111,110,115,33,0,0,0,0,0,0,0,0,67,97,117,115,101,115,32,116,104,101,32,99,97,115,116,101,114,39,115,32,104,97,110,100,115,32,116,111,32,101,109,105,116,32,97,32,115,99,114,101,101,99,104,105,110,103,32,115,111,117,110,100,0,0,0,0,79,70,76,65,73,76,0,0,84,104,105,110,103,115,32,115,116,97,114,116,32,116,111,32,103,101,116,32,114,101,97,108,32,115,112,97,99,101,121,46,46,46,0,0,0,0,0,0,123,34,120,34,58,37,100,44,34,121,34,58,37,100,44,34,116,105,108,101,73,100,115,34,58,91,37,100,93,125,0,0,84,104,101,32,37,115,37,115,32,100,105,115,112,101,108,115,32,116,104,101,32,115,112,104,101,114,101,33,0,0,0,0,99,97,115,116,0,0,0,0,97,110,32,97,114,114,111,119,32,116,114,97,112,0,0,0,98,117,121,95,115,111,109,101,116,104,105,110,103,0,0,0,121,111,117,114,32,100,97,117,103,104,116,101,114,32,119,105,108,108,32,114,101,99,111,118,101,114,32,105,110,32,97,32,102,101,119,32,100,97,121,115,46,0,0,0,0,0,0,0,83,111,109,101,32,109,111,110,115,116,101,114,115,32,109,97,121,32,98,101,32,97,119,101,100,32,97,116,32,121,111,117,114,32,109,97,103,110,105,102,105,99,101,110,99,101,0,0,101,110,108,0,0,0,0,0,84,104,101,32,109,97,103,105,99,32,115,112,101,108,108,115,32,121,111,117,32,104,97,118,101,32,100,105,115,99,111,118,101,114,101,100,32,116,111,32,100,97,116,101,32,97,114,101,58,0,0,0,0,0,0,0,79,76,79,78,71,83,87,79,82,68,0,0,0,0,0,0,66,97,100,32,97,116,32,101,118,101,114,121,116,104,105,110,103,44,32,98,117,116,32,104,97,115,32,97,32,108,97,110,99,101,32,111,102,32,100,101,97,116,104,0,0,0,0,0,79,104,119,111,119,109,97,110,108,105,107,101,116,104,105,110,103,115,116,111,116,97,108,108,121,115,101,101,109,116,111,115,108,111,119,100,111,119,110,33,0,0,0,0,0,0,0,0,68,101,97,108,101,114,32,77,99,68,111,112,101,39,115,32,80,97,100,0,0,0,0,0,32,119,111,114,107,105,110,103,33,32,32,84,104,101,32,100,111,99,116,111,114,32,116,104,105,110,107,115,32,116,104,97,116,32,0,0,0,0,0,0,67,97,117,115,101,115,32,115,111,109,101,32,109,111,110,115,116,101,114,115,32,116,111,32,103,111,32,116,111,32,115,108,101,101,112,0,0,0,0,0,79,66,65,84,84,76,69,65,88,69,0,0,0,0,0,0,89,111,117,32,112,117,116,32,111,110,32,121,111,117,114,32,115,104,105,101,108,100,0,0,82,97,109,98,111,0,0,0,89,111,117,32,115,108,105,112,32,97,110,100,32,102,97,108,108,32,100,111,119,110,32,116,104,101,32,115,104,97,102,116,46,0,0,0,0,0,0,0,32,116,105,109,101,32,119,97,114,112,0,0,0,0,0,0,32,32,84,104,101,32,37,115,32,109,105,115,115,101,100,46,0,0,0,0,0,0,0,0,116,104,101,32,76,97,114,110,32,82,101,118,101,110,117,101,32,83,101,114,118,105,99,101,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,65,100,100,115,32,43,50,32,116,111,32,116,104,101,32,99,97,115,116,101,114,39,115,32,100,101,120,116,101,114,105,116,121,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,79,68,65,71,71,69,82,0,83,116,114,111,110,103,32,97,110,100,32,104,101,97,108,116,104,121,44,32,98,117,116,32,110,111,116,32,103,111,111,100,32,97,116,32,109,97,103,105,99,0,0,0,0,0,0,0,84,104,101,32,115,104,97,102,116,32,111,110,108,121,32,101,120,116,101,110,100,115,32,53,32,102,101,101,116,32,100,111,119,110,119,97,114,100,33,0,84,104,101,32,37,115,32,104,105,116,32,121,111,117,46,0,116,104,101,32,108,111,99,97,108,32,116,114,97,100,105,110,103,32,112,111,115,116,0,0,32,100,105,122,122,105,110,101,115,115,0,0,0,0,0,0,84,104,101,32,112,111,116,105,111,110,32,105,115,46,0,0,67,114,101,97,116,101,115,32,97,110,100,32,104,117,114,108,115,32,97,32,109,97,103,105,99,32,109,105,115,115,105,108,101,32,101,113,117,105,118,97,108,101,110,116,32,116,111,32,97,32,43,49,32,109,97,103,105,99,32,97,114,114,111,119,0,0,0,0,0,0,0,0,79,83,80,69,65,82,0,0,68,119,97,114,102,0,0,0,84,104,101,32,103,101,110,105,101,32,112,114,101,102,101,114,115,32,110,111,116,32,116,111,32,98,101,32,100,105,115,116,117,114,98,101,100,32,97,103,97,105,110,33,0,0,0,0,84,104,101,32,37,115,32,105,115,32,97,119,101,115,116,114,117,99,107,32,98,121,32,121,111,117,114,32,109,97,103,110,105,102,105,99,101,110,99,101,33,0,0,0,0,0,0,0,121,111,117,114,32,104,111,109,101,0,0,0,0,0,0,0,121,111,117,114,32,100,97,117,103,104,116,101,114,32,115,104,111,117,108,100,32,98,101,32,119,101,108,108,32,111,110,32,104,101,114,32,119,97,121,32,116,111,32,114,101,99,111,118,101,114,121,46,0,0,0,0,71,101,110,101,114,97,116,101,115,32,97,32,43,50,32,112,114,111,116,101,99,116,105,111,110,32,102,105,101,108,100,0,79,50,83,87,79,82,68,0,74,97,99,107,32,111,102,32,97,108,108,32,116,114,97,100,101,115,44,32,109,97,115,116,101,114,32,111,102,32,110,111,110,101,0,0,0,0,0,0,32,32,32,32,32,99,111,110,106,117,114,101,114,32,32,32,32,32,32,0,0,0,0,0,78,111,116,104,105,110,103,32,104,97,112,112,101,110,101,100,46,0,0,0,0,0,0,0,84,104,101,32,37,115,32,109,105,115,115,101,115,32,119,105,108,100,108,121,33,0,0,0,116,104,101,32,98,97,115,101,32,111,102,32,97,32,118,111,108,99,97,110,105,99,32,115,104,97,102,116,0,0,0,0,84,104,101,32,100,111,99,116,111,114,32,105,115,32,110,111,119,32,97,100,109,105,110,105,115,116,101,114,105,110,103,32,116,104,101,32,112,111,116,105,111,110,32,97,110,100,44,32,105,110,32,97,32,102,101,119,32,109,111,109,101,110,116,115,44,32,0,0,0,0,0,0,112,101,114,109,97,110,101,110,99,101,0,0,0,0,0,0,79,83,87,79,82,68,0,0,89,111,117,32,102,101,101,108,32,97,110,32,105,114,114,105,116,97,116,105,111,110,32,115,112,114,101,97,100,32,111,118,101,114,32,121,111,117,114,32,115,107,105,110,33,0,0,0,65,100,118,101,110,116,117,114,101,114,0,0,0,0,0,0,65,32,109,97,103,105,99,32,103,101,110,105,101,32,97,112,112,101,97,114,115,33,32,32,84,104,101,32,103,101,110,105,101,32,104,97,115,32,110,111,32,110,101,119,32,115,112,101,108,108,115,32,116,111,32,116,101,97,99,104,32,121,111,117,46,0,0,0,0,0,0,0,84,104,101,32,37,115,32,100,105,101,100,33,0,0,0,0,97,32,118,111,108,99,97,110,105,99,32,115,104,97,102,116,32,108,101,97,110,105,110,103,32,100,111,119,110,119,97,114,100,0,0,0,0,0,0,0,84,111,111,32,98,97,100,46,46,46,0,0,0,0,0,0,97,108,116,101,114,32,114,101,97,108,105,116,121,0,0,0,79,72,65,77,77,69,82,0,78,105,109,98,108,101,32,97,110,100,32,115,109,97,114,116,44,32,98,117,116,32,111,110,108,121,32,97,118,101,114,97,103,101,32,115,116,114,101,110,103,116,104,0,0,0,0,0,111,98,114,97,115,115,108,97,109,112,0,0,0,0,0,0,115,110,97,107,101,0,0,0,84,104,101,32,86,111,114,112,97,108,32,66,108,97,100,101,32,98,101,104,101,97,100,115,32,116,104,101,32,37,115,33,0,0,0,0,0,0,0,0,116,104,101,32,100,117,110,103,101,111,110,32,101,110,116,114,97,110,99,101,0,0,0,0,32,97,110,100,32,121,111,117,114,115,101,108,102,33,0,0,119,97,108,107,32,116,104,114,111,117,103,104,32,119,97,108,108,115,0,0,0,0,0,0,79,83,87,79,82,68,111,102,83,76,65,83,72,73,78,71,0,0,0,0,0,0,0,0,82,111,103,117,101,0,0,0,65,32,109,97,103,105,99,32,103,101,110,105,101,32,97,112,112,101,97,114,115,33,32,32,87,104,97,116,32,115,112,101,108,108,32,119,111,117,108,100,32,121,111,117,32,108,105,107,101,63,0,0,0,0,0,0,97,32,98,117,98,98,108,105,110,103,32,102,111,117,110,116,97,105,110,0,0,0,0,0,89,111,117,114,32,108,97,110,99,101,32,111,102,32,100,101,97,116,104,32,116,105,99,107,108,101,115,32,116,104,101,32,37,115,33,0,0,0,0,0,116,104,101,32,66,97,110,107,32,111,102,32,76,97,114,110,0,0,0,0,0,0,0,0,114,101,116,105,114,101,100,32,116,111,32,116,104,101,32,99,97,118,101,114,110,115,32,111,102,32,85,108,97,114,110,44,32,119,104,101,114,101,32,104,101,32,100,101,118,111,116,101,100,32,109,111,115,116,32,111,102,32,104,105,115,32,116,105,109,101,32,116,111,32,116,104,101,32,0,0,0,0,0,0,104,117,115,98,97,110,100,0,115,117,109,109,111,110,32,100,101,109,111,110,0,0,0,0,79,83,72,73,69,76,68,0,110,117,109,98,101,114,0,0,79,75,32,97,116,32,109,97,103,105,99,44,32,98,117,116,32,97,32,109,101,100,105,111,99,114,101,32,102,105,103,104,116,101,114,0,0,0,0,0,84,104,101,32,109,97,103,105,99,32,103,101,110,105,101,32,119,97,115,32,118,101,114,121,32,117,112,115,101,116,32,97,116,32,98,101,105,110,103,32,100,105,115,116,117,114,98,101,100,33,0,0,0,0,0,0,10,10,0,0,0,0,0,0,89,111,117,114,32,119,101,97,112,111,110,32,100,105,115,105,110,116,101,103,114,97,116,101,115,33,0,0,0,0,0,0,116,104,101,32,56,116,104,32,98,114,97,110,99,104,32,111,102,32,116,104,101,32,66,97,110,107,32,111,102,32,76,97,114,110,0,0,0,0,0,0,32,55,0,0,0,0,0,0,119,105,102,101,0,0,0,0,103,101,110,111,99,105,100,101,0,0,0,0,0,0,0,0,79,83,83,80,76,65,84,69,0,0,0,0,0,0,0,0,69,108,102,0,0,0,0,0,84,104,101,114,101,32,105,115,32,97,110,32,76,82,83,32,111,102,102,105,99,101,32,104,101,114,101,46,0,0,0,0,32,32,0,0,0,0,0,0,89,111,117,114,32,119,101,97,112,111,110,32,105,115,32,100,117,108,108,101,100,32,98,121,32,116,104,101,32,37,115,46,0,0,0,0,0,0,0,0,66,97,99,107,0,0,0,0,116,104,101,32,68,78,68,32,115,116,111,114,101,0,0,0,99,111,109,112,108,121,32,119,105,116,104,32,116,104,101,32,108,97,119,44,32,119,101,32,99,97,110,110,111,116,32,115,101,114,118,101,32,121,111,117,32,97,116,32,116,104,105,115,32,116,105,109,101,46,32,32,83,111,32,83,111,114,114,121,46,32,0,0,0,0,0,0,89,111,117,32,119,101,114,101,32,116,111,111,32,99,108,111,115,101,32,116,111,32,116,104,101,32,115,112,104,101,114,101,33,0,0,0,0,0,0,0,100,105,101,100,33,32,89,111,117,32,100,105,100,110,39,116,32,109,97,107,101,32,105,116,32,105,110,32,116,105,109,101,46,32,32,73,110,32,121,111,117,114,32,97,103,111,110,121,44,32,121,111,117,32,107,105,108,108,32,116,104,101,32,100,111,99,116,111,114,44,32,121,111,117,114,32,0,0,0,0,115,112,104,101,114,101,32,111,102,32,97,110,110,105,104,105,108,97,116,105,111,110,0,0,115,116,114,0,0,0,0,0,44,32,0,0,0,0,0,0,79,80,76,65,84,69,65,82,77,79,82,0,0,0,0,0,83,116,114,111,110,103,32,97,110,100,32,97,118,101,114,97,103,101,32,73,81,44,32,98,117,116,32,117,110,119,105,115,101,32,38,32,118,101,114,121,32,117,103,108,121,0,0,0,84,104,101,32,84,97,108,105,115,109,97,110,32,111,102,32,116,104,101,32,83,112,104,101,114,101,32,112,114,111,116,101,99,116,115,32,121,111,117,32,102,114,111,109,32,97,110,110,105,104,105,108,97,116,105,111,110,33,0,0,0,0,0,0,32,116,104,101,32,37,115,46,0,0,0,0,0,0,0,0,116,104,101,32,67,111,108,108,101,103,101,32,111,102,32,76,97,114,110,0,0,0,0,0,72,111,119,101,118,101,114,46,46,46,32,116,104,101,32,100,111,99,116,111,114,32,104,97,115,32,116,104,101,32,115,97,100,32,100,117,116,121,32,116,111,32,105,110,102,111,114,109,32,121,111,117,32,116,104,97,116,32,121,111,117,114,32,100,97,117,103,104,116,101,114,32,104,97,115,32,0,0,0,0,109,97,107,101,32,97,32,119,97,108,108,0,0,0,0,0,79,83,80,76,73,78,84,0,89,111,117,114,32,104,97,110,100,115,32,97,114,101,32,98,117,115,121,32,119,105,116,104,32,116,104,101,32,116,119,111,32,104,97,110,100,101,100,32,115,119,111,114,100,33,0,0,75,108,105,110,103,111,110,0,89,111,117,32,102,105,110,100,32,115,111,109,101,32,99,111,99,97,105,110,101,46,0,0,32,97,103,103,114,97,118,97,116,101,32,109,111,110,115,116,101,114,115,0,0,0,0,0,89,111,117,32,109,105,115,115,101,100,0,0,0,0,0,0,97,32,115,112,97,114,107,108,105,110,103,32,115,97,112,112,104,105,114,101,0,0,0,0,66,111,121,33,32,32,68,105,100,32,121,111,117,32,115,117,114,112,114,105,115,101,32,116,104,101,109,33,0,0,0,0,109,97,103,105,99,32,102,105,114,101,0,0,0,0,0,0,97,110,0,0,0,0,0,0,79,83,84,85,68,76,69,65])
.concat([84,72,69,82,0,0,0,0,66,101,32,97,100,118,105,115,101,100,44,32,116,104,111,117,103,104,44,32,116,104,97,116,32,121,111,117,32,119,111,110,39,116,32,98,101,32,112,108,97,99,101,100,32,111,110,32,116,104,101,32,115,99,111,114,101,98,111,97,114,100,46,0,83,109,97,114,116,44,32,103,111,111,100,32,97,116,32,109,97,103,105,99,44,32,98,117,116,32,118,101,114,121,32,119,101,97,107,0,0,0,0,0,83,109,111,107,101,0,0,0,89,111,117,32,104,105,116,0,97,110,32,101,110,99,104,97,110,116,105,110,103,32,101,109,101,114,97,108,100,0,0,0,32,114,97,105,115,101,32,99,104,97,114,105,115,109,97,0,70,114,97,110,107,108,121,44,32,78,111,32,111,110,101,32,116,104,111,117,103,104,116,32,121,111,117,32,99,111,117,108,100,32,100,111,32,105,116,46,0,0,0,0,0,0,0,0,116,101,108,101,112,111,114,116,32,97,119,97,121,0,0,0,79,82,73,78,71,0,0,0,87,105,122,97,114,100,0,0,89,111,117,32,102,105,110,100,32,115,111,109,101,32,104,97,115,104,105,115,104,46,0,0,109,111,110,115,116,101,114,0,97,32,114,117,98,121,0,0,67,111,110,103,114,97,116,117,108,97,116,105,111,110,115,46,32,32,89,111,117,32,102,111,117,110,100,32,116,104,101,32,112,111,116,105,111,110,32,111,102,32,99,117,114,101,32,100,105,97,110,116,104,114,111,114,105,116,105,115,33,0,0,0,116,105,109,101,32,115,116,111,112,0,0,0,0,0,0,0,79,76,69,65,84,72,69,82,0,0,0,0,0,0,0,0,69,120,99,101,112,116,105,111,110,97,108,32,115,116,114,101,110,103,116,104,44,32,98,117,116,32,116,104,105,99,107,32,97,115,32,97,32,98,114,105,99,107,0,0,0,0,0,0,97,112,112,114,101,110,116,105,99,101,32,99,111,110,106,117,114,101,114,0,0,0,0,0,32,32,110,111,118,105,99,101,32,101,120,112,108,111,114,101,114,32,32,0,0,0,0,0,89,111,117,32,102,105,110,100,32,115,111,109,101,32,76,83,68,46,0,0,0,0,0,0,99,97,110,39,116,32,99,114,101,97,116,101,109,111,110,115,116,40,37,100,41,0,0,0,97,32,98,114,105,108,108,105,97,110,116,32,100,105,97,109,111,110,100,0,0,0,0,0,111,104,111,109,101,50,0,0,104,111,108,100,32,109,111,110,115,116,101,114,0,0,0,0,79,67,72,65,73,78,0,0,89,111,117,32,115,117,102,102,101,114,32,37,100,32,104,105,116,32,112,111,105,110,116,37,115,32,100,97,109,97,103,101,33,0,0,0,0,0,0,0,79,103,114,101,0,0,0,0,89,111,117,32,102,105,110,100,32,115,111,109,101,32,109,97,103,105,99,32,109,117,115,104,114,111,111,109,115,46,0,0,71,111,100,32,111,102,32,72,101,108,108,102,105,114,101,0,97,110,32,97,109,117,108,101,116,32,111,102,32,108,105,102,101,32,112,114,101,115,101,114,118,97,116,105,111,110,0,0,98,117,121,95,100,111,112,101,0,0,0,0,0,0,0,0,115,99,97,114,101,32,109,111,110,115,116,101,114,0,0,0,79,80,76,65,84,69,0,0,85,76,97,114,110,83,101,116,117,112,0,0,0,0,0,0,83,110,111,114,116,0,0,0,111,114,99,0,0,0,0,0,100,101,109,111,110,32,112,114,105,110,99,101,0,0,0,0,97,32,115,116,97,102,102,32,111,102,32,112,111,119,101,114,0,0,0,0,0,0,0,0,37,100,32,103,112,0,0,0,102,105,110,103,101,114,32,111,102,32,100,101,97,116,104,0,79,76,65,82,78,69,89,69,0,0,0,0,0,0,0,0,80,105,99,107,32,97,32,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,46,46,46,0,0,0,0,0,0,0,89,111,117,32,102,105,110,100,32,115,111,109,101,32,115,112,101,101,100,46,0,0,0,0,97,110,32,101,108,101,118,97,116,111,114,32,103,111,105,110,103,32,117,112,0,0,0,0,116,121,112,101,32,86,73,73,32,100,101,109,111,110,32,108,111,114,100,0,0,0,0,0,97,32,119,97,110,100,32,111,102,32,119,111,110,100,101,114,0,0,0,0,0,0,0,0,80,111,108,105,110,110,101,97,117,115,46,32,32,77,97,110,121,32,121,101,97,114,115,32,97,103,111,44,32,97,102,116,101,114,32,104,97,118,105,110,103,32,109,97,110,121,32,109,105,114,97,99,117,108,111,117,115,32,115,117,99,99,101,115,115,101,115,44,32,80,111,108,105,110,110,101,97,117,115,32,0,0,0,0,0,0,0,0,112,97,121,95,116,97,120,101,115,0,0,0,0,0,0,0,102,108,111,111,100,0,0,0,79,84,82,65,80,65,82,82,79,87,73,86,0,0,0,0,72,111,119,32,109,117,99,104,32,100,111,32,121,111,117,32,100,111,110,97,116,101,63,32,0,0,0,0,0,0,0,0,70,101,109,97,108,101,0,0,89,111,117,32,104,97,118,101,32,102,111,117,110,100,32,68,101,97,108,101,114,32,77,99,68,111,112,101,39,115,32,72,105,100,101,111,117,116,33,0,116,121,112,101,32,86,73,32,100,101,109,111,110,32,108,111,114,100,0,0,0,0,0,0,99,91,37,100,93,9,37,45,50,48,115,9,61,32,37,108,100,10,0,0,0,0,0,0,84,104,101,32,84,97,108,105,115,109,97,110,32,111,102,32,116,104,101,32,83,112,104,101,114,101,0,0,0,0,0,0,32,54,0,0,0,0,0,0,111,108,114,115,50,0,0,0,105,110,118,117,108,110,101,114,97,98,105,108,105,116,121,0,79,84,82,65,80,65,82,82,79,87,0,0,0,0,0,0,77,97,108,101,0,0,0,0,89,111,117,32,104,97,118,101,32,102,111,117,110,100,32,121,111,117,114,32,119,97,121,32,104,111,109,101,46,0,0,0,37,100,0,0,0,0,0,0,116,121,112,101,32,86,32,100,101,109,111,110,32,108,111,114,100,0,0,0,0,0,0,0,84,104,101,32,72,97,110,100,32,111,102,32,70,101,97,114,0,0,0,0,0,0,0,0,84,104,101,121,32,104,97,118,101,32,97,108,115,111,32,116,111,108,100,32,117,115,32,116,104,97,116,32,121,111,117,32,111,119,101,32,37,100,32,103,112,32,105,110,32,98,97,99,107,32,116,97,120,101,115,32,97,110,100,44,32,97,115,32,119,101,32,109,117,115,116,32,0,0,0,0,0,0,0,0,84,104,101,32,37,115,32,105,115,32,117,110,97,102,102,101,99,116,101,100,32,98,121,32,116,104,101,32,98,108,97,115,116,33,0,0,0,0,0,0,89,111,117,32,100,111,32,110,111,116,32,111,119,101,32,117,115,32,97,110,121,32,116,97,120,101,115,46,32,32,32,32,32,32,32,32,32,32,32,0,100,114,97,105,110,32,108,105,102,101,0,0,0,0,0,0,119,101,98,0,0,0,0,0,65,118,97,105,108,97,98,108,101,32,115,112,101,108,108,115,32,97,114,101,58,0,0,0,79,87,65,76,76,0,0,0,112,105,99,107,95,103,101,110,100,101,114,0,0,0,0,0,89,111,117,32,104,97,118,101,32,102,111,117,110,100,32,116,104,101,32,85,108,97,114,110,32,116,114,97,100,105,110,103,32,80,111,115,116,46,0,0,116,121,112,101,32,73,86,32,100,101,109,111,110,32,108,111,114,100,0,0,0,0,0,0,97,32,98,114,97,115,115,32,108,97,109,112,0,0,0,0,89,111,117,32,112,114,101,115,101,110,116,108,121,32,111,119,101,32,37,100,32,103,112,32,105,110,32,116,97,120,101,115,46,32,32,0,0,0,0,0,108,105,103,104,116,110,105,110,103,0,0,0,0,0,0,0,79,67,76,79,83,69,68,68,79,79,82,0,0,0,0,0,89,111,117,32,112,117,116,32,111,110,32,121,111,117,114,32,37,115,0,0,0,0,0,0,87,104,97,116,32,97,114,101,32,121,97,63,0,0,0,0,89,111,117,32,102,97,108,108,32,116,104,114,111,117,103,104,32,97,32,116,114,97,112,32,100,111,111,114,33,0,0,0,32,99,114,101,97,116,101,32,97,114,116,105,102,97,99,116,0,0,0,0,0,0,0,0,116,121,112,101,32,73,73,73,32,100,101,109,111,110,32,108,111,114,100,0,0,0,0,0,97,32,100,101,118,105,99,101,32,111,102,32,116,104,101,102,116,45,112,114,101,118,101,110,116,105,111,110,0,0,0,0,87,101,108,99,111,109,101,32,116,111,32,116,104,101,32,85,108,97,114,110,32,82,101,118,101,110,117,101,32,83,101,114,118,105,99,101,32,100,105,115,116,114,105,99,116,32,111,102,102,105,99,101,46,32,32,72,111,119,32,99,97,110,32,119,101,32,104,101,108,112,32,121,111,117,63,0,0,0,0,0,100,101,104,121,100,114,97,116,105,111,110,0,0,0,0,0,123,34,115,99,111,114,101,34,58,37,108,100,44,34,100,105,102,102,34,58,37,108,100,44,34,108,101,118,101,108,34,58,34,37,115,34,44,34,99,104,97,114,34,58,34,37,115,34,44,34,100,105,101,100,82,101,97,115,111,110,34,58,34,37,115,34,125,0,0,0,0,0,79,79,80,69,78,68,79,79,82,0,0,0,0,0,0,0,72,111,119,101,118,101,114,44,32,115,105,110,99,101,32,73,32,97,109,32,97,32,103,111,111,100,32,115,112,111,114,116,44,32,73,32,119,105,108,108,32,108,101,116,32,121,111,117,32,112,108,97,121,46,0,0,84,104,101,32,104,121,115,116,101,114,105,97,32,111,102,32,105,116,99,104,105,110,103,32,102,111,114,99,101,115,32,121,111,117,32,116,111,32,114,101,109,111,118,101,32,121,111,117,114,32,97,114,109,111,114,33,0,0,0,0,0,0,0,0,89,111,117,32,102,97,108,108,32,116,104,114,111,117,103,104,32,97,32,116,114,97,112,32,100,111,111,114,32,108,101,97,100,105,110,103,32,115,116,114,97,105,103,104,116,32,116,111,32,72,69,76,76,33,0,0,116,121,112,101,32,73,73,32,100,101,109,111,110,32,108,111,114,100,0,0,0,0,0,0,97,32,99,117,98,101,32,111,102,32,117,110,100,101,97,100,32,99,111,110,116,114,111,108,0,0,0,0,0,0,0,0,32,115,116,114,101,110,103,116,104,0,0,0,0,0,0,0,83,111,114,114,121,32,98,117,116,32,105,116,32,115,101,101,109,115,32,121,111,117,32,97,114,101,32,116,114,121,105,110,103,32,116,111,32,112,97,121,32,111,102,102,32,121,111,117,114,32,116,97,120,101,115,32,98,121,32,99,104,101,97,116,105,110,103,33,0,0,0,0,118,97,112,111,114,105,122,101,32,114,111,99,107,0,0,0,79,71,79,76,68,80,73,76,69,0,0,0,0,0,0,0,89,111,117,32,110,111,119,32,102,101,101,108,32,108,101,115,115,32,97,119,107,119,97,114,100,46,0,0,0,0,0,0,89,111,117,32,101,115,99,97,112,101,32,97,32,116,114,97,112,32,100,111,111,114,46,0,84,104,101,32,99,111,111,107,105,101,32,116,97,115,116,101,100,32,103,111,111,100,46,0,116,121,112,101,32,73,32,100,101,109,111,110,32,108,111,114,100,0,0,0,0,0,0,0,97,32,115,99,97,114,97,98,32,111,102,32,110,101,103,97,116,101,32,115,112,105,114,105,116,0,0,0,0,0,0,0,83,111,32,115,111,114,114,121,32,98,117,116,32,119,101,32,97,114,101,32,110,111,116,32,97,117,116,104,111,114,105,122,101,100,32,116,111,32,97,99,99,101,112,116,32,116,104,97,116,32,105,116,101,109,46,0,99,108,111,117,100,32,107,105,108,108,0,0,0,0,0,0,79,68,69,65,68,70,79,85,78,84,65,73,78,0,0,0,84,104,101,32,105,114,114,105,116,97,116,105,111,110,32,115,117,98,115,105,100,101,115,46,0,0,0,0,0,0,0,0,32,32,32,32,32,97,100,118,101,110,116,117,114,101,114,32,32,32,32,0,0,0,0,0,89,111,117,32,97,114,101,32,104,105,116,32,98,121,32,97,32,100,97,114,116,33,0,0,114,101,100,32,100,114,97,103,111,110,0,0,0,0,0,0,97,110,32,111,114,98,32,111,102,32,100,114,97,103,111,110,32,115,108,97,121,105,110,103,0,0,0,0,0,0,0,0,89,111,117,32,100,111,110,39,116,32,104,97,118,101,32,105,116,101,109,32,37,99,33,0,104,97,115,116,101,32,115,101,108,102,0,0,0,0,0,0,79,66,65,78,75,0,0,0,84,104,101,32,99,104,101,115,116,32,101,120,112,108,111,100,101,115,32,97,115,32,121,111,117,32,111,112,101,110,32,105,116,46,0,0,0,0,0,0,89,111,117,32,110,111,119,32,102,101,101,108,32,98,101,116,116,101,114,46,0,0,0,0,89,111,117,32,97,114,101,32,104,105,116,32,98,121,32,97,110,32,97,114,114,111,119,33,0,0,0,0,0,0,0,0,103,114,101,101,110,32,117,114,99,104,105,110,0,0,0,0,97,110,32,97,109,117,108,101,116,32,111,102,32,105,110,118,105,115,105,98,105,108,105,116,121,0,0,0,0,0,0,0,89,111,117,32,100,111,110,39,116,32,42,114,101,97,108,108,121,42,32,119,97,110,116,32,116,111,32,115,101,108,108,32,116,104,97,116,44,32,110,111,119,32,100,111,32,121,111,117,63,0,0,0,0,0,0,0,99,97,110,99,101,108,108,97,116,105,111,110,0,0,0,0,79,66,65,78,75,50,0,0,89,111,117,32,114,101,103,97,105,110,32,121,111,117,114,32,115,101,110,115,101,115,46,0,67,108,105,109,98,32,117,112,0,0,0,0,0,0,0,0,107,111,98,111,108,100,0,0,112,108,97,116,105,110,117,109,32,100,114,97,103,111,110,0,97,110,32,111,114,98,32,111,102,32,101,110,108,105,103,104,116,101,110,109,101,110,116,0,115,101,108,108,95,105,116,101,109,0,0,0,0,0,0,0,112,111,108,121,109,111,114,112,104,0,0,0,0,0,0,0,79,69,76,69,86,65,84,79,82,68,79,87,78,0,0,0,84,104,101,32,98,108,105,110,100,110,101,115,115,32,108,105,102,116,115,46,0,0,0,0,67,108,105,109,98,32,100,111,119,110,0,0,0,0,0,0,97,32,115,116,97,105,114,99,97,115,101,32,108,101,97,100,105,110,103,32,117,112,119,97,114,100,115,0,0,0,0,0,115,105,108,118,101,114,32,100,114,97,103,111,110,0,0,0,97,32,99,104,101,115,116,0,60,112,62,73,116,32,104,97,115,32,98,101,101,110,32,115,97,105,100,32,116,104,97,116,32,116,104,101,114,101,32,111,110,99,101,32,119,97,115,32,97,32,103,114,101,97,116,32,109,97,103,105,99,105,97,110,32,119,104,111,32,99,97,108,108,101,100,32,104,105,109,115,101,108,102,32,0,0,0,0,87,101,108,99,111,109,101,32,116,111,32,116,104,101,32,56,116,104,45,108,101,118,101,108,32,98,114,97,110,99,104,32,111,102,102,105,99,101,32,111,102,32,116,104,101,32,70,105,114,115,116,32,78,97,116,105,111,110,97,108,32,66,97,110,107,32,111,102,32,85,108,97,114,110,46,0,0,0,0,0,99,111,108,100,0,0,0,0,79,83,84,65,73,82,83,68,79,87,78,0,0,0,0,0,78,111,116,104,105,110,103,32,104,97,112,112,101,110,115,46,0,0,0,0,0,0,0,0,89,111,117,114,32,115,105,103,104,116,32,114,101,116,117,114,110,115,32,98,117,116,32,101,118,101,114,121,116,104,105,110,103,32,108,111,111,107,115,32,100,117,108,108,32,97,110,100,32,102,97,100,101,100,46,0,89,111,117,32,104,97,118,101,32,102,111,117,110,100,32,0,115,112,105,114,105,116,32,110,97,103,97,0,0,0,0,0,97,32,98,111,111,107,0,0,10,70,111,114,32,116,104,101,32,99,91,93,32,97,114,114,97,121,58,10,0,0,0,0,32,53,0,0,0,0,0,0,87,101,108,99,111,109,101,32,116,111,32,116,104,101,32,70,105,114,115,116,32,78,97,116,105,111,110,97,108,32,66,97,110,107,32,111,102,32,85,108,97,114,110,46,0,0,0,0,102,105,114,101,98,97,108,108,0,0,0,0,0,0,0,0,79,68,78,68,83,84,79,82,69,0,0,0,0,0,0,0,89,111,117,114,32,119,101,97,112,111,110,32,103,108,111,119,115,32,102,111,114,32,97,32,109,111,109,101,110,116,46,0,89,111,117,32,102,105,110,100,32,37,115,0,0,0,0,0,120,118,97,114,116,0,0,0,115,104,111,119,71,97,109,101,40,41,59,0,0,0,0,0,97,32,109,97,103,105,99,32,112,111,116,105,111,110,0,0,84,104,101,32,85,108,97,114,110,32,82,101,118,101,110,117,101,32,83,101,114,118,105,99,101,32,104,97,115,32,111,114,100,101,114,101,100,32,117,115,32,116,111,32,110,111,116,32,100,111,32,98,117,115,105,110,101,115,115,32,119,105,116,104,32,116,97,120,32,101,118,97,100,101,114,115,46,0,0,0,84,104,101,32,37,115,32,105,115,32,117,110,97,102,102,101,99,116,101,100,32,98,121,32,116,104,101,32,115,112,104,101,114,101,32,111,102,32,97,110,110,105,104,105,108,97,116,105,111,110,33,0,0,0,0,0,73,116,101,109,32,37,99,32,105,115,32,110,111,116,32,97,32,103,101,109,115,116,111,110,101,33,0,0,0,0,0,0,105,110,118,105,115,105,98,105,108,105,116,121,0,0,0,0,115,115,112,0,0,0,0,0,69,108,97,112,115,101,100,32,116,105,109,101,32,105,115,32,37,100,46,32,32,89,111,117,32,104,97,118,101,32,37,100,32,109,111,98,117,108,37,115,32,108,101,102,116,46,0,0,79,77,73,82,82,79,82,0,89,111,117,114,32,119,101,97,112,111,110,32,118,105,98,114,97,116,101,115,32,118,105,111,108,101,110,116,108,121,32,97,110,100,32,99,114,117,109,98,108,101,115,32,105,110,116,111,32,100,117,115,116,33,0,0,84,104,101,114,101,32,105,115,32,97,110,32,111,112,101,110,32,100,111,111,114,32,104,101,114,101,46,0,0,0,0,0,112,117,114,112,108,101,32,119,111,114,109,0,0,0,0,0,97,32,109,97,103,105,99,32,115,99,114,111,108,108,0,0,89,111,117,32,100,111,110,39,116,32,104,97,118,101,32,116,104,97,116,32,109,117,99,104,32,105,110,32,116,104,101,32,98,97,110,107,33,0,0,0,112,104,97,110,116,97,115,109,97,108,32,102,111,114,99,101,115,0,0,0,0,0,0,0,79,83,67,72,79,79,76,0,89,111,117,32,119,105,101,108,100,32,37,115,0,0,0,0,89,111,117,114,32,119,101,97,112,111,110,32,103,108,111,119,115,32,97,32,108,105,116,116,108,101,46,0,0,0,0,0,68,111,119,110,0,0,0,0,32,99,114,101,97,116,101,32,109,111,110,115,116,101,114,0,103,114,101,101,110,32,100,114,97,103,111,110,0,0,0,0,97,32,98,101,108,116,32,111,102,32,115,116,114,105,107,105,110,103,0,0,0,0,0,0,89,111,117,32,100,111,110,39,116,32,104,97,118,101,32,116,104,97,116,32,109,117,99,104,46,0,0,0,0,0,0,0,99,114,101,97,116,101,32,109,111,110,115,116,101,114,0,0,60,117,110,107,110,111,119,110,62,0,0,0,0,0,0,0,79,84,69,76,69,80,79,82,84,69,82,0,0,0,0,0,83,111,114,114,121,32,98,117,116,32,121,111,117,114,32,115,97,118,101,102,105,108,101,32,104,97,115,32,98,101,101,110,32,97,108,116,101,114,101,100,46,0,0,0,0,0,0,0,89,111,117,32,102,101,101,108,32,100,101,112,114,101,115,115,101,100,46,0,0,0,0,0,84,104,101,114,101,32,105,115,32,97,32,68,78,68,32,115,116,111,114,101,32,104,101,114,101,46,0,0,0,0,0,0,98,114,111,110,122,101,32,100,114,97,103,111,110,0,0,0,97,32,114,105,110,103,32,111,102,32,105,110,99,114,101,97,115,101,32,100,97,109,97,103,101,0,0,0,0,0,0,0,32,119,105,115,100,111,109,0,89,111,117,32,104,97,118,101,32,98,101,101,110,32,104,101,97,114,100,33,0,0,0,0,115,101,108,108,95,103,101,109,0,0,0,0,0,0,0,0,99,117,114,101,32,98,108,105,110,100,110,101,115,115,0,0,79,83,84,65,84,85,69,0,89,111,117,114,32,37,115,32,103,108,111,119,115,32,102,111,114,32,97,32,109,111,109,101,110,116,46,0,0,0,0,0,84,104,101,114,101,32,105,115,32,97,32,100,101,97,100,32,102,111,117,110,116,97,105,110,32,104,101,114,101,46,0,0,119,97,116,101,114,32,108,111,114,100,0,0,0,0,0,0,97,32,114,105,110,103,32,111,102,32,99,108,101,118,101,114,110,101,115,115,0,0,0,0,32,119,101,110,116,32,117,112,32,98,121,32,111,110,101,33,0,0,0,0,0,0,0,0,119,105,116,104,100,114,97,119,95,109,111,110,101,121,0,0,104,101,97,108,105,110,103,0,79,70,79,85,78,84,65,73,78,0,0,0,0,0,0,0,89,111,117,32,102,101,101,108,32,121,111,117,114,32,118,105,115,105,111,110,32,115,104,97,114,112,101,110,46,0,0,0,89,111,117,114,32,37,115,32,118,105,98,114,97,116,101,115,32,118,105,111,108,101,110,116,108,121,32,97,110,100,32,99,114,117,109,98,108,101,115,32,105,110,116,111,32,100,117,115,116,33,0,0,0,0,0,0,32,110,111,118,105,99,101,32,97,100,118,101,110,116,117,114,101,114,32,0,0,0,0,0,89,111,117,32,104,97,118,101,32,102,111,117,110,100,32,97,32,98,114,97,110,99,104,32,111,102,102,105,99,101,32,111,102,32,116,104,101,32,98,97,110,107,32,111,102,32,85,108,97,114,110,46,0,0,0,0,109,105,109,105,99,0,0,0,97,32,114,105,110,103,32,111,102,32,115,116,114,101,110,103,116,104,0,0,0,0,0,0,32,114,101,109,97,105,110,101,100,32,117,110,99,104,97,110,103,101,100,33,0,0,0,0,100,101,112,111,115,105,116,95,109,111,110,101,121,0,0,0,101,110,108,105,103,104,116,101,110,109,101,110,116,0,0,0,79,69,76,69,86,65,84,79,82,85,80,0,0,0,0,0,116,111,111,107,32,97,110,32,101,108,101,118,97,116,111,114,32,115,116,114,97,105,103,104,116,32,116,111,32,72,69,76,76,0,0,0,0,0,0,0,89,111,117,32,102,101,101,108,32,97,32,115,105,99,107,110,101,115,115,32,101,110,103,117,108,102,32,121,111,117,33,0,115,0,0,0,0,0,0,0,89,111,117,114,32,37,115,32,103,108,111,119,115,32,98,114,105,101,102,108,121,46,0,0,89,111,117,32,104,97,118,101,32,102,111,117,110,100,32,116,104,101,32,98,97,110,107,32,111,102,32,85,108,97,114,110,46,0,0,0,0,0,0,0,79,83,84,65,73,82,83,85,80,0,0,0,0,0,0,0,103,110,111,109,101,32,107,105,110,103,0,0,0,0,0,0,97,32,114,105,110,103,32,111,102,32,100,101,120,116,101,114,105,116,121,0,0,0,0,0,32,119,101,110,116,32,100,111,119,110,32,98,121,32,111,110,101,33,0,0,0,0,0,0,110,117,109,98,101,114,0,0,115,116,114,101,110,103,116,104,0,0,0,0,0,0,0,0,89,111,117,32,100,111,110,39,116,32,104,97,118,101,32,105,116,101,109,32,37,99,33,0,119,97,115,116,101,100,32,98,121,32,97,110,32,97,110,110,111,121,101,100,32,103,101,110,105,101,0,0,0,0,0,0,89,111,117,32,100,111,110,39,116,32,115,101,101,109,32,116,111,32,98,101,32,97,102,102,101,99,116,101,100,46,0,0,89,111,117,32,102,101,101,108,32,97,32,115,101,110,115,101,32,111,102,32,108,111,115,115,46,0,0,0,0,0,0,0,117,110,115,101,101,110,32,97,116,116,97,99,107,101,114,0,84,104,101,114,101,32,105,115,32,97,32,109,105,114,114,111,114,32,104,101,114,101,46,0,79,80,73,84,0,0,0,0,106,97,99,107,97,108,0,0,117,109,98,101,114,32,104,117,108,107,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0,0,0,0,0,0,0,0,97,110,32,101,110,101,114,103,121,32,114,105,110,103,0,0,89,111,117,32,106,117,115,116,32,103,97,105,110,101,100,32,37,100,32,101,120,112,101,114,105,101,110,99,101,32,112,111,105,110,116,37,115,33,0,0,87,97,108,107,32,84,104,114,111,117,103,104,32,87,97,108,108,115,0,0,0,0,0,0,72,111,119,32,109,117,99,104,63,32,0,0,0,0,0,0,115,111,110,105,99,32,115,112,101,97,114,0,0,0,0,0,89,111,117,32,99,97,110,39,116,32,119,105,101,108,100,32,105,116,101,109,32,37,99,33,0,0,0,0,0,0,0,0,119,97,115,116,101,100,32,98,121,32,97,32,109,97,108,108,111,99,40,41,32,102,97,105,108,117,114,101,0,0,0,0,89,111,117,32,102,101,101,108,32,97,32,99,104,105,108,108,32,114,117,110,32,117,112,32,121,111,117,114,32,115,112,105,110,101,33,0,0,0,0,0,73,116,32,100,105,115,97,112,112,101,97,114,115,32,100,111,119,110,32,116,104,101,32,112,105,116,46,0,0,0,0,0,71,111,32,105,110,0,0,0,79,79,82,66,0,0,0,0,97,32,112,105,116,0,0,0,121,101,108,108,111,119,32,109,111,108,100,0,0,0,0,0,97,32,114,105,110,103,32,111,102,32,112,114,111,116,101,99,116,105,111,110,0,0,0,0,80,101,114,104,97,112,115,32,104,101,114,101,32,105,115,32,116,104,101,32,115,111,108,117,116,105,111,110,32,121,111,117,32,110,101,101,100,46,60,47,112,62,0,0,0,0,0,0,89,111,117,32,106,117,115,116,32,108,111,115,116,32,37,100,32,101,120,112,101,114,105,101,110,99,101,32,112,111,105,110,116,37,115,33,0,0,0,0,80,114,111,116,101,99,116,105,111,110,0,0,0,0,0,0,66,97,99,107,0,0,0,0,99,104,97,114,109,32,109,111,110,115,116,101,114,0,0,0,89,111,117,114,32,97,114,109,111,114,32,105,115,32,111,102,102,46,0,0,0,0,0,0,100,105,101,100,32,97,32,112,111,115,116,32,109,111,114,116,101,109,32,100,101,97,116,104,0,0,0,0,0,0,0,0,89,111,117,32,110,111,119,32,104,97,118,101,32,105,110,99,114,101,100,105,98,108,101,32,98,117,108,103,105,110,103,32,109,117,115,99,108,101,115,33,0,0,0,0,0,0,0,0,74,117,115,116,32,80,114,97,121,0,0,0,0,0,0,0,89,111,117,32,100,114,111,112,58,0,0,0,0,0,0,0,89,111,117,32,104,97,118,101,32,102,111,117,110,100,32,116,104,101,32,67,111,108,108,101,103,101,32,111,102,32,85,108,97,114,110,46,0,0,0,0,79,84,72,82,79,78,69,0,115,104,97,109,98,108,105,110,103,32,109,111,117,110,100,0,97,32,114,105,110,103,32,111,102,32,114,101,103,101,110,101,114,97,116,105,111,110,0,0,32,52,0,0,0,0,0,0,89,111,117,32,106,117,115,116,32,108,111,115,116,32,37,100,32,115,112,101,108,108,37,115,33,0,0,0,0,0,0,0,103,111,108,100,58,32,37,108,100,32,32,69,120,112,101,114,105,101,110,99,101,58,32,37,108,100,32,32,67,104,97,114,97,99,116,101,114,32,108,101,118,101,108,58,32,37,108,100,32,32,76,101,118,101,108,32,105,110,32,99,97,118,101,114,110,115,58,32,37,100,10,0,80,114,111,116,101,99,116,105,111,110,32,66,121,32,65,108,116,97,114,0,0,0,0,0,83,101,108,108,32,65,108,108,32,71,101,109,115,0,0,0,115,108,101,101,112,0,0,0,89,111,117,114,32,115,104,105,101,108,100,32,105,115,32,111,102,102,46,0,0,0,0,0,97,110,110,105,104,105,108,97,116,101,100,32,98,121,32,97,32,115,112,104,101,114,101,0,89,111,117,32,102,101,101,108,32,104,101,97,108,116,104,105,101,114,33,0,0,0,0,0,84,104,101,114,101,39,115,32,115,111,109,101,116,104,105,110,103,32,104,101,114,101,32,97,108,114,101,97,100,121,46,0,90,97,97,97,97,112,112,112,33,32,32,89,111,117,39,118,101,32,98,101,101,110,32,116,101,108,101,112,111,114,116,101,100,33,0,0,0,0,0,0,79,65,76,84,65,82,0,0,100,105,115,101,110,99,104,97,110,116,114,101,115,115,0,0,85,102,111,114,116,117,110,101,0,0,0,0,0,0,0,0,97,32,114,105,110,103,32,111,102,32,101,120,116,114,97,32,114,101,103,101,110,101,114,97,116,105,111,110,0,0,0,0,89,111,117,32,106,117,115,116,32,103,97,105,110,101,100,32,37,100,32,115,112,101,108,108,37,115,33,0,0,0,0,0,84,119,111,32,115,112,104,101,114,101,115,32,111,102,32,97,110,110,105,104,105,108,97,116,105,111,110,32,99,111,108,108,105,100,101,33,32,89,111,117,32,104,101,97,114,32,97,32,103,114,101,97,116,32,101,97,114,116,104,45,115,104,97,107,105,110,103,32,98,108,97,115,116,33,0,0,0,0,0,0,73,110,118,105,115,105,98,105,108,105,116,121,0,0,0,0,37,108,100,32,103,112,0,0,100,101,120,116,101,114,105,116,121,0,0,0,0,0,0,0,99,104,109,0,0,0,0,0,115,0,0,0,0,0,0,0,100,105,101,100,32,111,102,32,105,110,116,101,114,110,97,108,32,99,111,109,112,108,105,99,97,116,105,111,110,115,0,0,87,79,87,33,32,32,89,111,117,32,102,101,101,108,32,102,97,110,116,97,115,116,105,99,33,0,0,0,0,0,0,0,89,111,117,32,100,111,110,39,116,32,104,97,118,101,32,105,116,101,109,32,37,99,33,32,0,0,0,0,0,0,0,0,79,112,101,110,0,0,0,0,112,111,108,116,101,114,103,101,105,115,116,0,0,0,0,0,83,108,97,121,101,114,0,0,89,111,117,32,103,97,105,110,32,37,100,32,104,105,116,32,112,111,105,110,116,37,115,33,0,0,0,0,0,0,0,0,67,97,110,99,101,108,108,97,116,105,111,110,0,0,0,0,73,116,32,105,115,44,32,111,102,32,99,111,117,114,115,101,44,32,121,111,117,114,32,112,114,105,118,105,108,101,103,101,32,116,111,32,107,101,101,112,32,116,104,101,32,115,116,111,110,101,46,0,0,0,0,0,109,97,103,105,99,32,109,105,115,115,105,108,101,0,0,0,115,104,105,101,108,100,0,0,107,105,108,108,101,100,32,98,121,32,97,110,32,101,120,112,108,111,100,105,110,103,32,99,104,101,115,116,0,0,0,0,89,111,117,32,102,101,101,108,32,99,111,110,102,117,115,101,100,46,0,0,0,0,0,0,89,111,117,32,99,97,110,39,116,32,99,97,114,114,121,32,97,110,121,116,104,105,110,103,32,101,108,115,101,46,0,0,84,104,101,114,101,32,105,115,32,97,32,99,104,101,115,116,32,104,101,114,101,46,0,0,32,98,108,97,110,107,32,112,97,112,101,114,0,0,0,0,105,110,118,105,115,105,98,108,101,32,115,116,97,108,107,101,114,0,0,0,0,0,0,0,116,104,101,32,86,111,114,112,97,108,32,66,108,97,100,101,0,0,0,0,0,0,0,0,89,111,117,32,108,111,115,101,32,37,100,32,104,105,116,32,112,111,105,110,116,37,115,33,0,0,0,0,0,0,0,0,72,97,115,116,101,32,83,101,108,102,0,0,0,0,0,0,78,111,0,0,0,0,0,0,112,114,111,116,101,99,116,105,111,110,0,0,0,0,0,0,84,105,100,121,105,110,103,32,117,112,46,46,46,0,0,0,102,101,108,108,32,105,110,116,111,32,116,104,101,32,100,114,101,97,100,102,117,108,32,115,108,101,101,112,0,0,0,0,89,111,117,32,99,97,110,39,116,32,115,101,101,32,97,110,121,116,104,105,110,103,33,0,116,111,32,99,111,110,116,105,110,117,101,46,0,0,0,0,89,111,117,114,32,115,105,103,104,116,32,114,101,116,117,114,110,115,44,32,97,110,100,32,101,118,101,114,121,116,104,105,110,103,32,108,111,111,107,115,32,99,114,121,115,116,97,108,45,99,108,101,97,114,33,0,89,111,117,32,115,116,97,110,100,32,98,101,102,111,114,101,32,97,32,115,116,97,116,117,101,46,0,0,0,0,0,0,118,97,109,112,105,114,101,0,97,32,108,97,110,99,101,32,111,102,32,100,101,97,116,104,0,0,0,0,0,0,0,0,32,105,110,99,114,101,97,115,101,32,97,98,105,108,105,116,121,0,0,0,0,0,0,0,89,111,117,114,32,99,104,97,114,109,0,0,0,0,0,0,83,99,97,114,101,32,77,111,110,115,116,101,114,0,0,0,89,101,115,0,0,0,0,0,112,101,114,0,0,0,0,0,89,111,117,32,102,101,101,108,32,99,108,101,118,101,114,33,0,0,0,0,0,0,0,0,100,101,109,111,108,105,115,104,101,100,32,98,121,32,97,110,32,117,110,115,101,101,110,32,97,116,116,97,99,107,101,114,0,0,0,0,0,0,0,0,89,111,117,32,115,116,97,103,103,101,114,32,102,111,114,32,97,32,109,111,109,101,110,116,46,46,46,0,0,0,0,0,89,111,117,114,32,115,105,103,104,116,32,102,97,100,101,115,32,102,111,114,32,97,32,109,111,109,101,110,116,46,46,46,0,0,0,0,0,0,0,0,87,97,115,104,32,89,111,117,114,115,101,108,102,0,0,0,10,68,111,110,101,32,68,105,97,103,110,111,115,105,110,103,46,10,0,0,0,0,0,0,120,111,114,110,0,0,0,0,97,32,102,108,97,105,108,0,89,111,117,114,32,100,101,120,116,101,114,105,116,121,0,0,83,116,114,101,110,103,116,104,0,0,0,0,0,0,0,0,97,112,112,114,97,105,115,101,51,0,0,0,0,0,0,0,97,108,116,0,0,0,0,0,83,112,101,108,108,58,32,32,37,115,32,45,45,32,37,115,46,0,0,0,0,0,0,0,104,105,116,32,98,121,32,104,105,115,32,111,119,110,32,109,97,103,105,99,0,0,0,0,89,111,117,32,102,101,101,108,32,103,114,101,101,100,121,46,46,46,0,0,0,0,0,0,89,111,117,32,112,105,99,107,32,117,112,58,0,0,0,0,32,32,101,120,112,101,114,116,32,101,120,112,108,111,114,101,114,32,32,0,0,0,0,0,84,104,101,114,101,32,105,115,32,97,32,102,111,117,110,116,97,105,110,32,104,101,114,101,46,0,0,0,0,0,0,0,10,45,45,45,45,45,45,45,45,32,69,110,100,32,111,102,32,68,73,65,71,32,100,105,97,103,110,111,115,116,105,99,115,32,45,45,45,45,45,45,45,45,45,10,0,0,0,0,114,111,116,104,101,0,0,0,97,32,108,111,110,103,115,119,111,114,100,0,0,0,0,0,89,111,117,114,32,99,111,110,115,116,105,116,117,116,105,111,110,0,0,0,0,0,0,0,68,101,120,116,101,114,105,116,121,0,0,0,0,0,0,0,87,111,117,108,100,32,121,111,117,32,108,105,107,101,32,116,111,32,115,101,108,108,32,105,116,63,32,0,0,0,0,0,119,116,119,0,0,0,0,0,84,104,101,32,114,97,121,32,104,105,116,115,32,116,104,101,32,37,115,46,0,0,0,0,97,116,116,97,99,107,101,100,32,98,121,32,97,32,114,101,118,111,108,116,105,110,103,32,100,101,109,111,110,0,0,0,89,111,117,32,102,101,101,108,32,99,108,101,118,101,114,33,0,0,0,0,0,0,0,0,70,97,105,108,117,114,101,32,105,110,32,112,111,115,105,116,105,111,110,112,108,97,121,101,114,0,0,0,0,0,0,0,89,111,117,32,104,97,118,101,32,102,111,117,110,100,32,97,110,32,101,120,112,114,101,115,115,32,101,108,101,118,97,116,111,114,32,103,111,105,110,103,32,100,111,119,110,46,0,0,37,100,32,9,37,99,32,9,37,115,10,0,0,0,0,0,111,115,101,113,117,105,112,0,97,32,98,97,116,116,108,101,32,97,120,101,0,0,0,0,89,111,117,114,32,119,105,115,100,111,109,0,0,0,0,0,70,105,114,101,32,82,101,115,105,115,116,97,110,99,101,0,73,116,32,105,115,32,119,111,114,116,104,32,37,100,32,103,111,108,100,32,112,105,101,99,101,115,32,116,111,32,117,115,46,0,0,0,0,0,0,0,115,117,109,0,0,0,0,0,115,112,117,108,118,101,114,105,122,101,0,0,0,0,0,0,107,105,108,108,101,100,32,98,121,32,97,32,115,116,117,112,105,100,32,97,99,116,32,111,102,32,102,114,117,115,116,114,97,116,105,111,110,0,0,0,89,111,117,32,98,101,99,111,109,101,32,100,105,122,122,121,33,0,0,0,0,0,0,0,89,111,117,32,104,97,118,101,32,102,111,117,110,100,32,97,110,32,101,120,112,114,101,115,115,32,101,108,101,118,97,116,111,114,32,103,111,105,110,103,32,117,112,46,0,0,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,0,0,0,0,0,0,104,111,98,103,111,98,108,105,110,0,0,0,0,0,0,0,108,97,109,97,32,110,111,98,101,0,0,0,0,0,0,0,97,32,100,97,103,103,101,114,0,0,0,0,0,0,0,0,89,111,117,114,32,105,110,116,101,108,108,105,103,101,110,99,101,0,0,0,0,0,0,0,71,105,97,110,116,32,83,116,114,101,110,103,116,104,0,0,84,104,105,115,32,105,115,32,97,110,32,101,120,99,101,108,108,101,110,116,32,115,116,111,110,101,46,0,0,0,0,0,103,101,110,0,0,0,0,0,84,104,101,114,101,32,105,115,110,39,116,32,97,32,99,104,101,115,116,32,116,111,32,111,112,101,110,32,104,101,114,101,46,0,0,0,0,0,0,0,100,105,114,101,99,116,105,111,110,0,0,0,0,0,0,0,115,108,105,112,112,101,100,32,105,110,32,97,32,118,111,108,99,97,110,111,32,115,104,97,102,116,0,0,0,0,0,0,89,111,117,32,102,101,101,108,32,99,104,97,114,105,115,109,97,116,105,99,33,0,0,0,65,108,97,115,44,32,121,111,117,32,104,97,118,101,32,100,105,101,100,46,0,0,0,0,85,112,0,0,0,0,0,0,97,32,109,97,115,115,105,118,101,32,116,104,114,111,110,101,0,0,0,0,0,0,0,0,10,106,32,9,79,98,106,101,99,116,32,9,78,97,109,101,10,0,0,0,0,0,0,0,102,111,114,118,97,108,97,107,97,0,0,0,0,0,0,0,97,32,115,112,101,97,114,0,116,114,121,32,116,111,32,115,97,118,101,32,104,101,114,46,32,32,84,105,109,101,32,97,103,111,32,121,111,117,32,104,101,97,114,100,32,111,102,32,97,32,108,97,110,100,32,111,102,32,103,114,101,97,116,32,100,97,110,103,101,114,32,97,110,100,32,111,112,112,111,114,116,117,110,105,116,121,46,32,32,0,0,0,0,0,0,0,89,111,117,114,32,115,116,114,101,110,103,116,104,0,0,0,72,111,108,100,32,77,111,110,115,116,101,114,0,0,0,0,32,115,111,114,114,121,33,0,74,117,115,116,32,111,110,101,32,109,111,109,101,110,116,32,112,108,101,97,115,101,46,46,46,0,0,0,0,0,0,0,115,112,104,0,0,0,0,0,32,32,89,111,117,32,102,101,101,108,32,117,110,101,97,115,121,46,0,0,0,0,0,0,102,114,105,101,100,32,98,121,32,97,110,32,101,108,101,99,116,114,105,99,32,115,104,111,99,107,0,0,0,0,0,0,87,111,119,33,32,32,89,111,117,32,102,101,101,108,32,103,114,101,97,116,33,0,0,0,60,112,62,87,101,108,99,111,109,101,32,116,111,32,116,104,101,32,103,97,109,101,32,111,102,32,85,108,97,114,110,46,32,32,65,116,32,116,104,105,115,32,109,111,109,101,110,116,44,32,121,111,117,32,102,97,99,101,32,97,32,103,114,101,97,116,32,112,114,111,98,108,101,109,46,32,32,0,0,0,89,111,117,32,119,101,110,116,32,100,111,119,110,32,116,111,32,108,101,118,101,108,32,37,100,33,0,0,0,0,0,0,84,104,101,114,101,32,105,115,32,97,32,99,105,114,99,117,108,97,114,32,115,116,97,105,114,99,97,115,101,32,104,101,114,101,46,0,0,0,0,0,10,79,98,106,101,99,116,32,108,105,115,116,10,10,0,0,114,0,0,0,0,0,0,0,119,114,97,105,116,104,0,0,97,32,116,119,111,45,104,97,110,100,101,100,32,115,119,111,114,100,0,0,0,0,0,0,32,51,0,0,0,0,0,0,89,111,117,32,102,101,108,108,32,105,110,116,111,32,97,32,112,105,116,32,108,101,97,100,105,110,103,32,115,116,114,97,105,103,104,116,32,116,111,32,72,69,76,76,33,0,0,0,72,105,116,32,112,111,105,110,116,115,58,32,37,50,108,100,40,37,50,108,100,41,10,0,84,105,109,101,32,83,116,111,112,0,0,0,0,0,0,0,72,69,76,80,33,32,117,110,107,110,111,119,110,32,99,111,109,109,97,110,100,0,0,0,87,111,119,33,32,101,32,61,32,109,99,94,50,33,0,0,109,107,119,0,0,0,0,0,32,32,89,111,117,32,102,101,101,108,32,110,101,114,118,111,117,115,46,0,0,0,0,0,100,114,97,110,107,32,115,111,109,101,32,112,111,105,115,111,110,111,117,115,32,119,97,116,101,114,0,0,0,0,0,0,89,111,117,32,102,101,101,108,32,109,111,114,101,32,115,101,108,102,45,99,111,110,102,105,100,101,110,116,33,0,0,0,89,111,117,32,97,114,101,32,110,111,119,32,84,104,101,32,67,114,101,97,116,111,114,33,0,0,0,0,0,0,0,0,89,111,117,39,114,101,32,115,116,97,110,100,105,110,103,32,97,116,32,116,104,101,32,116,111,112,32,111,102,32,97,32,112,105,116,46,0,0,0,0,37,115,10,0,0,0,0,0,118,105,111,108,101,116,32,102,117,110,103,117,115,0,0,0,85,109,97,112,115,0,0,0,97,32,115,117,110,115,119,111,114,100,0,0,0,0,0,0,97,110,100,32,105,116,32,108,101,97,100,115,32,115,116,114,97,105,103,104,116,32,116,111,32,72,69,76,76,33,0,0,76,101,97,118,101,0,0,0,89,111,117,32,104,97,118,101,32,98,101,101,110,32,101,110,118,101,108,111,112,101,100,32,98,121,32,116,104,101,32,122,111,110,101,32,111,102,32,110,111,116,104,105,110,103,110,101,115,115,33,0,0,0,0,0,67,104,97,114,109,0,0,0,89,111,117,32,100,111,32,110,111,116,32,111,119,101,32,97,110,121,32,116,97,120,101,115,46,0,0,0,0,0,0,0,89,111,117,32,102,101,101,108,32,108,105,107,101,32,100,97,110,99,105,110,103,33,0,0,109,102,105,0,0,0,0,0,115,108,101,0,0,0,0,0,115,0,0,0,0,0,0,0,102,101,108,108,32,116,104,114,111,117,103,104,32,97,32,116,114,97,112,32,100,111,111,114,0,0,0,0,0,0,0,0,89,111,117,32,102,101,101,108,32,115,116,114,97,110,103,101,32,102,111,114,32,97,32,109,111,109,101,110,116,46,0,0,87,101,108,99,111,109,101,32,116,111,32,108,101,118,101,108,32,37,100,33,0,0,0,0,82,117,98,0,0,0,0,0,32,37,50,49,115,10,0,0,122,105,108,108,101,114,0,0,66,101,115,115,109,97,110,39,115,32,102,108,97,105,108,105,110,103,32,104,97,109,109,101,114,0,0,0,0,0,0,0,44,32,117,110,102,111,114,116,117,110,97,116,101,108,121,44,32,105,116,32,105,115,32,111,117,116,32,111,102,32,111,114,100,101,114,46,0,0,0,0,83,112,105,114,105,116,32,80,114,111,116,101,99,116,105,111,110,0,0,0,0,0,0,0,89,111,117,32,112,114,101,115,101,110,116,108,121,32,111,119,101,32,37,100,32,103,112,32,105,110,32,116,97,120,101,115,46,0,0,0,0,0,0,0,89,111,117,32,110,111,119,32,102,101,101,108,32,109,111,114,101,32,99,111,110,102,105,100,101,110,116,32,116,104,97,116,32,121,111,117,32,99,97,110,32,102,105,110,100,32,116,104,101,32,112,111,116,105,111,110])
.concat([32,105,110,32,116,105,109,101,33,0,0,0,0,0,0,0,116,101,108,0,0,0,0,0,97,114,109,111,114,0,0,0,102,101,108,108,32,116,104,114,111,117,103,104,32,97,32,116,114,97,112,32,100,111,111,114,32,116,111,32,72,69,76,76,0,0,0,0,0,0,0,0,89,111,117,32,102,101,101,108,32,109,117,99,104,32,109,111,114,101,32,115,107,105,108,108,102,117,108,33,0,0,0,0,32,101,116,104,101,114,101,97,108,32,103,117,97,114,100,105,97,110,32,0,0,0,0,0,89,111,117,32,102,105,110,100,32,97,32,98,114,97,115,115,32,108,97,109,112,46,0,0,32,101,110,108,105,103,104,116,101,110,109,101,110,116,0,0,37,45,49,48,115,0,0,0,118,111,114,116,101,120,0,0,97,32,115,119,111,114,100,32,111,102,32,115,108,97,115,104,105,110,103,0,0,0,0,0,89,111,117,32,102,101,108,108,32,105,110,116,111,32,97,32,112,105,116,33,32,32,89,111,117,32,115,117,102,102,101,114,32,37,100,32,104,105,116,32,112,111,105,110,116,37,115,32,100,97,109,97,103,101,46,0,85,110,100,101,97,100,32,80,114,111,116,101,99,116,105,111,110,0,0,0,0,0,0,0,32,40,67,104,101,97,116,101,114,41,0,0,0,0,0,0,89,111,117,32,110,111,119,32,102,101,101,108,32,108,105,107,101,32,97,32,98,111,114,110,32,108,101,97,100,101,114,33,0,0,0,0,0,0,0,0,115,116,112,0,0,0,0,0,89,111,117,32,102,101,101,108,32,119,105,105,105,101,101,101,101,101,114,114,114,114,114,100,32,97,108,108,32,111,118,101,114,33,32,0,0,0,0,0,102,111,114,0,0,0,0,0,101,114,97,115,101,100,32,98,121,32,97,32,119,97,121,119,97,114,100,32,102,105,110,103,101,114,0,0,0,0,0,0,89,111,117,32,102,101,101,108,32,98,101,116,116,101,114,46,0,0,0,0,0,0,0,0,83,105,110,99,101,32,121,111,117,32,97,114,101,32,71,82,69,69,68,89,32,97,115,32,119,101,108,108,32,97,115,32,97,32,67,72,69,65,84,69,82,44,32,73,32,99,97,110,110,111,116,32,97,108,108,111,119,32,116,104,105,115,32,103,97,109,101,0,0,0,0,0,32,32,32,116,105,109,101,32,103,117,97,114,100,105,97,110,32,32,32,0,0,0,0,0,83,105,116,0,0,0,0,0,109,101,116,97,109,111,114,112,104,0,0,0,0,0,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,10,0,0,0,0,0,101,108,118,101,110,32,99,104,97,105,110,0,0,0,0,0,32,114,97,105,115,101,32,108,101,118,101,108,0,0,0,0,89,111,117,32,102,101,108,108,32,105,110,111,32,97,32,112,105,116,33,32,32,65,32,112,111,111,114,32,109,111,110,115,116,101,114,32,99,117,115,104,105,111,110,115,32,121,111,117,114,32,102,97,108,108,33,0,83,116,101,97,108,116,104,0,32,40,87,73,90,65,82,68,41,0,0,0,0,0,0,0,84,104,101,32,116,97,115,107,32,98,101,102,111,114,101,32,121,111,117,32,110,111,119,32,115,101,101,109,115,32,118,101,114,121,32,97,116,116,97,105,110,97,98,108,101,33,0,0,104,108,100,0,0,0,0,0,98,97,99,107,0,0,0,0,107,105,108,108,101,100,32,104,105,115,32,102,97,109,105,108,121,32,97,110,100,32,99,111,109,109,105,116,116,101,100,32,115,117,105,99,105,100,101,0,32,121,111,117,32,119,97,107,101,32,117,112,46,0,0,0,32,32,119,97,116,101,114,32,103,117,97,114,100,105,97,110,32,32,32,0,0,0,0,0,80,114,121,32,74,101,119,101,108,115,0,0,0,0,0,0,103,101,108,97,116,105,110,111,117,115,32,99,117,98,101,0,115,112,101,108,108,35,32,32,110,97,109,101,32,32,32,32,32,32,32,32,32,32,32,100,101,115,99,114,105,112,116,105,111,110,10,0,0,0,0,0,89,111,117,32,97,114,101,32,106,111,108,116,101,100,32,98,121,32,97,110,32,101,108,101,99,116,114,105,99,32,115,104,111,99,107,33,0,0,0,0,97,32,115,104,105,101,108,100,0,0,0,0,0,0,0,0,89,111,117,32,102,108,111,97,116,32,114,105,103,104,116,32,111,118,101,114,32,116,104,101,32,112,105,116,46,0,0,0,123,34,116,101,120,116,34,58,34,68,114,105,110,107,34,44,34,97,99,116,105,111,110,34,58,34,113,117,97,102,102,34,125,0,0,0,0,0,0,0,50,54,32,77,97,114,32,50,48,48,52,0,0,0,0,0,83,111,114,114,121,32,98,117,116,32,116,104,105,115,32,99,108,97,115,115,32,104,97,115,32,97,32,112,114,101,114,101,113,117,105,115,105,116,101,32,111,102,32,73,110,116,114,111,100,117,99,116,105,111,110,32,116,111,32,87,105,122,97,114,100,114,121,0,0,0,0,0,115,99,97,0,0,0,0,0,89,111,117,32,103,111,32,37,115,119,97,114,100,32,105,110,32,116,105,109,101,32,98,121,32,37,100,32,109,111,98,117,108,37,115,0,0,0,0,0,107,105,108,108,101,100,32,98,121,32,97,32,112,114,111,116,101,99,116,101,100,32,115,97,118,101,32,102,105,108,101,0,89,111,117,32,102,97,108,108,32,97,115,108,101,101,112,46,46,46,0,0,0,0,0,0,32,32,32,102,105,114,101,32,103,117,97,114,100,105,97,110,32,32,32,0,0,0,0,0,32,112,114,97,99,116,105,99,101,100,32,101,120,112,108,111,114,101,114,0,0,0,0,0,84,104,101,114,101,32,105,115,32,37,115,32,104,101,114,101,46,0,0,0,0,0,0,0,101,108,102,0,0,0,0,0,10,83,112,101,108,108,32,108,105,115,116,58,10,10,0,0,115,116,97,105,110,108,101,115,115,32,112,108,97,116,101,32,97,114,109,111,114,0,0,0,84,104,101,32,115,116,97,105,114,115,32,100,111,110,39,116,32,103,111,32,100,111,119,110,33,0,0,0,0,0,0,0,123,34,116,101,120,116,34,58,34,69,97,116,34,44,34,97,99,116,105,111,110,34,58,34,101,97,116,34,125,0,0,0,51,0,0,0,0,0,0,0,84,104,101,32,116,97,115,107,32,98,101,102,111,114,101,32,121,111,117,32,110,111,119,32,115,101,101,109,115,32,109,111,114,101,32,97,116,116,97,105,110,97,98,108,101,33,0,0,102,103,114,0,0,0,0,0,89,111,117,32,114,101,97,100,32,97,32,115,99,114,111,108,108,32,111,102,32,37,115,46,0,0,0,0,0,0,0,0,99,97,117,103,104,116,32,98,121,32,116,104,101,32,103,114,101,101,100,121,32,99,104,101,97,116,101,114,32,99,104,101,99,107,101,114,32,116,114,97,112,0,0,0,0,0,0,0,89,111,117,32,100,114,105,110,107,32,97,32,112,111,116,105,111,110,32,111,102,32,37,115,46,0,0,0,0,0,0,0,89,111,117,32,102,105,110,100,32,37,100,32,103,111,108,100,32,112,105,101,99,101,37,115,46,0,0,0,0,0,0,0,32,32,32,97,105,114,32,103,117,97,114,100,105,97,110,32,32,32,32,0,0,0,0,0,69,97,116,0,0,0,0,0,119,104,105,116,101,32,100,114,97,103,111,110,0,0,0,0,10,65,118,97,105,108,97,98,108,101,32,115,99,114,111,108,108,115,58,10,10,0,0,0,112,108,97,116,101,32,97,114,109,111,114,0,0,0,0,0,84,104,101,32,115,116,97,105,114,115,32,108,101,97,100,32,116,111,32,97,32,100,101,97,100,32,101,110,100,33,0,0,123,34,116,101,120,116,34,58,34,82,101,97,100,34,44,34,97,99,116,105,111,110,34,58,34,114,101,97,100,115,99,114,34,125,0,0,0,0,0,0,49,46,54,0,0,0,0,0,89,111,117,32,102,101,101,108,32,109,117,99,104,32,115,116,114,111,110,103,101,114,33,0,102,108,111,0,0,0,0,0,89,111,117,32,119,111,117,108,100,110,39,116,32,119,97,110,116,32,116,111,32,113,117,97,102,102,32,116,104,97,116,44,32,119,111,117,108,100,32,121,111,117,63,32,0,0,0,0,32,32,0,0,0,0,0,0,107,105,108,108,101,100,32,98,121,32,97,110,32,111,108,100,32,115,97,118,101,32,102,105,108,101,0,0,0,0,0,0,32,32,0,0,0,0,0,0,32,32,101,97,114,116,104,32,103,117,97,114,100,105,97,110,32,32,32,0,0,0,0,0,89,111,117,32,102,105,110,100,32,97,32,102,111,114,116,117,110,101,32,99,111,111,107,105,101,46,0,0,0,0,0,0,103,110,111,109,101,0,0,0,121,101,116,105,0,0,0,0,37,50,48,115,10,0,0,0,115,112,108,105,110,116,32,109,97,105,108,0,0,0,0,0,84,104,101,32,115,116,97,105,114,115,32,100,111,110,39,116,32,103,111,32,117,112,33,0,102,103,101,116,115,0,0,0,123,34,116,101,120,116,34,58,34,85,110,119,105,101,108,100,34,44,34,97,99,116,105,111,110,34,58,34,117,110,119,105,101,108,100,34,125,0,0,0,84,104,101,32,65,100,100,105,99,116,105,111,110,32,111,102,32,85,108,97,114,110,32,45,45,32,86,101,114,115,105,111,110,32,37,115,46,37,115,32,40,37,115,41,10,68,105,102,102,105,99,117,108,116,121,32,108,101,118,101,108,32,37,100,0,0,0,0,0,0,0,0,83,111,114,114,121,32,98,117,116,32,116,104,105,115,32,99,108,97,115,115,32,104,97,115,32,97,32,112,114,101,114,101,113,117,105,115,105,116,101,32,111,102,32,70,105,103,104,116,101,114,39,115,32,84,114,97,105,110,105,110,103,32,73,0,103,108,111,0,0,0,0,0,32,108,105,102,101,32,112,114,111,116,101,99,116,105,111,110,0,0,0,0,0,0,0,0,107,105,108,108,101,100,32,98,121,32,97,32,109,105,115,115,105,110,103,32,115,97,118,101,32,102,105,108,101,0,0,0,32,115,101,101,32,105,110,118,105,115,105,98,108,101,0,0,32,103,114,101,97,116,32,101,118,105,108,32,109,97,115,116,101,114,32,0,0,0,0,0,89,111,117,32,102,105,110,100,32,97,32,98,111,111,107,46,0,0,0,0,0,0,0,0,97,32,104,97,110,100,115,111,109,101,44,32,106,101,119,101,108,45,101,110,99,114,117,115,116,101,100,32,116,104,114,111,110,101,0,0,0,0,0,0,116,114,111,108,108,0,0,0,10,65,118,97,105,108,97,98,108,101,32,112,111,116,105,111,110,115,58,10,10,0,0,0,115,116,117,100,100,101,100,32,108,101,97,116,104,101,114,32,97,114,109,111,114,0,0,0,115,101,101,109,115,32,116,111,32,104,97,118,101,32,97,110,121,32,101,102,102,101,99,116,46,32,32,89,111,117,32,115,101,110,115,101,32,116,104,97,116,32,115,104,101,32,105,115,32,105,110,32,109,111,114,116,97,108,32,100,97,110,103,101,114,32,97,110,100,32,121,111,117,32,109,117,115,116,32,0,84,104,105,115,32,119,97,116,101,114,32,110,101,101,100,115,32,115,111,97,112,32,45,45,32,116,104,101,32,100,105,114,116,32,100,105,100,110,39,116,32,99,111,109,101,32,111,102,102,46,0,0,0,0,0,0,114,0,0,0,0,0,0,0,123,34,116,101,120,116,34,58,34,87,105,101,108,100,34,44,34,97,99,116,105,111,110,34,58,34,119,105,101,108,100,34,125,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,89,111,117,32,102,101,101,108,32,115,116,114,111,110,103,101,114,33,0,0,0,0,0,0,100,114,108,0,0,0,0,0,32,72,0,0,0,0,0,0,67,79,75,69,68,0,0,0,32,112,117,108,118,101,114,105,122,97,116,105,111,110,0,0,116,114,97,112,112,101,100,32,105,110,32,115,111,108,105,100,32,114,111,99,107,0,0,0,80,65,68,0,0,0,0,0,32,112,111,105,115,111,110,0,83,76,65,89,0,0,0,0,71,105,118,101,32,77,111,110,101,121,0,0,0,0,0,0,86,79,82,80,0,0,0,0,32,32,32,32,101,118,105,108,32,109,97,115,116,101,114,32,32,32,32,0,0,0,0,0,69,76,86,69,78,0,0,0,73,103,110,111,114,101,0,0,83,76,65,83,72,0,0,0,99,101,110,116,97,117,114,0,37,54,100,32,32,37,51,100,32,32,32,37,54,108,100,10,0,0,0,0,0,0,0,0,68,69,86,73,67,69,0,0,114,105,110,103,32,109,97,105,108,0,0,0,0,0,0,0,32,50,0,0,0,0,0,0,83,84,65,70,70,0,0,0,89,111,117,32,97,114,101,32,110,111,119,32,99,108,101,97,110,46,0,0,0,0,0,0,40,115,117,109,32,37,117,32,111,102,32,108,101,118,101,108,32,37,100,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,115,97,118,101,100,32,115,117,109,32,37,117,41,0,0,0,0,0,0,0,0,87,65,78,68,0,0,0,0,84,65,76,73,83,77,65,78,0,0,0,0,0,0,0,0,123,34,116,101,120,116,34,58,34,84,97,107,101,32,111,102,102,34,44,34,97,99,116,105,111,110,34,58,34,116,97,107,101,111,102,102,34,125,0,0,84,104,101,32,115,116,117,102,102,32,121,111,117,32,97,114,101,32,99,97,114,114,121,105,110,103,32,112,114,101,115,101,110,116,108,121,32,119,101,105,103,104,115,32,37,100,32,112,111,117,110,100,37,115,46,0,83,111,114,114,121,32,98,117,116,32,116,104,97,116,32,99,108,97,115,115,32,105,115,32,102,105,108,108,101,100,46,0,108,105,116,0,0,0,0,0,10,45,45,45,45,45,45,45,45,32,66,101,103,105,110,110,105,110,103,32,111,102,32,68,73,65,71,32,100,105,97,103,110,111,115,116,105,99,115,32,45,45,45,45,45,45,45,45,45,10,10,0,0,0,0,0,76,65,77,80,0,0,0,0,32,97,110,110,105,104,105,108,97,116,105,111,110,0,0,0,97,32,119,105,110,110,101,114,0,0,0,0,0,0,0,0,85,82,78,0,0,0,0,0,32,99,117,114,101,32,100,105,97,110,116,104,114,111,114,105,116,105,115,0,0,0,0,0,78,69,71,65,84,69,0,0,68,82,65,71,83,76,65,89,0,0,0,0,0,0,0,0,32,32,32,32,100,101,109,105,45,103,111,114,103,111,110,32,32,32,32,0,0,0,0,0,67,85,66,69,85,78,68,69,65,68,0,0,0,0,0,0,68,101,115,101,99,114,97,116,101,0,0,0,0,0,0,0,72,65,78,68,0,0,0,0,105,99,101,32,108,105,122,97,114,100,0,0,0,0,0,0,37,115,47,37,115,0,0,0,32,37,51,100,32,32,37,51,100,32,0,0,0,0,0,0,69,76,86,68,79,87,78,0,108,101,97,116,104,101,114,32,97,114,109,111,114,0,0,0,69,76,86,85,80,0,0,0,84,104,101,32,119,97,116,101,114,32,98,117,114,110,115,32,108,105,107,101,32,97,99,105,100,33,32,32,89,111,117,32,108,111,115,101,32,37,100,32,104,105,116,32,112,111,105,110,116,37,115,33,0,0,0,0,37,54,108,100,32,103,112,0,79,72,32,78,79,33,33,33,33,32,73,78,84,69,82,78,65,76,32,77,69,77,79,82,89,32,67,79,82,82,85,80,84,73,79,78,33,33,33,33,0,0,0,0,0,0,0,0,65,115,32,116,104,101,32,99,97,110,99,101,108,108,97,116,105,111,110,32,116,97,107,101,115,32,101,102,102,101,99,116,44,32,121,111,117,32,104,101,97,114,32,97,32,103,114,101,97,116,32,101,97,114,116,104,32,115,104,97,107,105,110,103,32,98,108,97,115,116,33,0,79,82,66,0,0,0,0,0,123,34,116,101,120,116,34,58,34,87,101,97,114,34,44,34,97,99,116,105,111,110,34,58,34,119,101,97,114,34,125,0,89,111,117,32,97,114,101,110,39,116,32,119,101,97,114,105,110,103,32,97,110,121,116,104,105,110,103,46,0,0,0,0,116,97,107,101,95,99,111,117,114,115,101,0,0,0,0,0,100,114,121,0,0,0,0,0,76,73,70,69,80,82,79,84,0,0,0,0,0,0,0,0,100,101,120,0,0,0,0,0,46,41,32,32,32,37,100,32,103,111,108,100,32,112,105,101,99,101,37,115,46,0,0,0,84,77,80,0,0,0,0,0,84,104,101,114,101,39,115,32,110,111,116,104,105,110,103,32,111,110,32,105,116,32,116,111,32,114,101,97,100,46,0,0,32,114,101,109,111,118,101,32,99,117,114,115,101,0,0,0,102,101,108,108,32,105,110,116,111,32,97,32,112,105,116,32,116,111,32,72,69,76,76,0,83,84,82,69,88,84,82,65,0,0,0,0,0,0,0,0,32,105,110,115,116,97,110,116,32,104,101,97,108,105,110,103,0,0,0,0,0,0,0,0,87,84,87,0,0,0,0,0,83,80,72,67,65,83,84,0,32,32,32,109,97,115,116,101,114,32,103,111,114,103,111,110,32,32,32,0,0,0,0,0,70,73,76,76,82,79,79,77,0,0,0,0,0,0,0,0,80,114,97,121,0,0,0,0,115,112,101,108,108,32,99,97,115,116,101,114,32,40,116,104,97,116,39,115,32,121,111,117,41,0,0,0,0,0,0,0,83,69,69,73,78,86,73,83,73,66,76,69,0,0,0,0,104,101,108,108,32,104,111,117,110,100,0,0,0,0,0,0,89,111,117,32,103,101,116,32,115,116,117,99,107,32,105,110,32,121,111,117,114,32,111,119,110,32,119,101,98,33,32,0,72,65,76,70,68,65,77,0,37,49,57,115,32,32,37,50,100,32,32,37,51,100,32,0,99,104,97,105,110,32,109,97,105,108,0,0,0,0,0,0,89,111,117,32,102,97,108,108,32,97,115,108,101,101,112,33,32,0,0,0,0,0,0,0,73,78,70,69,69,66,76,69,77,69,78,84,0,0,0,0,84,104,101,32,102,111,117,110,116,97,105,110,115,32,98,117,98,98,108,105,110,103,32,115,108,111,119,108,121,32,113,117,105,101,116,101,110,115,46,0,86,53,0,0,0,0,0,0,84,104,101,114,101,32,119,97,115,110,39,116,32,97,110,121,116,104,105,110,103,32,116,104,101,114,101,33,0,0,0,0,67,76,85,77,83,73,78,69,83,83,0,0,0,0,0,0,123,34,99,111,100,101,34,58,37,100,44,34,110,97,109,101,34,58,34,37,115,34,44,34,111,112,116,105,111,110,115,34,58,91,0,0,0,0,0,0,89,111,117,114,32,97,114,109,111,114,32,105,115,32,111,102,102,46,0,0,0,0,0,0,53,32,109,111,98,117,108,115,0,0,0,0,0,0,0,0,116,104,101,114,101,39,115,32,97,32,119,97,108,108,32,116,104,101,114,101,32,97,108,114,101,97,100,121,33,0,0,0,118,112,114,0,0,0,0,0,68,82,65,73,78,83,84,82,69,78,71,84,72,0,0,0,116,104,101,114,101,39,115,32,115,111,109,101,116,104,105,110,103,32,116,104,101,114,101,32,97,108,114,101,97,100,121,33,0,0,0,0,0,0,0,0,76,65,85,71,72,73,78,71,0,0,0,0,0,0,0,0,89,111,117,32,99,97,110,39,116,32,114,101,97,100,32,97,110,121,116,104,105,110,103,32,119,104,101,110,32,121,111,117,39,114,101,32,98,108,105,110,100,33,0,0,0,0,0,0,89,111,117,32,99,97,110,39,116,32,119,105,101,108,100,32,121,111,117,114,32,37,115,32,119,104,105,108,101,32,121,111,117,39,114,101,32,119,101,97,114,105,110,103,32,105,116,33,0,0,0,0,0,0,0,0,32,37,100,0,0,0,0,0,32,105,100,101,110,116,105,102,121,0,0,0,0,0,0,0,102,101,108,108,32,105,110,116,111,32,97,32,112,105,116,0,116,104,101,114,101,39,115,32,97,32,109,111,110,115,116,101,114,32,116,104,101,114,101,33,0,0,0,0,0,0,0,0,73,84,67,72,73,78,71,0,32,116,114,101,97,115,117,114,101,32,102,105,110,100,105,110,103,0,0,0,0,0,0,0,121,111,117,32,99,97,110,39,116,32,109,97,107,101,32,97,32,119,97,108,108,32,116,104,101,114,101,33,0,0,0,0,83,84,69,65,76,84,72,0,89,111,117,32,115,101,110,115,101,32,102,97,105,108,117,114,101,33,0,0,0,0,0,0,83,72,73,69,76,68,32,0,32,32,112,114,97,99,116,105,99,101,100,32,103,111,114,103,111,110,32,0,0,0,0,0,32,32,84,104,101,114,101,32,119,105,108,108,32,98,101,32,110,111,32,109,111,114,101,32,37,115,115,46,0,0,0,0,85,78,68,69,65,68,80,82,79,0,0,0,0,0,0,0,97,99,116,95,111,110,95,111,98,106,101,99,116,0,0,0,32,101,110,99,104,97,110,116,32,119,101,97,112,111,110,0,37,45,50,100,41,32,71,101,110,111,99,105,100,101,100,0,83,80,73,82,73,84,80,82,79,0,0,0,0,0,0,0,98,117,103,98,101,97,114,0,37,45,50,100,41,32,37,115,0,0,0,0,0,0,0,0,76,65,78,67,69,68,69,65,84,72,0,0,0,0,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,0,0,0,0,0,0,112,108,97,116,101,32,109,97,105,108,0,0,0,0,0,0,77,111,110,115,116,101,114,32,110,117,109,98,101,114,115,0,86,79,82,80,65,76,0,0,78,111,116,104,105,110,103,32,115,101,101,109,115,32,116,111,32,104,97,118,101,32,104,97,112,112,101,110,101,100,46,0,86,52,0,0,0,0,0,0,89,111,117,32,99,97,110,39,116,32,97,105,109,32,121,111,117,114,32,109,97,103,105,99,33,0,0,0,0,0,0,0,72,65,82,68,71,65,77,69,0,0,0,0,0,0,0,0,93,125,0,0,0,0,0,0,89,111,117,114,32,115,104,105,101,108,100,32,105,115,32,111,102,102,46,0,0,0,0,0,72,105,115,116,111,114,121,32,111,102,32,85,108,97,114,110,0,0,0,0,0,0,0,0,116,104,101,32,37,115,32,108,111,118,101,115,32,102,105,114,101,32,97,110,100,32,108,105,103,104,116,110,105,110,103,33,0,0,0,0,0,0,0,0,99,107,108,0,0,0,0,0,37,115,32,111,102,37,115,0,78,79,84,72,69,70,84,0,116,104,101,32,100,101,109,111,110,32,105,115,32,116,101,114,114,105,102,105,101,100,32,111,102,32,116,104,101,32,37,115,33,0,0,0,0,0,0,0,66,69,83,83,77,65,78,78,0,0,0,0,0,0,0,0,119,0,0,0,0,0,0,0,32,115,112,101,108,108,32,101,120,116,101,110,115,105,111,110,0,0,0,0,0,0,0,0,104,105,116,32,98,121,32,97,32,100,97,114,116,0,0,0,116,104,101,32,37,115,32,108,111,118,101,115,32,116,104,101,32,119,97,116,101,114,33,0,70,73,82,69,82,69,83,73,83,84,65,78,67,69,0,0,32,102,105,114,101,32,114,101,115,105,115,116,97,110,99,101,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,110,111,114,109,97,108,108,121,32,104,97,112,112,101,110,32,102,114,111,109,32,97,110,32,104,111,110,101,115,116,32,103,97,109,101,44,32,73,32,109,117,115,116,32,97,115,115,117,109,101,32,116,104,97,116,32,121,111,117,32,99,104,101,97,116,101,100,46,0,0,0,0,0,116,104,101,32,37,115,32,108,111,118,101,115,32,116,104,101,32,99,111,108,100,33,0,0,71,73,65,78,84,83,84,82,0,0,0,0,0,0,0,0,116,104,101,32,37,115,32,115,101,101,115,32,116,104,114,111,117,103,104,32,121,111,117,114,32,105,108,108,117,115,105,111,110,115,0,0,0,0,0,0,67,85,66,69,111,102,85,78,68,69,65,68,0,0,0,0,32,32,32,32,32,32,103,111,114,103,111,110,32,32,32,32,32,32,32,0,0,0,0,0,121,111,117,114,32,109,105,115,115,105,108,101,115,32,112,97,115,115,32,114,105,103,104,116,32,116,104,114,111,117,103,104,32,116,104,101,32,37,115,0,72,65,83,84,69,77,79,78,83,84,0,0,0,0,0,0,84,104,101,114,101,32,105,115,32,97,32,104,111,108,121,32,97,108,116,97,114,32,104,101,114,101,46,0,0,0,0,0,116,104,101,32,37,115,32,98,117,114,110,115,32,116,104,114,111,117,103,104,32,116,104,101,32,119,101,98,0,0,0,0,84,73,77,69,83,84,79,80,0,0,0,0,0,0,0,0,97,115,115,97,115,115,105,110,32,98,117,103,0,0,0,0,116,104,101,32,37,115,39,115,32,116,97,105,108,32,99,117,116,115,32,105,116,32,102,114,101,101,32,111,102,32,116,104,101,32,119,101,98,0,0,0,72,79,76,68,77,79,78,83,84,0,0,0,0,0,0,0,32,32,32,77,111,110,115,116,101,114,32,78,97,109,101,32,32,32,32,32,32,76,69,86,32,32,65,67,32,32,32,68,65,77,32,32,65,84,84,32,32,71,79,76,68,32,32,32,72,80,32,32,32,32,32,69,88,80,10,0,0,0,0,0,84,104,101,32,69,121,101,32,111,102,32,76,97,114,110,0,67,97,110,39,116,32,111,112,101,110,32,104,101,108,112,32,102,105,108,101,32,34,37,115,34,32,0,0,0,0,0,0,116,104,101,32,37,115,32,99,97,110,39,116,32,104,101,97,114,32,116,104,101,32,110,111,105,115,101,0,0,0,0,0,32,104,101,97,108,105,110,103,0,0,0,0,0,0,0,0,65,87,65,82,69,78,69,83,83,0,0,0,0,0,0,0,89,111,117,32,110,111,119,32,104,97,118,101,32,105,110,99,114,101,100,105,98,108,101,32,98,117,108,103,105,110,103,32,109,117,115,99,108,101,115,33,0,0,0,0,0,0,0,0,86,51,0,0,0,0,0,0,116,104,101,32,37,115,32,114,101,115,105,115,116,115,0,0,83,67,65,82,69,77,79,78,83,84,32,0,0,0,0,0,123,34,116,101,120,116,34,58,34,68,114,111,112,34,44,34,97,99,116,105,111,110,34,58,34,100,114,111,112,111,98,106,34,125,0,0,0,0,0,0,89,111,117,32,97,114,101,32,110,111,119,32,97,32,119,105,122,97,114,100,46,0,0,0,67,111,110,116,101,109,112,111,114,97,114,121,32,68,97,110,99,101,0,0,0,0,0,0,116,104,101,32,37,115,32,100,111,101,115,110,39,116,32,115,108,101,101,112,0,0,0,0,104,97,115,0,0,0,0,0,32,40,98,101,105,110,103,32,119,111,114,110,41,0,0,0,78,69,71,65,84,69,83,80,73,82,73,84,0,0,0,0,121,111,117,114,32,109,105,115,115,105,108,101,32,98,111,117,110,99,101,115,32,111,102,102,32,116,104,101,32,37,115,0,83,76,65,89,73,78,71,0,115,0,0,0,0,0,0,0,32,103,101,109,32,112,101,114,102,101,99,116,105,111,110,0,115,104,111,116,32,98,121,32,97,110,32,97,114,114,111,119,0,0,0,0,0,0,0,0,116,104,101,32,37,115,32,118,97,112,111,114,105,122,101,115,32,121,111,117,114,32,109,105,115,115,105,108,101,0,0,0,84,69,76,69,70,76,65,71,0,0,0,0,0,0,0,0,32,103,105,97,110,116,32,115,116,114,101,110,103,116,104,0,116,104,101,32,37,115,32,99,97,110,32,115,101,101,32,121,111,117,32,119,105,116,104,32,104,105,115,32,105,110,102,114,97,118,105,115,105,111,110,0,71,76,79,66,69,0,0,0,116,104,101,32,37,115,32,105,115,110,39,116,32,97,102,102,101,99,116,101,100,0,0,0,65,71,71,82,65,86,65,84,69,32,0,0,0,0,0,0,32,97,112,112,114,101,110,116,105,99,101,32,103,111,114,103,111,110,32,0,0,0,0,0,116,104,101,32,37,115,32,105,115,110,39,116,32,97,102,114,97,105,100,32,111,102,32,121,111,117,0,0,0,0,0,0,69,89,69,79,70,76,65,82,78,0,0,0,0,0,0,0,82,101,97,100,0,0,0,0,116,104,101,32,37,115,32,99,104,97,110,103,101,100,32,115,104,97,112,101,32,116,111,32,97,118,111,105,100,32,116,104,101,32,119,101,98,0,0,0,72,65,83,84,69,83,69,76,70,0,0,0,0,0,0,0,122,111,109,98,105,101,0,0,116,104,101,32,119,101,98,32,104,97,100,32,110,111,32,101,102,102,101,99,116,32,111,110,32,116,104,101,32,37,115,0,67,65,78,67,69,76,76,65,84,73,79,78,0,0,0,0,103,111,108,100,0,0,0,0,10,84,111,116,97,108,32,116,121,112,101,115,32,111,102,32,109,111,110,115,116,101,114,115,58,32,37,100,10,10,0,0,114,0,0,0,0,0,0,0,32,32,115,112,101,108,108,32,37,100,32,110,111,116,32,97,118,97,105,108,97,98,108,101,33,0,0,0,0,0,0,0,73,78,86,73,83,73,66,73,76,73,84,89,0,0,0,0,84,104,101,32,119,97,116,101,114,32,109,97,107,101,115,32,121,111,117,32,118,111,109,105,116,46,0,0,0,0,0,0,86,50,0,0,0,0,0,0,84,104,101,32,100,101,109,111,110,32,116,117,114,110,101,100,32,111,110,32,121,111,117,32,97,110,100,32,116,104,101,110,32,118,97,110,105,115,104,101,100,33,0,0,0,0,0,0,67,72,65,82,77,67,79,85,78,84,0,0,0,0,0,0,115,0,0,0,0,0,0,0,89,111,117,32,97,114,101,32,110,111,32,108,111,110,103,101,114,32,97,32,119,105,122,97,114,100,46,0,0,0,0,0,70,97,105,116,104,32,102,111,114,32,84,111,100,97,121,0,78,111,116,104,105,110,103,32,115,101,101,109,115,32,116,111,32,104,97,118,101,32,104,97,112,112,101,110,101,100,46,0,99,97,110,0,0,0,0,0,32,40,119,101,97,112,111,110,32,105,110,32,104,97,110,100,41,0,0,0,0,0,0,0,72,69,82,79,0,0,0,0,115,112,101,108,108,95,115,117,109,0,0,0,0,0,0,0,65,76,84,80,82,79,0,0,32,104,111,108,100,32,109,111,110,115,116,101,114,115,0,0,115,101,108,102,32,45,32,97,110,110,105,104,105,108,97,116,101,100,0,0,0,0,0,0,115,112,101,108,108,95,103,101,110,0,0,0,0,0,0,0,67,79,78,70,85,83,69,0,32,115,116,117,114,100,105,110,101,115,115,0,0,0,0,0,115,112,101,108,108,95,115,112,104,0,0,0,0,0,0,0,67,65,86,69,76,69,86,69,76,0,0,0,0,0,0,0,89,111,117,32,104,97,118,101,32,98,101,101,110,32,101,110,118,101,108,111,112,101,100,32,98,121,32,116,104,101,32,122,111,110,101,32,111,102,32,110,111,116,104,105,110,103,110,101,115,115,33,0,0,0,0,0,66,76,73,78,68,67,79,85,78,84,0,0,0,0,0,0,32,32,32,109,97,115,116,101,114,32,119,97,114,108,111,114,100,32,32,0,0,0,0,0,97,112,112,114,101,110,116,105,99,101,32,101,120,112,108,111,114,101,114,0,0,0,0,0,115,112,101,108,108,95,109,107,119,0,0,0,0,0,0,0,83,84,82,67,79,85,78,84,0,0,0,0,0,0,0,0,89,111,117,32,102,105,110,100,32,97,32,109,97,103,105,99,32,115,99,114,111,108,108,0,32,32,84,104,101,32,37,115,32,99,114,105,110,103,101,115,32,102,114,111,109,32,116,104,101,32,102,108,97,109,101,46,0,0,0,0,0,0,0,0,68,69,88,67,79,85,78,84,0,0,0,0,0,0,0,0,114,117,115,116,32,109,111,110,115,116,101,114,0,0,0,0,115,112,101,108,108,95,116,101,108,0,0,0,0,0,0,0,77,79,82,69,68,65,77,0,97,32,119,97,108,108,0,0,10,10,78,111,119,32,102,111,114,32,116,104,101,32,109,111,110,115,116,101,114,32,100,97,116,97,58,10,10,0,0,0,73,116,32,100,105,100,110,39,116,32,119,111,114,107,46,0,82,69,71,69,78,67,79,85,78,84,69,82,0,0,0,0,115,0,0,0,0,0,0,0,86,49,0,0,0,0,0,0,115,112,101,108,108,95,102,103,114,0,0,0,0,0,0,0,65,77,85,76,69,84,0,0,78,111,32,116,114,97,112,115,32,97,114,101,32,118,105,115,105,98,108,101,46,0,0,0,66,101,104,97,118,105,111,114,97,108,32,80,115,121,99,104,111,108,111,103,121,0,0,0,89,111,117,114,32,104,101,97,114,116,32,115,116,111,112,112,101,100,33,0,0,0,0,0,112,108,121,0,0,0,0,0,32,91,32,37,100,32,93,0,87,73,69,76,68,0,0,0,32,32,84,104,101,32,37,115,32,115,116,114,117,103,103,108,101,115,32,102,111,114,32,97,105,114,32,105,110,32,121,111,117,114,32,102,108,111,111,100,33,0,0,0,0,0,0,0,80,82,79,84,69,67,84,73,79,78,84,73,77,69,0,0,32,89,111,117,32,100,114,111,112,32,37,100,32,103,111,108,100,32,112,105,101,99,101,37,115,46,0,0,0,0,0,0,32,109,97,103,105,99,32,109,97,112,112,105,110,103,0,0,115,117,115,112,101,110,100,101,100,0,0,0,0,0,0,0,115,112,101,108,108,95,100,114,108,0,0,0,0,0,0,0,87,69,65,82,0,0,0,0,32,104,101,114,111,105,115,109,0,0,0,0,0,0,0,0,115,112,101,108,108,95,108,105,116,0,0,0,0,0,0,0,77,79,82,69,68,69,70,69,78,83,69,83,0,0,0,0,65,32,109,101,115,115,97,103,101,32,105,110,115,105,100,101,32,116,104,101,32,99,111,111,107,105,101,32,114,101,97,100,115,58,0,0,0,0,0,0,115,112,101,108,108,95,100,114,121,0,0,0,0,0,0,0,69,67,79,85,78,84,69,82,0,0,0,0,0,0,0,0,32,32,101,120,112,101,114,116,32,119,97,114,108,111,114,100,32,32,32,0,0,0,0,0,32,32,84,104,101,32,37,115,32,103,97,115,112,115,32,102,111,114,32,97,105,114,33,0,69,78,69,82,71,89,0,0,84,97,107,101,0,0,0,0,123,34,115,112,101,108,108,115,34,58,37,108,100,44,34,115,112,101,108,108,77,97,120,34,58,37,108,100,44,34,97,99,34,58,37,108,100,44,34,119,67,108,97,115,115,34,58,37,108,100,44,34,108,101,118,101,108,34,58,37,108,100,44,34,101,120,112,101,114,105,101,110,99,101,34,58,37,108,100,44,34,99,108,97,115,115,34,58,34,37,115,34,44,34,104,112,34,58,37,108,100,44,34,104,112,77,97,120,34,58,37,108,100,44,34,115,116,114,101,110,103,116,104,34,58,37,108,100,44,34,105,110,116,101,108,108,105,103,101,110,99,101,34,58,37,108,100,44,34,119,105,115,100,111,109,34,58,37,108,100,44,34,99,111,110,115,116,105,116,117,116,105,111,110,34,58,37,108,100,44,34,100,101,120,116,101,114,105,116,121,34,58,37,108,100,44,34,99,104,97,114,105,115,109,97,34,58,37,108,100,44,34,108,101,118,101,108,78,97,109,101,34,58,34,37,115,34,44,34,103,111,108,100,34,58,37,108,100,44,34,112,97,99,107,87,101,105,103,104,116,34,58,37,100,44,34,111,117,116,115,116,97,110,100,105,110,103,84,97,120,101,115,34,58,37,108,100,125,0,0,115,112,101,108,108,95,112,108,121,0,0,0,0,0,0,0,83,80,69,76,76,83,0,0,113,117,97,115,105,116,0,0,115,112,101,108,108,95,99,108,100,0,0,0,0,0,0,0,83,80,69,76,76,77,65,88,0,0,0,0,0,0,0,0,97,32,99,108,111,115,101,100,32,100,111,111,114,0,0,0,71,111,111,100,32,76,117,99,107,33,32,32,40,89,111,117,39,114,101,32,103,111,105,110,103,32,116,111,32,110,101,101,100,32,105,116,46,41,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,0,0,0,0,115,112,101,108,108,95,98,97,108,0,0,0,0,0,0,0,66,65,78,75,65,67,67,79,85,78,84,0,0,0,0,0,66,108,101,97,104,33,32,84,104,101,32,119,97,116,101,114,32,116,97,115,116,101,100,32,108,105,107,101,32,115,116,97,108,101,32,103,97,116,111,114,97,100,101,33,32,32,89,111,117,32,108,111,115,101,32,37,100,32,104,105,116,32,112,111,105,110,116,37,115,33,0,0,49,53,0,0,0,0,0,0,73,116,32,100,105,100,110,39,116,32,98,101,108,105,101,118,101,32,116,104,101,32,105,108,108,117,115,105,111,110,115,33,0,0,0,0,0,0,0,0,65,67,0,0,0,0,0,0,123,34,99,111,100,101,34,58,37,100,44,34,110,97,109,101,34,58,34,37,108,100,32,103,111,108,100,32,112,105,101,99,101,37,115,34,44,34,111,112,116,105,111,110,115,34,58,91,0,0,0,0,0,0,0,0,73,116,39,115,32,0,0,0,50,48,32,109,111,98,117,108,115,0,0,0,0,0,0,0,115,112,101,108,108,95,112,104,97,0,0,0,0,0,0,0,99,108,100,0,0,0,0,0,32,37,115,32,111,102,37,115,0,0,0,0,0,0,0,0,87,67,76,65,83,83,0,0,115,112,101,108,108,95,99,114,101,0,0,0,0,0,0,0,82,69,71,69,78,0,0,0,89,111,117,32,100,111,110,39,116,32,104,97,118,101,32,116,104,97,116,32,109,117,99,104,33,0,0,0,0,0,0,0,32,115,116,101,97,108,116,104,0,0,0,0,0,0,0,0,113,117,105,116,0,0,0,0,115,112,101,108,108,95,119,101,98,0,0,0,0,0,0,0,76,69,86,69,76,0,0,0,32,99,111,110,102,117,115,105,111,110,0,0,0,0,0,0,115,112,101,108,108,95,115,115,112,0,0,0,0,0,0,0,69,88,80,69,82,73,69,78,67,69,0,0,0,0,0,0,115,112,101,108,108,95,115,108,101,0,0,0,0,0,0,0,71,79,76,68,0,0,0,0,32,32,110,111,118,105,99,101,32,119,97,114,108,111,114,100,32,32,32,0,0,0,0,0,115,112,101,108,108,95,109,108,101,0,0,0,0,0,0,0,72,80,0,0,0,0,0,0,68,114,105,110,107,0,0,0,100,105,114,101,99,116,105,111,110,0,0,0,0,0,0,0,72,80,77,65,88,0,0,0,108,101,109,109,105,110,103,0,110,121,109,112,104,0,0,0,78,111,116,104,105,110,103,32,104,97,112,112,101,110,115,46,32,32,89,111,117,32,115,101,101,109,32,105,110,101,120,112,101,114,105,101,110,99,101,100,46,0,0,0,0,0,0,0,67,72,65,82,73,83,77,65,0,0,0,0,0,0,0,0,97,110,32,111,112,101,110,32,100,111,111,114,0,0,0,0,42,0,0,0,0,0,0,0,77,97,112,32,37,115,32,32,32,32,108,101,118,101,108,32,37,100,10,0,0,0,0,0,73,32,99,97,110,39,116,32,99,114,101,97,116,101,32,116,104,101,32,115,99,111,114,101,98,111,97,114,100,46,0,0,73,116,32,100,105,100,110,39,116,32,119,111,114,107,33,0,68,69,88,84,69,82,73,84,89,0,0,0,0,0,0,0,79,72,32,77,89,32,71,79,68,33,33,32,89,111,117,32,104,97,118,101,32,99,97,117,103,104,116,32,116,104,101,32,42,100,114,101,97,100,102,117,108,32,115,108,101,101,112,42,33,0,0,0,0,0,0,0,49,52,0,0,0,0,0,0,73,116,32,100,105,100,110,39,116,32,115,101,101,109,32,116,111,32,119,111,114,107,46,0,67,79,78,83,84,73,84,85,84,73,79,78,0,0,0,0,123,34,105,110,112,117,116,84,121,112,101,34,58,34,37,115,34,44,34,99,97,108,108,98,97,99,107,34,58,34,37,115,34,44,34,111,112,116,105,111,110,115,34,58,91,37,115,93,125,0,0,0,0,0,0,0,89,111,117,32,100,111,110,39,116,32,107,110,111,119,32,104,111,119,32,116,111,32,116,101,108,101,112,111,114,116,32,121,101,116,46,0,0,0,0,0,65,112,112,108,105,101,100,32,87,105,122,97,114,100,114,121,0,0,0,0,0,0,0,0,89,111,117,32,99,97,115,116,58,32,37,115,46,0,0,0,98,97,108,0,0,0,0,0,32,37,115,0,0,0,0,0,87,73,83,68,79,77,0,0,65,108,115,111,32,98,101,32,97,100,118,105,115,101,100,32,116,104,97,116,32,105,102,32,121,111,117,32,98,114,101,97,107,32,39,101,109,44,32,121,111,117,32,112,97,121,32,102,111,114,32,39,101,109,46,0,89,111,117,32,100,111,110,39,116,32,104,97,118,101,32,97,110,121,32,115,112,101,108,108,115,33,0,0,0,0,0,0,73,78,84,69,76,76,73,71,69,78,67,69,0,0,0,0,100,114,111,112,95,103,111,108,100,0,0,0,0,0,0,0,32,117,110,100,101,97,100,32,112,114,111,116,101,99,116,105,111,110,0,0,0,0,0,0,105,110,32,116,104,101,105,114,32,97,100,118,101,110,116,117,114,101,115,46,32,32,70,101,101,108,32,102,114,101,101,32,116,111,32,98,114,111,119,115,101,32,116,111,32,121,111,117,114,32,104,101,97,114,116,39,115,32,99,111,110,116,101,110,116,46,32,0,0,0,0,0,107,105,108,108,101,100,32,98,121,32,97,32,109,111,110,115,116,101,114,0,0,0,0,0,89,111,117,32,104,101,97,114,32,108,111,117,100,32,115,99,114,101,97,109,115,32,111,102,32,97,103,111,110,121,33,0,83,84,82,69,78,71,84,72,0,0,0,0,0,0,0,0,32,98,108,105,110,100,110,101,115,115,0,0,0,0,0,0,87,101,108,99,111,109,101,32,116,111,32,116,104,101,32,85,108,97,114,110,32,84,104,114,105,102,116,32,83,104,111,112,112,101,46,32,32,87,101,32,115,116,111,99,107,32,109,97,110,121,32,105,116,101,109,115,32,101,120,112,108,111,114,101,114,115,32,102,105,110,100,32,117,115,101,102,117,108,32,0,84,104,101,32,37,115,32,98,97,114,101,108,121,32,101,115,99,97,112,101,115,32,98,101,105,110,103,32,97,110,110,105,104,105,108,97,116,101,100,33,0,0,0,0,0,0,0,0,79,80,65,68,0,0,0,0,83,111,114,114,121,44,32,98,117,116,32,119,101,32,97,114,101,32,111,117,116,32,111,102,32,116,104,97,116,32,105,116,101,109,46,0,0,0,0,0,116,104,114,111,110,101,0,0,79,67,79,75,69,0,0,0,32,97,112,112,114,101,110,116,105,99,101,32,119,97,114,108,111,114,100,0,0,0,0,0,89,111,117,32,99,97,110,39,116,32,99,97,114,114,121,32,97,110,121,116,104,105,110,103,32,109,111,114,101,33,0,0,84,104,101,32,115,116,97,116,117,101,32,99,114,117,109,98,108,101,115,46,0,0,0,0,79,83,72,82,79,79,77,83,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,89,111,117,32,100,111,110,39,116,32,104,97,118,101,32,101,110,111,117,103,104,32,103,111,108,100,32,116,111,32,112,97,121,32,102,111,114,32,116,104,97,116,33,0,0,0,0,0,115,116,97,116,117,101,0,0,97,32,104,111,108,121,32,97,108,116,97,114,0,0,0,0,79,72,65,83,72,0,0,0,108,101,112,114,101,99,104,97,117,110,0,0,0,0,0,0,84,104,101,32,100,111,111,114,32,105,115,32,98,108,97,115,116,101,100,32,97,112,97,114,116,46,0,0,0,0,0,0,79,65,67,73,68,0,0,0,97,32,100,101,97,100,32,102,111,117,110,116,97,105,110,0,106,111,117,114,110,101,121,32,105,110,116,111,32,116,104,101,115,101,32,99,97,118,101,114,110,115,46,60,47,112,62,0,10,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45])
.concat([45,45,45,45,45,45,45,45,45,45,45,45,10,0,0,0,100,111,111,114,0,0,0,0,79,83,80,69,69,68,0,0,89,111,117,114,32,100,97,117,103,104,116,101,114,32,104,97,115,32,99,111,110,116,114,97,99,116,101,100,32,97,32,115,116,114,97,110,103,101,32,100,105,115,101,97,115,101,32,97,110,100,32,110,111,110,101,32,111,102,32,121,111,117,114,32,104,111,109,101,32,114,101,109,101,100,105,101,115,32,0,0,90,97,97,97,97,112,112,112,33,32,32,89,111,117,39,118,101,32,98,101,101,110,32,116,101,108,101,112,111,114,116,101,100,33,0,0,0,0,0,0,49,51,0,0,0,0,0,0,84,104,101,32,119,97,108,108,32,99,114,117,109,98,108,101,115,46,0,0,0,0,0,0,79,69,76,86,69,78,67,72,65,73,78,0,0,0,0,0,123,34,99,111,100,101,34,58,37,100,44,34,116,101,120,116,34,58,34,37,115,34,44,34,115,117,98,116,101,120,116,34,58,34,37,115,34,125,0,0,97,99,116,105,111,110,95,116,101,108,101,112,111,114,116,0,73,110,116,114,111,100,117,99,116,105,111,110,32,116,111,32,87,105,122,97,114,100,114,121,0,0,0,0,0,0,0,0,119,97,108,108,0,0,0,0,105,110,118,0,0,0,0,0,66,97,99,107,0,0,0,0,79,83,76,65,89,69,82,0,116,104,101,32,37,115,32,114,101,116,117,114,110,115,32,121,111,117,114,32,112,117,110,121,32,109,105,115,115,105,108,101,33,0,0,0,0,0,0,0,79,86,79,82,80,65,76,0,110,117,109,98,101,114,0,0,32,115,112,105,114,105,116,32,112,114,111,116,101,99,116,105,111,110,0,0,0,0,0,0,37,51,57,115,0,0,0,0,32,111,110,32,37,115,0,0,89,111,117,32,97,114,101,32,104,105,116,32,98,121,32,121,111,117,114,32,111,119,110,32,109,97,103,105,99,33,0,0,79,80,83,84,65,70,70,0,32,119,97,116,101,114,0,0,65,108,108,32,99,111,117,114,115,101,115,32,99,111,115,116,32,50,53,48,32,103,111,108,100,32,112,105,101,99,101,115,46,0,0,0,0,0,0,0,32,32,84,104,101,32,100,101,109,111,110,32,115,116,114,105,107,101,115,32,97,116,32,116,104,101,32,37,115,46,0,0,79,87,87,65,78,68,0,0,89,111,117,32,115,117,100,100,101,110,108,121,32,102,101,101,108,32,119,101,97,107,101,114,33,0,0,0,0,0,0,0,112,111,116,105,111,110,32,111,102,32,37,115,0,0,0,0,97,108,108,32,105,110,104,97,98,105,116,97,110,116,115,32,111,102,32,116,104,101,32,99,97,118,101,115,46,32,32,72,101,114,101,32,105,115,32,116,104,101,32,99,108,97,115,115,32,115,99,104,101,100,117,108,101,46,32,0,0,0,0,0,32,32,84,104,101,32,37,115,39,115,32,104,101,97,114,116,32,115,116,111,112,112,101,100,46,0,0,0,0,0,0,0,79,83,80,72,84,65,76,73,83,77,65,78,0,0,0,0,32,32,32,32,109,97,115,116,101,114,32,109,97,103,101,32,32,32,32,0,0,0,0,0,84,104,101,32,67,111,108,108,101,103,101,32,111,102,32,85,108,97,114,110,32,111,102,102,101,114,115,32,116,104,101,32,101,120,99,105,116,105,110,103,32,111,112,112,111,114,116,117,110,105,116,121,32,111,102,32,104,105,103,104,101,114,32,101,100,117,99,97,116,105,111,110,32,116,111,32,0,0,0,0,32,32,65,32,108,105,103,104,116,110,105,110,103,32,98,111,108,116,32,104,105,116,115,32,116,104,101,32,37,115,46,0,79,72,65,78,68,111,102,70,69,65,82,0,0,0,0,0,32,111,102,32,37,115,0,0,84,104,101,32,37,115,32,100,105,115,112,101,108,115,32,116,104,101,32,115,112,104,101,114,101,33,0,0,0,0,0,0,83,101,108,108,0,0,0,0,32,32,84,104,101,32,37,115,32,115,104,114,105,118,101,108,115,32,117,112,46,0,0,0,79,66,82,65,83,83,76,65,77,80,0,0,0,0,0,0,102,108,111,97,116,105,110,103,32,101,121,101,0,0,0,0,87,105,116,104,100,114,97,119,0,0,0,0,0,0,0,0,32,32,84,104,101,32,99,111,110,101,32,111,102,32,99,111,108,100,32,115,116,114,105,107,101,115,32,116,104,101,32,37,115,46,0,0,0,0,0,0,79,85,82,78,0,0,0,0,97,110,32,101,108,101,118,97,116,111,114,32,103,111,105,110,103,32,100,111,119,110,0,0,97,110,100,32,99,111,110,116,97,105,110,32,109,117,99,104,32,109,97,103,105,99,32,97,110,100,32,116,114,101,97,115,117,114,101,46,32,32,79,110,101,32,111,112,116,105,111,110,32,121,111,117,32,104,97,118,101,32,105,115,32,116,111,32,117,110,100,101,114,116,97,107,101,32,97,32,0,0,0,0,32,49,0,0,0,0,0,0,68,101,112,111,115,105,116,0,32,32,84,104,101,32,102,105,114,101,98,97,108,108,32,104,105,116,115,32,116,104,101,32,37,115,46,0,0,0,0,0,10,72,101,114,101,32,97,114,101,32,116,104,101,32,109,97,112,115,58,10,10,0,0,0,79,67,79,79,75,73,69,0,84,104,97,110,107,32,121,111,117,46,0,0,0,0,0,0,49,50,0,0,0,0,0,0,111,98,97,110,107,115,117,98,51,0,0,0,0,0,0,0,32,32,84,104,101,32,37,115,32,98,101,108,105,101,118,101,100,33,0,0,0,0,0,0,79,76,82,83,0,0,0,0,110,117,109,98,101,114,0,0,49,53,32,109,111,98,117,108,115,0,0,0,0,0,0,0,78,111,116,101,58,32,32,79,110,108,121,32,100,101,112,111,115,105,116,115,32,117,110,100,101,114,32,49,44,48,48,48,44,48,48,48,103,112,32,99,97,110,32,101,97,114,110,32,105,110,116,101,114,101,115,116,46,0,0,0,0,0,0,0,32,32,87,104,105,108,101,32,116,104,101,32,37,115,32,105,115,32,101,110,116,97,110,103,108,101,100,44,32,121,111,117,32,104,105,116,32,105,116,32,37,100,32,116,105,109,101,115,46,0,0,0,0,0,0,0,112,104,97,0,0,0,0,0,42,0,0,0,0,0,0,0,79,84,72,82,79,78,69,50,0,0,0,0,0,0,0,0,79,65,78,78,73,72,73,76,65,84,73,79,78,0,0,0,115,0,0,0,0,0,0,0,32,32,84,104,101,32,115,111,117,110,100,32,100,97,109,97,103,101,115,32,116,104,101,32,37,115,46,0,0,0,0,0,10,68,105,97,103,110,111,115,105,110,103,32,46,32,46,32,46,10,0,0,0,0,0,0,72,111,119,32,109,117,99,104,32,103,111,108,100,32,100,111,32,121,111,117,32,100,114,111,112,63,32,0,0,0,0,0,32,109,111,110,115,116,101,114,32,104,101,97,108,105,110,103,0,0,0,0,0,0,0,0,89,111,117,32,104,97,118,101,32,37,56,100,32,103,111,108,100,32,112,105,101,99,101,37,115,32,105,110,32,116,104,101,32,98,97,110,107,46,0,0,32,32,87,104,105,108,101,32,116,104,101,32,37,115,32,115,108,101,112,116,44,32,121,111,117,32,115,109,97,115,104,101,100,32,105,116,32,37,100,32,116,105,109,101,115,46,0,0,32,37,115,0,0,0,0,0,79,68,69,65,68,84,72,82,79,78,69,0,0,0,0,0,32,102,111,114,103,101,116,102,117,108,110,101,115,115,0,0,97,112,112,114,97,105,115,101,50,0,0,0,0,0,0,0,32,32,89,111,117,114,32,109,105,115,115,105,108,101,32,104,105,116,32,116,104,101,32,37,115,46,0,0,0,0,0,0,79,73,86,84,69,76,69,84,82,65,80,0,0,0,0,0,83,104,97,108,108,32,73,32,97,112,112,114,97,105,115,101,32,105,116,32,102,111,114,32,121,111,117,63,32,0,0,0,32,32,89,111,117,114,32,109,105,115,115,105,108,101,115,32,104,105,116,32,116,104,101,32,37,115,46,0,0,0,0,0,79,84,82,65,68,69,80,79,83,84,0,0,0,0,0,0,32,101,120,112,101,114,105,101,110,99,101,100,32,109,97,103,101,32,32,0,0,0,0,0,73,32,109,117,115,116,32,99,111,109,109,101,110,100,32,121,111,117,46,32,32,73,32,100,105,100,110,39,116,32,116,104,105,110,107,32,121,111,117,32,99,111,117,108,100,32,103,101,116,32,105,116,46,0,0,0,79,73,86,84,82,65,80,68,79,79,82,0,0,0,0,0,89,111,117,32,102,105,110,100,32,97,32,109,97,103,105,99,32,112,111,116,105,111,110,0,63,0,0,0,0,0,0,0,73,32,115,101,101,32,121,111,117,32,104,97,118,101,32,37,115,46,0,0,0,0,0,0,77,97,107,101,115,32,97,32,99,104,97,114,97,99,116,101,114,32,115,112,101,108,108,32,112,101,114,109,97,110,101,110,116,44,32,101,46,103,46,32,112,114,111,116,101,99,116,105,111,110,44,32,115,116,114,101,110,103,116,104,44,32,101,116,99,46,0,0,0,0,0,0,79,84,82,65,80,68,79,79,82,0,0,0,0,0,0,0,103,105,97,110,116,32,97,110,116,0,0,0,0,0,0,0,67,104,101,99,107,32,112,101,114,109,105,115,115,105,111,110,115,32,111,110,32,37,115,10,0,0,0,0,0,0,0,0,87,101,32,115,117,103,103,101,115,116,32,121,111,117,32,103,111,32,116,111,32,116,104,101,32,76,82,83,32,111,102,102,105,99,101,32,97,110,100,32,112,97,121,32,121,111,117,114,32,116,97,120,101,115,46,0,71,111,100,32,111,110,108,121,32,107,110,111,119,115,32,119,104,97,116,32,116,104,105,115,32,119,105,108,108,32,100,111,0,0,0,0,0,0,0,0,79,68,65,82,84,82,65,80,0,0,0,0,0,0,0,0,97,32,115,116,97,105,114,99,97,115,101,32,103,111,105,110,103,32,100,111,119,110,0,0,60,112,62,84,104,101,32,99,97,118,101,114,110,115,32,111,102,32,85,108,97,114,110,44,32,105,116,32,105,115,32,116,104,111,117,103,104,116,44,32,109,117,115,116,32,98,101,32,109,97,103,110,105,102,105,99,101,110,116,32,105,110,32,100,101,115,105,103,110,32,0,0,116,97,120,101,115,32,97,110,100,32,119,101,32,109,117,115,116,32,99,111,109,112,108,121,32,119,105,116,104,32,116,104,101,109,46,32,87,101,32,99,97,110,110,111,116,32,115,101,114,118,101,32,121,111,117,32,97,116,32,116,104,105,115,32,116,105,109,101,46,32,32,83,111,114,114,121,46,32,0,0,65,108,108,111,119,115,32,116,104,101,32,112,108,97,121,101,114,32,116,111,32,119,97,108,107,32,116,104,114,111,117,103,104,32,119,97,108,108,115,32,102,111,114,32,97,32,115,104,111,114,116,32,112,101,114,105,111,100,32,111,102,32,116,105,109,101,0,0,0,0,0,0,9,43,32,37,100,10,0,0,79,73,86,68,65,82,84,82,65,80,0,0,0,0,0,0,67,104,101,97,112,115,107,97,116,101,33,32,84,104,101,32,71,111,100,115,32,97,114,101,32,105,110,115,117,108,116,101,100,32,98,121,32,115,117,99,104,32,97,32,116,105,110,121,32,111,102,102,101,114,105,110,103,33,0,0,0,0,0,0,115,99,114,111,108,108,32,111,102,32,37,115,0,0,0,0,84,104,101,32,37,115,32,104,105,116,32,121,111,117,32,45,45,32,121,111,117,114,32,97,114,109,111,114,32,102,101,101,108,115,32,119,101,97,107,101,114,46,0,0,0,0,0,0,84,104,101,32,37,115,32,99,97,110,99,101,108,115,32,116,104,101,32,115,112,104,101,114,101,33,0,0,0,0,0,0,49,49,0,0,0,0,0,0,108,101,118,105,101,100,32,116,97,120,101,115,32,104,97,118,101,32,98,101,101,110,32,112,97,105,100,46,32,32,84,104,101,121,32,104,97,118,101,32,97,108,115,111,32,116,111,108,100,32,117,115,32,116,104,97,116,32,121,111,117,32,111,119,101,32,37,100,32,103,112,32,105,110,32,0,0,0,0,0,83,117,109,109,111,110,115,32,97,32,100,101,109,111,110,32,119,104,111,32,109,97,121,32,104,101,108,112,32,121,111,117,32,111,117,116,0,0,0,0,79,68,71,79,76,68,0,0,84,104,101,32,37,115,32,104,105,116,32,121,111,117,32,45,45,32,121,111,117,32,97,114,101,32,118,101,114,121,32,108,117,99,107,121,32,116,111,32,104,97,118,101,32,115,117,99,104,32,115,116,114,111,110,103,32,101,108,118,101,110,32,99,104,97,105,110,33,0,0,0,91,93,0,0,0,0,0,0,83,97,118,101,32,103,97,109,101,32,102,97,105,108,101,100,46,0,0,0,0,0,0,0,70,105,103,104,116,101,114,39,115,32,84,114,97,105,110,105,110,103,32,73,73,0,0,0,84,104,101,32,85,108,97,114,110,32,82,101,118,101,110,117,101,32,83,101,114,118,105,99,101,32,104,97,115,32,111,114,100,101,114,101,100,32,116,104,97,116,32,121,111,117,114,32,97,99,99,111,117,110,116,32,98,101,32,102,114,111,122,101,110,32,117,110,116,105,108,32,97,108,108,32,0,0,0,0,69,108,105,109,105,110,97,116,101,115,32,97,32,115,112,101,99,105,101,115,32,111,102,32,109,111,110,115,116,101,114,32,102,114,111,109,32,116,104,101,32,103,97,109,101,0,0,0,99,114,101,0,0,0,0,0,60,98,114,47,62,84,104,101,32,109,97,103,105,99,32,112,111,116,105,111,110,115,32,121,111,117,32,104,97,118,101,32,102,111,117,110,100,32,116,111,32,100,97,116,101,32,97,114,101,58,0,0,0,0,0,0,79,75,71,79,76,68,0,0,84,104,101,32,37,115,32,104,105,116,32,121,111,117,32,45,45,32,121,111,117,32,97,114,101,32,102,111,114,116,117,110,97,116,101,32,116,111,32,104,97,118,101,32,115,116,97,105,110,108,101,115,115,32,115,116,101,101,108,32,97,114,109,111,114,33,0,0,0,0,0,0,109,108,101,0,0,0,0,0,100,97,109,97,103,101,100,44,32,119,101,32,119,105,108,108,32,112,97,121,32,111,110,108,121,32,49,48,37,32,111,102,32,116,104,101,105,114,32,110,101,119,32,118,97,108,117,101,46,32,0,0,0,0,0,0,65,110,121,116,104,105,110,103,32,99,97,117,103,104,116,32,105,110,32,116,104,105,115,32,115,112,104,101,114,101,32,105,115,32,105,110,115,116,97,110,116,108,121,32,107,105,108,108,101,100,46,0,0,0,0,0,79,77,65,88,71,79,76,68,0,0,0,0,0,0,0,0,84,104,101,114,101,39,115,32,115,111,109,101,116,104,105,110,103,32,104,101,114,101,32,97,108,114,101,97,100,121,33,0,32,104,97,115,116,101,32,109,111,110,115,116,101,114,115,0,84,104,101,32,37,115,32,104,105,116,32,121,111,117,32,45,45,32,121,111,117,32,97,114,101,32,108,117,99,107,121,32,121,111,117,32,104,97,118,101,32,108,101,97,116,104,101,114,32,111,110,46,0,0,0,0,111,110,108,121,32,50,48,37,32,111,102,32,116,104,101,105,114,32,118,97,108,117,101,32,119,101,114,101,32,116,104,101,121,32,116,111,32,98,101,32,110,101,119,46,32,32,73,102,32,116,104,101,32,105,116,101,109,115,32,97,114,101,32,98,97,100,108,121,32,0,0,0,77,97,107,101,115,32,97,32,119,97,108,108,32,105,110,32,116,104,101,32,115,112,101,99,105,102,105,101,100,32,112,108,97,99,101,0,0,0,0,0,32,104,105,116,32,98,121,32,104,101,114,32,111,119,110,32,109,97,103,105,99,0,0,0,79,72,79,77,69,0,0,0,84,104,101,32,37,115,32,98,105,116,32,121,111,117,33,0,32,109,111,110,115,116,101,114,32,100,101,116,101,99,116,105,111,110,0,0,0,0,0,0,97,110,100,32,119,101,32,105,110,99,117,114,32,103,114,101,97,116,32,101,120,112,101,110,115,101,32,105,110,32,114,101,99,111,110,100,105,116,105,111,110,105,110,103,32,116,104,101,32,105,116,101,109,115,44,32,119,101,32,117,115,117,97,108,108,121,32,112,97,121,32,0,67,114,101,97,116,101,115,32,97,32,99,117,114,116,97,105,110,32,111,102,32,102,105,114,101,32,97,114,111,117,110,100,32,116,104,101,32,99,97,115,116,101,114,0,0,0,0,0,79,86,79,76,85,80,0,0,32,32,110,111,116,104,105,110,103,0,0,0,0,0,0,0,117,115,101,102,117,108,46,32,32,83,105,110,99,101,32,116,104,101,32,99,111,110,100,105,116,105,111,110,32,111,102,32,116,104,101,32,105,116,101,109,115,32,121,111,117,32,98,114,105,110,103,32,105,110,32,105,115,32,110,111,116,32,99,101,114,116,97,105,110,44,32,0,84,101,108,101,112,111,114,116,115,32,97,32,109,111,110,115,116,101,114,0,0,0,0,0,79,86,79,76,68,79,87,78,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,109,97,103,101,32,32,32,32,32,32,32,32,0,0,0,0,0,84,104,101,32,37,115,32,112,105,99,107,115,32,121,111,117,114,32,112,111,99,107,101,116,32,97,110,100,32,116,97,107,101,115,58,0,0,0,0,0,87,101,108,99,111,109,101,32,116,111,32,116,104,101,32,85,108,97,114,110,32,84,114,97,100,105,110,103,32,80,111,115,116,46,32,32,87,101,32,98,117,121,32,105,116,101,109,115,32,116,104,97,116,32,101,120,112,108,111,114,101,114,115,32,110,111,32,108,111,110,103,101,114,32,102,105,110,100,32,0,65,108,108,32,109,111,118,101,109,101,110,116,32,105,110,32,116,104,101,32,99,97,118,101,114,110,115,32,99,101,97,115,101,115,32,102,111,114,32,97,32,108,105,109,105,116,101,100,32,100,117,114,97,116,105,111,110,0,0,0,0,0,0,0,79,69,78,84,82,65,78,67,69,0,0,0,0,0,0,0,78,111,116,104,105,110,103,32,104,97,112,112,101,110,115,46,0,0,0,0,0,0,0,0,84,104,101,32,37,115,32,99,111,117,108,100,110,39,116,32,102,105,110,100,32,97,110,121,116,104,105,110,103,32,116,111,32,115,116,101,97,108,46,0,83,111,114,114,121,44,32,119,101,32,99,97,110,39,116,32,97,99,99,101,112,116,32,117,110,105,100,101,110,116,105,102,105,101,100,32,111,98,106,101,99,116,115,46,0,0,0,0,70,114,101,101,122,101,115,32,109,111,110,115,116,101,114,115,32,105,110,32,116,104,101,105,114,32,116,114,97,99,107,115,0,0,0,0,0,0,0,0,79,83,65,80,80,72,73,82,69,0,0,0,0,0,0,0,116,114,111,103,108,111,100,121,116,101,0,0,0,0,0,0,84,104,101,32,37,115,32,102,108,97,116,116,101,110,115,32,121,111,117,32,119,105,116,104,32,105,116,39,115,32,112,115,105,111,110,105,99,115,33,0,80,97,121,32,84,97,120,101,115,0,0,0,0,0,0,0,84,101,114,114,105,102,105,101,115,32,116,104,101,32,109,111,110,115,116,101,114,32,115,111,32,116,104,97,116,32,105,116,32,109,97,121,32,110,111,116,32,104,105,116,32,116,104,101,32,99,97,115,116,101,114,0,79,69,77,69,82,65,76,68,0,0,0,0,0,0,0,0,97,32,109,105,114,114,111,114,0,0,0,0,0,0,0,0,112,114,111,0,0,0,0,0,84,104,101,32,37,115,32,104,97,115,32,99,111,110,102,117,115,101,100,32,121,111,117,46,0,0,0,0,0,0,0,0,116,104,101,114,101,32,104,101,32,109,101,116,32,104,105,115,32,100,101,109,105,115,101,46,60,47,112,62,0,0,0,0,67,111,111,108,32,67,111,107,101,0,0,0,0,0,0,0,65,32,104,111,108,121,32,115,112,101,108,108,32,99,97,108,108,105,110,103,32,111,110,32,121,111,117,114,32,103,111,100,32,116,111,32,98,97,99,107,32,121,111,117,32,117,112,0,79,82,85,66,89,0,0,0,9,37,115,0,0,0,0,0,89,111,117,32,100,111,110,39,116,32,104,97,118,101,32,116,104,97,116,32,109,117,99,104,33,0,0,0,0,0,0,0,84,104,101,32,37,115,32,104,105,116,32,121,111,117,32,119,105,116,104,32,105,116,115,32,98,97,114,98,101,100,32,116,97,105,108,46,0,0,0,0,49,48,0,0,0,0,0,0,84,114,105,112,112,121,32,83,104,114,111,111,109,115,0,0,67,114,101,97,116,101,115,32,97,32,100,101,108,117,103,101,32,111,102,32,119,97,116,101,114,44,32,102,108,111,111,100,105,110,103,32,116,104,101,32,105,109,109,101,100,105,97,116,101,32,99,104,97,109,98,101,114,0,0,0,0,0,0,0,79,68,73,65,77,79,78,68,0,0,0,0,0,0,0,0,91,91,37,115,93,93,0,0,84,104,101,32,37,115,32,110,101,97,114,108,121,32,109,105,115,115,101,115,46,0,0,0,83,97,118,105,110,103,32,46,32,46,32,46,0,0,0,0,49,48,32,109,111,98,117,108,115,0,0,0,0,0,0,0,77,111,115,116,101,114,32,72,97,115,104,0,0,0,0,0,84,104,105,115,32,103,108,111,98,101,32,104,101,108,112,115,32,116,111,32,112,114,111,116,101,99,116,32,116,104,101,32,112,108,97,121,101,114,32,102,114,111,109,32,112,104,121,115,105,99,97,108,32,97,116,116,97,99,107,0,0,0,0,0,99,98,108,0,0,0,0,0,60,98,114,47,62,84,104,101,32,109,97,103,105,99,32,115,99,114,111,108,108,115,32,121,111,117,32,104,97,118,101,32,102,111,117,110,100,32,116,111,32,100,97,116,101,32,97,114,101,58,0,0,0,0,0,0,79,78,79,84,72,69,70,84,0,0,0,0,0,0,0,0,84,104,101,32,37,115,32,104,105,116,115,32,121,111,117,32,119,105,116,104,32,97,32,115,112,101,108,108,32,111,102,32,100,105,115,101,110,99,104,97,110,116,109,101,110,116,33,32,0,0,0,0,0,0,0,0,71,114,111,111,118,121,32,65,99,105,100,0,0,0,0,0,83,117,98,116,114,97,99,116,115,32,104,105,116,32,112,111,105,110,116,115,32,102,114,111,109,32,98,111,116,104,32,121,111,117,32,97,110,100,32,97,32,109,111,110,115,116,101,114,0,0,0,0,0,0,0,0,79,67,85,66,69,111,102,85,78,68,69,65,68,0,0,0,78,111,116,104,105,110,103,32,99,97,110,32,98,101,32,109,111,118,101,100,32,119,104,105,108,101,32,116,105,109,101,32,105,115,32,115,116,111,112,112,101,100,33,0,0,0,0,0,66,117,116,32,111,110,101,32,97,114,109,32,105,115,32,98,117,115,121,32,119,105,116,104,32,121,111,117,114,32,115,104,105,101,108,100,33,0,0,0,89,111,117,32,117,110,119,105,101,108,100,32,121,111,117,114,32,119,101,97,112,111,110,46,0,0,0,0,0,0,0,0,120,0,0,0,120,0,0,0,120,0,0,0,120,0,0,0,120,0,0,0,120,0,0,0,120,0,0,0,120,0,0,0,120,0,0,0,120,0,0,0,120,0,0,0,120,0,0,0,100,0,0,0,120,0,0,0,100,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,15,0,0,0,8,0,0,0,15,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,8,0,0,0,5,0,0,0,65,0,0,0,68,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,67,0,0,0,66,0,0,0,59,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,45,0,0,0,44,0,0,0,69,0,0,0,70,0,0,0,86,0,0,0,88,0,0,0,83,0,0,0,84,0,0,0,82,0,0,0,90,0,0,0,87,0,0,0,81,0,0,0,78,0,0,0,92,0,0,0,91,0,0,0,51,0,0,0,94,0,0,0,59,0,0,0,89,0,0,0,96,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,8,0,0,0,7,0,0,0,6,0,0,0,5,0,0,0,0,0,0,0,165,0,0,0,181,0,0,0,166,0,0,0,182,0,0,0,167,0,0,0,183,0,0,0,168,0,0,0,184,0,0,0,169,0,0,0,185,0,0,0,170,0,0,0,186,0,0,0,171,0,0,0,187,0,0,0,172,0,0,0,188,0,0,0,120,82,0,0,18,0,0,0,4,0,0,0,6,0,0,0,16,0,0,0,6,0,0,0,4,0,0,0,1,0,0,0,16,0,0,0,1,0,0,0,39,0,0,0,56,0,0,0,56,0,0,0,1,0,0,0,250,255,255,255,250,255,255,255,0,0,0,0,255,255,255,255,255,255,255,255,248,80,0,0,8,0,0,0,16,0,0,0,16,0,0,0,6,0,0,0,6,0,0,0,8,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,4,0,0,0,56,0,0,0,55,0,0,0,55,0,0,0,19,0,0,0,250,255,255,255,250,255,255,255,255,255,255,255,255,255,255,255,104,79,0,0,14,0,0,0,12,0,0,0,4,0,0,0,12,0,0,0,8,0,0,0,3,0,0,0,1,0,0,0,14,0,0,0,5,0,0,0,39,0,0,0,28,0,0,0,56,0,0,0,1,0,0,0,0,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,208,76,0,0,8,0,0,0,14,0,0,0,12,0,0,0,8,0,0,0,8,0,0,0,14,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,39,0,0,0,26,0,0,0,55,0,0,0,1,0,0,0,0,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,224,74,0,0,8,0,0,0,12,0,0,0,8,0,0,0,10,0,0,0,14,0,0,0,6,0,0,0,1,0,0,0,12,0,0,0,1,0,0,0,39,0,0,0,26,0,0,0,39,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,1,0,0,0,96,73,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,1,0,0,0,10,0,0,0,0,0,0,0,1,0,0,0,26,0,0,0,39,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,104,71,0,0,16,0,0,0,6,0,0,0,8,0,0,0,16,0,0,0,4,0,0,0,4,0,0,0,1,0,0,0,12,0,0,0,0,0,0,0,39,0,0,0,38,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,192,69,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,39,0,0,0,43,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,191,0,0,0,198,0,0,0,196,0,0,0,194,0,0,0,192,0,0,0,195,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,191,0,0,0,206,0,0,0,204,0,0,0,202,0,0,0,200,0,0,0,203,0,0,0,201,0,0,0,205,0,0,0,207,0,0,0,191,0,0,0,214,0,0,0,212,0,0,0,210,0,0,0,208,0,0,0,211,0,0,0,209,0,0,0,213,0,0,0,215,0,0,0,191,0,0,0,222,0,0,0,220,0,0,0,218,0,0,0,216,0,0,0,219,0,0,0,217,0,0,0,221,0,0,0,223,0,0,0,191,0,0,0,230,0,0,0,228,0,0,0,226,0,0,0,224,0,0,0,227,0,0,0,225,0,0,0,229,0,0,0,231,0,0,0,0,0,0,0,168,52,0,0,100,0,0,0,8,0,0,0,96,0,0,0,216,179,0,0,250,0,0,0,9,0,0,0,97,0,0,0,0,179,0,0,244,1,0,0,10,0,0,0,98,0,0,0,96,178,0,0,232,3,0,0,11,0,0,0,99,0,0,0,192,177,0,0,136,19,0,0,12,0,0,0,100,0,0,0])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function (src, dst, callback) {
        var total = 0;
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
        if (!total) {
          // early out
          return callback(null);
        }
        var completed = 0;
        function done(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function transaction_onerror() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
      },getLocalSet:function (mount, callback) {
        var files = {};
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
        while (check.length) {
          var path = check.pop();
          var stat, node;
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
        return callback(null, { type: 'local', files: files });
      },getDB:function (name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function req_onupgradeneeded() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function req_onsuccess() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function req_onerror() {
          callback(this.error);
        };
      },getRemoteSet:function (mount, callback) {
        var files = {};
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function transaction_onerror() { callback(this.error); };
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function store_openCursor_onsuccess(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.position = position;
          return position;
        }}};
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
        // start at the root
        var current = FS.root;
        var current_path = '/';
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
            this.parent = null;
            this.mount = null;
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            FS.hashAddNode(this);
          };
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
          FS.FSNode.prototype = {};
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
        return new FS.FSNode(parent, name, mode, rdev);
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
        var completed = 0;
        var total = FS.mounts.length;
        function done(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function (type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          this.stack = stackTrace();
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
        FS.nameTable = new Array(4096);
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureErrnoError();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }
  var _mkport=undefined;var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  Module["_strlen"] = _strlen;
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }
  function _rand() {
      return Math.floor(Math.random()*0x80000000);
    }
  Module["_memcpy"] = _memcpy;var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStream(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop()
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(stream, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))|0)]=byte_
      }
      HEAP8[(((s)+(i))|0)]=0
      return s;
    }
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  function ___errno_location() {
      return ___errno_state;
    }function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      var stdout = HEAP32[((_stdout)>>2)];
      if (s) {
        _fputs(s, stdout);
        _fputc(58, stdout);
        _fputc(32, stdout);
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }
  function _llvm_lifetime_start() {}
  function _llvm_lifetime_end() {}
  Module["_memset"] = _memset;var _llvm_memset_p0i8_i32=_memset;
  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStream(stream);
      return Number(stream && stream.eof);
    }
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  Module["_strcpy"] = _strcpy;
  Module["_tolower"] = _tolower;
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }
  function _chmod(path, mode, dontResolveLastLink) {
      // int chmod(const char *path, mode_t mode);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/chmod.html
      // NOTE: dontResolveLastLink is a shortcut for lchmod(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        FS.chmod(path, mode);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }
  Module["_strcat"] = _strcat;
  function _emscripten_asm_const(code) {
      Runtime.getAsmConst(code, 0)();
    }
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  function _srand(seed) {}
  var _llvm_va_start=undefined;
  function _vsprintf(s, format, va_arg) {
      return _sprintf(s, format, HEAP32[((va_arg)>>2)]);
    }
  function _llvm_va_end() {}
  function _abort() {
      Module['abort']();
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
            var errorInfo = '?';
            function onContextCreationError(event) {
              errorInfo = event.statusMessage || errorInfo;
            }
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (window.scrollX + rect.left);
              y = t.pageY - (window.scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (window.scrollX + rect.left);
            y = event.pageY - (window.scrollY + rect.top);
          }
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
var Math_min = Math.min;
function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm=(function(global,env,buffer){"use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.STACKTOP|0;var j=env.STACK_MAX|0;var k=env.tempDoublePtr|0;var l=env.ABORT|0;var m=+env.NaN;var n=+env.Infinity;var o=0;var p=0;var q=0;var r=0;var s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0,A=0.0;var B=0;var C=0;var D=0;var E=0;var F=0;var G=0;var H=0;var I=0;var J=0;var K=0;var L=global.Math.floor;var M=global.Math.abs;var N=global.Math.sqrt;var O=global.Math.pow;var P=global.Math.cos;var Q=global.Math.sin;var R=global.Math.tan;var S=global.Math.acos;var T=global.Math.asin;var U=global.Math.atan;var V=global.Math.atan2;var W=global.Math.exp;var X=global.Math.log;var Y=global.Math.ceil;var Z=global.Math.imul;var _=env.abort;var $=env.assert;var aa=env.asmPrintInt;var ab=env.asmPrintFloat;var ac=env.min;var ad=env.invoke_ii;var ae=env.invoke_v;var af=env.invoke_iii;var ag=env.invoke_vi;var ah=env._llvm_lifetime_end;var ai=env._rand;var aj=env._feof;var ak=env._snprintf;var al=env._fgetc;var am=env._llvm_va_end;var an=env._fread;var ao=env._fclose;var ap=env._chmod;var aq=env._abort;var ar=env._fprintf;var as=env._pread;var at=env._fgets;var au=env._close;var av=env._fflush;var aw=env._fopen;var ax=env.__reallyNegative;var ay=env._fputc;var az=env._emscripten_asm_const;var aA=env._sysconf;var aB=env._open;var aC=env.___setErrNo;var aD=env._fwrite;var aE=env._strncmp;var aF=env._send;var aG=env._write;var aH=env._fputs;var aI=env._sprintf;var aJ=env._srand;var aK=env._isspace;var aL=env._read;var aM=env.__formatString;var aN=env._unlink;var aO=env._recv;var aP=env._pwrite;var aQ=env._perror;var aR=env._puts;var aS=env._fsync;var aT=env._strerror_r;var aU=env.___errno_location;var aV=env._strerror;var aW=env._llvm_lifetime_start;var aX=env._sbrk;var aY=env._time;var aZ=env._vsprintf;var a_=env._strcmp;var a$=0.0;
// EMSCRIPTEN_START_FUNCS
function a4(a){a=a|0;var b=0;b=i;i=i+a|0;i=i+7&-8;return b|0}function a5(){return i|0}function a6(a){a=a|0;i=a}function a7(a,b){a=a|0;b=b|0;if((o|0)==0){o=a;p=b}}function a8(b){b=b|0;a[k]=a[b];a[k+1|0]=a[b+1|0];a[k+2|0]=a[b+2|0];a[k+3|0]=a[b+3|0]}function a9(b){b=b|0;a[k]=a[b];a[k+1|0]=a[b+1|0];a[k+2|0]=a[b+2|0];a[k+3|0]=a[b+3|0];a[k+4|0]=a[b+4|0];a[k+5|0]=a[b+5|0];a[k+6|0]=a[b+6|0];a[k+7|0]=a[b+7|0]}function ba(a){a=a|0;B=a}function bb(a){a=a|0;C=a}function bc(a){a=a|0;D=a}function bd(a){a=a|0;E=a}function be(a){a=a|0;F=a}function bf(a){a=a|0;G=a}function bg(a){a=a|0;H=a}function bh(a){a=a|0;I=a}function bi(a){a=a|0;J=a}function bj(a){a=a|0;K=a}function bk(){}function bl(b){b=b|0;var d=0;while(1){d=cv(b)|0;if((d|0)>0){if((c[32063]|0)!=0){cg()}cg();ce();cV()}if((d|0)==0|(a[122848]|0)!=0){break}eV(c[14874]|0,c[14872]|0)}return}function bm(d){d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;f=d-97|0;g=f>>>0<26>>>0;if((d|0)==42){if(g){while(1){dq()}}else{while(1){dq()}}}else if((d|0)==45){c[32038]=-1;eR(46216);cu();eM();i=e;return}else if((d|0)==27){i=e;return}else{if(!g){while(1){}}g=a[117080+f|0]|0;if((g<<24>>24|0)==1){eS(25888,(h=i,i=i+8|0,c[h>>2]=d,h)|0);i=h;i=e;return}else if((g<<24>>24|0)==56){eS(26216,(h=i,i=i+8|0,c[h>>2]=d,h)|0);i=h;i=e;return}else if((g<<24>>24|0)==55){eS(26216,(h=i,i=i+8|0,c[h>>2]=d,h)|0);i=h;i=e;return}else{d=c[32079]|0;if((d|0)!=-1&g<<24>>24==37){eR(46176);i=e;return}j=(c[32036]|0)==(f|0);if(j|(d|0)==(f|0)){eS(35224,(h=i,i=i+8|0,c[h>>2]=j?30752:27560,h)|0);i=h;i=e;return}else{c[32038]=f;eS(24784,(h=i,i=i+8|0,c[h>>2]=c[4792+(g<<24>>24<<2)>>2],h)|0);i=h;dk(b[117024+(f<<1)>>1]|0);eQ(46);cu();eM();i=e;return}}}}function bn(d){d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;f=d-97|0;g=f>>>0<26>>>0;h=117080+f|0;if((d|0)==42){if(g){while(1){dp()}}else{while(1){dp()}}}else if((d|0)==27){i=e;return}else{if(!g){while(1){}}L12:while(1){switch(a[h]|0){case 32:{j=13;break L12;break};case 1:{j=9;break L12;break};case 26:case 25:case 24:case 28:case 27:case 29:case 30:case 33:case 31:{j=10;break L12;break};default:{}}eR(15408)}if((j|0)==13){g=c[32038]|0;if((a[117080+g|0]|0)==37){eR(20280);i=e;return}c[32079]=f;if((g|0)==(f|0)){c[32038]=-1}eR(17832);dk(b[117024+(f<<1)>>1]|0);eQ(46);cu();eM();i=e;return}else if((j|0)==9){eS(25888,(k=i,i=i+8|0,c[k>>2]=d,k)|0);i=k;i=e;return}else if((j|0)==10){c[32036]=f;if((c[32038]|0)==(f|0)){c[32038]=-1}eS(22296,(k=i,i=i+8|0,c[k>>2]=c[4792+(a[h]<<2)>>2],k)|0);i=k;dk(b[117024+(f<<1)>>1]|0);eQ(46);cu();eM();i=e;return}}}function bo(b){b=b|0;var d=0,e=0,f=0;d=i;e=(c[14872]|0)+(117112+((c[14874]|0)*17|0))|0;if((b|0)==42){dn();i=d;return}if((c[32062]|0)!=0){eS(46128,(f=i,i=i+1|0,i=i+7&-8,c[f>>2]=0,f)|0);i=f;i=d;return}if((b|0)!=46){cJ(b-97|0)|0;i=d;return}b=a[e]|0;if((b<<24>>24|0)==6|(b<<24>>24|0)==1){fb(42504);e1(41336);e2(40232);i=d;return}else{eR(44336);i=d;return}}function bp(d){d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;f=(c[14872]|0)+(117112+((c[14874]|0)*17|0))|0;if((d|0)<1){i=e;return}g=c[32024]|0;if((g|0)<(d|0)){eR(39440);i=e;return}do{if((d|0)<32768){a[f]=19;h=d;j=d&65535}else{if((d|0)<327671){a[f]=20;k=(d|0)/10|0;h=k*10|0;j=k&65535;break}if((d|0)<3276701){a[f]=22;k=(d|0)/100|0;h=k*100|0;j=k&65535;break}a[f]=21;if((d|0)>=32767001){h=32767e3;j=32767;break}k=(d|0)/1e3|0;h=k*1e3|0;j=k&65535}}while(0);c[32024]=g-h;eS(38384,(g=i,i=i+16|0,c[g>>2]=h,c[g+8>>2]=(h|0)==1?128600:36984,g)|0);i=g;b[118288+((c[14874]|0)*34|0)+(c[14872]<<1)>>1]=j;eM();a[127544]=1;i=e;return}function bq(d){d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;if((d|0)==46){while(1){}}else if((d|0)==42){while(1){dr()}}else if((d|0)==27){i=e;return}else{if((c[32044]|0)!=0){eR(35176);i=e;return}if((c[32062]|0)!=0){eS(46128,(f=i,i=i+1|0,i=i+7&-8,c[f>>2]=0,f)|0);i=f;i=e;return}g=d-97|0;h=117080+g|0;j=a[h]|0;if((j<<24>>24|0)==57){dj(b[117024+(g<<1)>>1]|0);a[h]=1;i=e;return}else if((j<<24>>24|0)==55){dh(b[117024+(g<<1)>>1]|0);a[h]=1;i=e;return}else if((j<<24>>24|0)==1){eS(25888,(f=i,i=i+8|0,c[f>>2]=d,f)|0);i=f;i=e;return}else{eR(34536);i=e;return}}}function br(d){d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;if((d|0)==27){i=e;return}else if((d|0)==42){while(1){ds()}}else if((d|0)==46){while(1){}}else{f=d-97|0;g=117080+f|0;h=a[g]|0;if((h<<24>>24|0)==56){if((c[32062]|0)==0){c3(b[117024+(f<<1)>>1]|0);a[g]=1;i=e;return}else{eS(46128,(j=i,i=i+1|0,i=i+7&-8,c[j>>2]=0,j)|0);i=j;i=e;return}}else if((h<<24>>24|0)==1){eS(25888,(j=i,i=i+8|0,c[j>>2]=d,j)|0);i=j;i=e;return}else{eR(32600);i=e;return}}}function bs(){if((a[(c[14872]|0)+(117112+((c[14874]|0)*17|0))|0]|0)==58){cn();a[127544]=1;return}else{eR(29216);return}}function bt(a){a=a|0;var b=0;b=a-97|0;if((c[32079]|0)==(b|0)){c[32079]=-1;eR(26928);cu();eM();return}if((c[32036]|0)!=(b|0)){return}c[32036]=-1;eR(26544);cu();eM();return}function bu(){c[32038]=-1;eR(46216);cu();eM();return}function bv(){var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;d=i;e=aw(11016,36008)|0;c[31892]=e;if((e|0)==0){i=d;return}eR(42480);aD(33912,51,1,c[31892]|0)|0;e=c[32022]|0;ar(c[31892]|0,29944,(f=i,i=i+16|0,c[f>>2]=c[32023],c[f+8>>2]=e,f)|0)|0;i=f;e=c[32025]|0;g=c[32026]|0;h=c[26690]|0;ar(c[31892]|0,26808,(f=i,i=i+32|0,c[f>>2]=c[32024],c[f+8>>2]=e,c[f+16>>2]=g,c[f+24>>2]=h,f)|0)|0;i=f;aD(24144,20,1,c[31892]|0)|0;av(c[31892]|0)|0;h=0;g=c[31892]|0;do{e=c[12656+(h<<2)>>2]|0;j=c[128064+(h<<2)>>2]|0;ar(g|0,21712,(f=i,i=i+24|0,c[f>>2]=h,c[f+8>>2]=e,c[f+16>>2]=j,f)|0)|0;i=f;h=h+1|0;g=c[31892]|0}while((h|0)<100);aD(19536,2,1,g|0)|0;av(c[31892]|0)|0;aD(17072,10,1,c[31892]|0)|0;g=0;h=c[31892]|0;do{j=117080+g|0;e=a[j]|0;k=c[9456+(e<<2)>>2]|0;ar(h|0,14752,(f=i,i=i+24|0,c[f>>2]=g,c[f+8>>2]=k,c[f+16>>2]=e,f)|0)|0;i=f;ar(c[31892]|0,45576,(f=i,i=i+8|0,c[f>>2]=c[4792+(a[j]<<2)>>2],f)|0)|0;i=f;ar(c[31892]|0,43480,(f=i,i=i+8|0,c[f>>2]=b[117024+(g<<1)>>1]|0,f)|0)|0;i=f;g=g+1|0;h=c[31892]|0}while((g|0)<26);aD(42144,21,1,h|0)|0;h=c[26690]|0;g=0;do{bG(g);aD(40912,69,1,c[31892]|0)|0;j=c[26690]|0;ar(c[31892]|0,39776,(f=i,i=i+16|0,c[f>>2]=c[9368+(j<<2)>>2],c[f+8>>2]=j,f)|0)|0;i=f;aD(39056,68,1,c[31892]|0)|0;j=0;do{e=0;do{k=a[68960+(e*442|0)+(j*26|0)|0]|0;l=c[31892]|0;if(k<<24>>24==0){ay(a[4688+(a[117112+(e*17|0)+j|0]|0)|0]|0,l|0)|0}else{ay(a[5584+(k<<24>>24)|0]|0,l|0)|0}e=e+1|0;}while((e|0)<67);ay(10,c[31892]|0)|0;j=j+1|0;}while((j|0)<17);av(c[31892]|0)|0;g=g+1|0;}while((g|0)<21);c[26690]=h<<24>>24;bE();aD(38120,29,1,c[31892]|0)|0;ar(c[31892]|0,37384,(f=i,i=i+8|0,c[f>>2]=65,f)|0)|0;i=f;aD(36528,59,1,c[31892]|0)|0;aD(35632,66,1,c[31892]|0)|0;av(c[31892]|0)|0;h=0;g=c[31892]|0;do{j=a[5676+(h*24|0)|0]|0;e=a[5677+(h*24|0)|0]|0;ar(g|0,34816,(f=i,i=i+24|0,c[f>>2]=c[5672+(h*24|0)>>2],c[f+8>>2]=j,c[f+16>>2]=e,f)|0)|0;i=f;e=a[5679+(h*24|0)|0]|0;ar(c[31892]|0,34152,(f=i,i=i+16|0,c[f>>2]=a[5678+(h*24|0)|0]|0,c[f+8>>2]=e,f)|0)|0;i=f;e=b[5684+(h*24|0)>>1]|0;j=c[5688+(h*24|0)>>2]|0;ar(c[31892]|0,33608,(f=i,i=i+24|0,c[f>>2]=b[5682+(h*24|0)>>1]|0,c[f+8>>2]=e,c[f+16>>2]=j,f)|0)|0;i=f;av(c[31892]|0)|0;h=h+1|0;g=c[31892]|0}while(h>>>0<66>>>0);aD(33176,21,1,g|0)|0;g=0;h=c[31892]|0;do{ar(h|0,32768,(f=i,i=i+8|0,c[f>>2]=(c[4136+(g<<2)>>2]|0)+1,f)|0)|0;i=f;g=g+1|0;h=c[31892]|0}while((g|0)<35);av(h|0)|0;aD(32448,21,1,c[31892]|0)|0;h=0;g=c[31892]|0;do{ar(g|0,32768,(f=i,i=i+8|0,c[f>>2]=(c[3856+(h<<2)>>2]|0)+1,f)|0)|0;i=f;h=h+1|0;g=c[31892]|0}while((h|0)<28);av(g|0)|0;aD(32088,14,1,c[31892]|0)|0;aD(31648,35,1,c[31892]|0)|0;aD(31304,51,1,c[31892]|0)|0;g=0;h=c[31892]|0;do{ar(h|0,30896,(f=i,i=i+8|0,c[f>>2]=c[3280+(g<<2)>>2],f)|0)|0;i=f;ar(c[31892]|0,30520,(f=i,i=i+8|0,c[f>>2]=c[2880+(g<<2)>>2],f)|0)|0;i=f;ar(c[31892]|0,30192,(f=i,i=i+8|0,c[f>>2]=c[3120+(g<<2)>>2],f)|0)|0;i=f;g=g+1|0;h=c[31892]|0}while((g|0)<39);av(h|0)|0;aD(29832,14,1,c[31892]|0)|0;aD(29384,17,1,c[31892]|0)|0;aD(29048,34,1,c[31892]|0)|0;h=0;g=c[31892]|0;do{j=a[4688+h|0]|0;e=c[4792+(h<<2)>>2]|0;ar(g|0,28800,(f=i,i=i+24|0,c[f>>2]=h,c[f+8>>2]=j,c[f+16>>2]=e,f)|0)|0;i=f;h=h+1|0;g=c[31892]|0}while((h|0)<101);av(g|0)|0;aD(28488,44,1,c[31892]|0)|0;av(c[31892]|0)|0;ao(c[31892]|0)|0;eR(28248);i=d;return}function bw(){var a=0,b=0;a=0;do{b=fe(36450)|0;c[59232+(a<<2)>>2]=b;if((b|0)==0){de(30,0)}a=a+1|0;}while((a|0)<21);return}function bx(){var b=0,d=0,e=0;b=0;do{c[106672+(b<<2)>>2]=0;a[128488+b|0]=0;d=59232+(b<<2)|0;e=c[d>>2]|0;if((e|0)!=0){ff(e);c[d>>2]=0}b=b+1|0;}while((b|0)<21);return}function by(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;if(!(d>>>0<17>>>0&b>>>0<67>>>0)){g=0;return g|0}if((c[26690]|0)==1&(b|0)==33&(d|0)==16){g=0;return g|0}h=a[117112+(b*17|0)+d|0]|0;if((h-17&255)>>>0<2>>>0){g=0;return g|0}i=((e|0)==0|h<<24>>24==1)&1;if((f|0)==0){g=i;return g|0}else{return((a[68960+(b*442|0)+(d*26|0)|0]|0)==0?i:0)|0}return 0}function bz(a){a=a|0;var b=0,d=0;b=c[14874]|0;d=c[14872]|0;if((a|0)>250){bA(b,d,22,a);return}else{bA(b,d,19,a);return}}function bA(d,e,f,g){d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0;if((f|0)>100){return}h=((ai()|0)%8|0)+1|0;i=(c[26690]|0)==1;if((f-21|0)>>>0>1>>>0&(f|0)!=20&(f|0)!=19){j=0;k=h;L5:while(1){l=(k|0)>8?1:k;m=(a[11e3+l|0]|0)+d|0;n=(a[10984+l|0]|0)+e|0;do{if(n>>>0<17>>>0&m>>>0<67>>>0){if(i&(m|0)==33&(n|0)==16){break}o=a[117112+(m*17|0)+n|0]|0;if((o-17&255)>>>0>1>>>0&o<<24>>24==1){break L5}}}while(0);o=j+1|0;if((o|0)<8){j=o;k=l+1|0}else{p=35;break}}if((p|0)==35){return}a[117112+(m*17|0)+n|0]=f;b[118288+(m*34|0)+(n<<1)>>1]=g;return}L16:do{if(i){n=0;m=h;while(1){k=(m|0)>8?1:m;j=(a[11e3+k|0]|0)+d|0;o=(a[10984+k|0]|0)+e|0;q=117112+(j*17|0)+o|0;r=a[q]|0;s=r<<24>>24;if((s|0)==19){t=j;u=o;v=q;p=15;break L16}else if((s|0)==20){w=j;x=o;y=q;p=17;break L16}else if((s|0)==22){z=j;A=o;B=q;p=20;break L16}else if((s|0)==21){C=j;D=o;E=q;p=23;break L16}do{if(o>>>0<17>>>0&j>>>0<67>>>0){if((j|0)==33&(o|0)==16){break}if((r-17&255)>>>0>1>>>0&r<<24>>24==1){F=j;G=o;H=q;p=29;break L16}}}while(0);q=n+1|0;if((q|0)<8){n=q;m=k+1|0}else{break}}return}else{m=0;n=h;while(1){l=(n|0)>8?1:n;q=(a[11e3+l|0]|0)+d|0;o=(a[10984+l|0]|0)+e|0;j=117112+(q*17|0)+o|0;r=a[j]|0;s=r<<24>>24;if((s|0)==19){t=q;u=o;v=j;p=15;break L16}else if((s|0)==20){w=q;x=o;y=j;p=17;break L16}else if((s|0)==22){z=q;A=o;B=j;p=20;break L16}else if((s|0)==21){C=q;D=o;E=j;p=23;break L16}if(o>>>0<17>>>0&q>>>0<67>>>0){if((r-17&255)>>>0>1>>>0&r<<24>>24==1){F=q;G=o;H=j;p=29;break L16}}j=m+1|0;if((j|0)<8){m=j;n=l+1|0}else{break}}return}}while(0);do{if((p|0)==15){e=118288+(t*34|0)+(u<<1)|0;d=b[e>>1]|0;h=(d<<16>>16)+g|0;if((h|0)>=32767){I=t;J=u;K=v;L=d;p=18;break}b[e>>1]=h;return}else if((p|0)==17){I=w;J=x;K=y;L=b[118288+(w*34|0)+(x<<1)>>1]|0;p=18}else if((p|0)==20){M=z;N=A;O=B;P=b[118288+(z*34|0)+(A<<1)>>1]|0;p=21}else if((p|0)==23){Q=C;R=D;S=E;T=b[118288+(C*34|0)+(D<<1)>>1]|0}else if((p|0)==29){a[H]=f;if((f|0)==22){b[118288+(F*34|0)+(G<<1)>>1]=(g|0)/100|0;return}else{b[118288+(F*34|0)+(G<<1)>>1]=g;return}}}while(0);do{if((p|0)==18){G=((L<<16>>16)*10|0)+g|0;if((G|0)>=327670){M=I;N=J;O=K;P=L;p=21;break}b[118288+(I*34|0)+(J<<1)>>1]=(G|0)/10|0;a[K]=20;return}}while(0);do{if((p|0)==21){K=((P<<16>>16)*100|0)+g|0;if((K|0)>=3276700){Q=M;R=N;S=O;T=P;break}b[118288+(M*34|0)+(N<<1)>>1]=(K|0)/100|0;a[O]=22;return}}while(0);O=118288+(Q*34|0)+(R<<1)|0;R=((T<<16>>16)*1e3|0)+g|0;if((R|0)<32767001){b[O>>1]=(R|0)/1e3|0;a[S]=21;return}else{b[O>>1]=32767;return}}function bB(d){d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;e=10;L1:while(1){f=((ai()|0)%65|0)+1|0;g=((ai()|0)%15|0)+1|0;do{if((a[117112+(f*17|0)+g|0]|0)==1){h=68960+(f*442|0)+(g*26|0)|0;if((a[h]|0)!=0){break}if(!((c[14874]|0)==(f|0)&(c[14872]|0)==(g|0))){break L1}}}while(0);i=e-1|0;if((i|0)>0){e=i}else{j=-1;k=9;break}}if((k|0)==9){return j|0}a[h]=d;a[49776+(f*17|0)+g|0]=0;b[120568+(f*34|0)+(g<<1)>>1]=b[5684+(d*24|0)>>1]|0;j=0;return j|0}function bC(b,c){b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;d=(b|0)<3;e=117112+((b-1|0)*17|0)+c|0;f=b-2|0;g=117112+(f*17|0)+c|0;h=(b|0)>63;i=117112+((b+1|0)*17|0)+c|0;j=b+2|0;k=117112+(j*17|0)+c|0;l=(c|0)<3;m=c-1+(117112+(b*17|0))|0;n=c-2|0;o=117112+(b*17|0)+n|0;p=(c|0)>13;q=c+1+(117112+(b*17|0))|0;r=c+2|0;s=117112+(b*17|0)+r|0;t=((ai()|0)%4|0)+1|0;u=2;while(1){do{if((t|0)==2){if(h){break}if((a[i]|0)!=18){break}if((a[k]|0)!=18){break}a[i]=1;a[k]=1;bC(j,c)}else if((t|0)==1){if(d){break}if((a[e]|0)!=18){break}if((a[g]|0)!=18){break}a[e]=1;a[g]=1;bC(f,c)}else if((t|0)==4){if(p){break}if((a[q]|0)!=18){break}if((a[s]|0)!=18){break}a[q]=1;a[s]=1;bC(b,r)}else if((t|0)==3){if(l){break}if((a[m]|0)!=18){break}if((a[o]|0)!=18){break}a[m]=1;a[o]=1;bC(b,n)}}while(0);v=t+1|0;w=(v|0)>4;x=(w<<31>>31)+u|0;if((x|0)==0){break}else{t=w?1:v;u=x}}return}function bD(){var a=0,b=0;a=c[59232+(c[26690]<<2)>>2]|0;b=a;fk(b|0,120568,2278)|0;fk(a+2278|0,68960,29614)|0;fk(a+31892|0,117112,1139)|0;fk(a+33032|0,118288,2278)|0;fk(a+35310|0,107880,1139)|0;a=c6(b,36450)|0;c[106672+(c[26690]<<2)>>2]=a;return}function bE(){var a=0,b=0,d=0,e=0,f=0;a=i;b=c[26690]|0;d=c[59232+(b<<2)>>2]|0;e=d;fk(120568,e|0,2278)|0;fk(68960,d+2278|0,29614)|0;fk(117112,d+31892|0,1139)|0;fk(118288,d+33032|0,2278)|0;fk(107880,d+35310|0,1139)|0;d=(c[106672+(b<<2)>>2]|0)==0;b=c6(e,36450)|0;e=106672+(c[26690]<<2)|0;if(d){c[e>>2]=b;i=a;return}if((b|0)==(c[e>>2]|0)){i=a;return}eS(34264,(e=i,i=i+1|0,i=i+7&-8,c[e>>2]=0,e)|0);i=e;d=c[26690]|0;f=c[106672+(d<<2)>>2]|0;eS(33696,(e=i,i=i+24|0,c[e>>2]=b,c[e+8>>2]=d,c[e+16>>2]=f,e)|0);i=e;eP();e0(5e3);de(27,0);i=a;return}function bF(c,d,e,f){c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;g=(c|0)<0?0:c;c=(d|0)<0?0:d;d=(e|0)>66?66:e;e=(f|0)>16?16:f;if((g|0)>(d|0)){return}f=(c|0)>(e|0);h=g;while(1){if(f){i=h+1|0}else{g=(h|0)>0;j=h-1|0;k=(h|0)<66;l=h+1|0;m=c;while(1){if((a[117112+(h*17|0)+m|0]|0)==18){if(g){n=((a[117112+(j*17|0)+m|0]|0)-16&255)>>>0<3>>>0|0}else{n=0}if((m|0)<16){o=((a[m+1+(117112+(h*17|0))|0]|0)-16&255)>>>0<3>>>0?n|2:n}else{o=n}if(k){p=((a[117112+(l*17|0)+m|0]|0)-16&255)>>>0<3>>>0?o+4|0:o}else{p=o}q=p&65535;do{if((m|0)>0){if(((a[m-1+(117112+(h*17|0))|0]|0)-16&255)>>>0>=3>>>0){r=q;break}r=p+8&65535}else{r=q}}while(0);b[118288+(h*34|0)+(m<<1)>>1]=r}q=m+1|0;if((q|0)>(e|0)){i=l;break}else{m=q}}}if((i|0)>(d|0)){break}else{h=i}}return}function bG(d){d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,_=0,$=0,aa=0,ab=0,ac=0,ad=0,ae=0,af=0,ag=0,ah=0,aj=0,ak=0,al=0,am=0,an=0,ap=0,aq=0,ar=0,as=0,au=0,av=0,ax=0,ay=0,az=0,aA=0,aB=0,aC=0,aD=0,aE=0,aF=0,aG=0,aH=0,aI=0,aJ=0,aK=0,aL=0,aM=0,aN=0,aO=0,aP=0,aR=0,aS=0,aT=0,aU=0,aV=0,aW=0,aX=0,aY=0,aZ=0,a_=0,a$=0,a0=0,a1=0,a2=0,a3=0,a4=0,a5=0,a6=0,a7=0,a8=0,a9=0,ba=0,bb=0,bc=0,bd=0,be=0,bf=0,bg=0,bh=0,bi=0,bj=0,bk=0,bl=0,bm=0,bn=0,bo=0,bp=0,bq=0,br=0,bs=0,bt=0,bu=0,bv=0,bw=0,bx=0,by=0,bz=0,bA=0,bB=0,bD=0,bG=0,bH=0,bI=0,bK=0,bL=0,bN=0,bO=0,bP=0,bQ=0,bR=0,bS=0,bT=0,bU=0,bV=0,bW=0,bX=0,bY=0,bZ=0,b_=0,b$=0,b0=0,b1=0,b2=0,b3=0,b4=0,b5=0,b6=0,b7=0,b8=0,b9=0,ca=0,cb=0,cc=0,ce=0,cf=0,cg=0,ch=0,ci=0,cj=0,ck=0,cl=0,cm=0,cn=0,co=0,cp=0,cq=0,cr=0,cs=0,ct=0,cu=0,cv=0,cx=0,cy=0,cz=0,cA=0,cB=0,cC=0,cD=0,cE=0,cF=0,cG=0,cH=0,cI=0,cJ=0,cK=0,cL=0,cM=0,cN=0,cO=0,cP=0,cQ=0,cR=0,cS=0,cT=0,cU=0,cV=0,cW=0,cX=0,cY=0,cZ=0,c_=0,c$=0,c0=0,c1=0,c3=0,c4=0,c5=0;e=i;i=i+136|0;f=e|0;g=e+8|0;h=c[26690]|0;if((a[128488+h|0]|0)==0){j=h}else{k=c[59232+(h<<2)>>2]|0;h=k;fk(h|0,120568,2278)|0;fk(k+2278|0,68960,29614)|0;fk(k+31892|0,117112,1139)|0;fk(k+33032|0,118288,2278)|0;fk(k+35310|0,107880,1139)|0;k=c6(h,36450)|0;h=c[26690]|0;c[106672+(h<<2)>>2]=k;j=h}if((j|0)==0){c[32056]=0}c[26712]=-1;c[26710]=-1;j=d<<24>>24;c[26690]=j;c[32045]=j;j=128488+d|0;if((a[j]|0)==0){l=0}else{bE();h=c[26690]|0;L9:do{if((h|0)==0){m=0}else{k=(h>>1)+1|0;if((k|0)>0){n=1;o=h}else{m=0;break}while(1){p=cd(o)|0;q=10;L13:do{r=((ai()|0)%65|0)+1|0;s=((ai()|0)%15|0)+1|0;do{if((a[117112+(r*17|0)+s|0]|0)==1){t=68960+(r*442|0)+(s*26|0)|0;if((a[t]|0)!=0){break}if(!((c[14874]|0)==(r|0)&(c[14872]|0)==(s|0))){u=12;break L13}}}while(0);q=q-1|0;}while((q|0)>0);if((u|0)==12){u=0;a[t]=p;a[49776+(r*17|0)+s|0]=0;b[120568+(r*34|0)+(s<<1)>>1]=b[5684+(p*24|0)>>1]|0}if((n|0)>=(k|0)){m=0;break L9}n=n+1|0;o=c[26690]|0}}}while(0);do{o=0;do{n=68960+(o*442|0)+(m*26|0)|0;if((c[5692+((a[n]|0)*24|0)>>2]&1|0)!=0){a[n]=0}o=o+1|0;}while((o|0)<67);m=m+1|0;}while((m|0)<17);cw();i=e;return}do{m=0;do{a[107880+(m*17|0)+l|0]=0;a[68960+(m*442|0)+(l*26|0)|0]=0;m=m+1|0;}while((m|0)<67);l=l+1|0;}while((l|0)<17);l=(d|0)>0;L39:do{if(l){m=g|0;o=(d|0)!=15;n=(d|0)==20;if(!((d|0)==20|(d|0)==15)){if((((ai()|0)%100|0)+1|0)<50){u=50;break}}s=aw(106856,33360)|0;if((s|0)==0){u=50;break}r=(ai()|0)%20|0;L45:do{if((r|0)>0){t=0;L46:while(1){h=0;while(1){if((h|0)>=18){break}if((at(m|0,128,s|0)|0)==0){break L46}else{h=h+1|0}}t=t+1|0;if((t|0)>=(r|0)){break L45}}aQ(32816);ao(s|0)|0;u=50;break L39}}while(0);r=o?1:23;t=o?0:64;p=(d|0)<11;h=d+1|0;k=0;while(1){q=at(m|0,128,s|0)|0;if((q|0)==0){u=37;break}else{v=0;w=q}while(1){c[f>>2]=0;L58:do{switch(a[w]|0){case 46:{if(p){x=0;y=0;z=1;A=0;break L58}q=cd(h)|0;x=q&255;y=b[5684+(q*24|0)>>1]|0;z=1;A=0;break};case 45:{x=0;y=0;z=(bJ(h,f)|0)&255;A=c[f>>2]&65535;break};case 35:{x=0;y=0;z=18;A=0;break};case 68:{q=((ai()|0)%30|0)+1|0;c[f>>2]=q;x=0;y=0;z=17;A=q&65535;break};case 126:{x=t;y=o?0:b[3610]|0;z=r;A=0;break};case 33:{if(!n){x=0;y=0;z=1;A=0;break L58}c[f>>2]=21;x=65;y=b[3622]|0;z=56;A=21;break};default:{x=0;y=0;z=1;A=0}}}while(0);a[117112+(v*17|0)+k|0]=z;b[118288+(v*34|0)+(k<<1)>>1]=A;a[68960+(v*442|0)+(k*26|0)|0]=x;b[120568+(v*34|0)+(k<<1)>>1]=y;a[107880+(v*17|0)+k|0]=(a[47648]|0)==0?0:z;q=v+1|0;if((q|0)<67){v=q;w=w+1|0}else{break}}q=k+1|0;if((q|0)<17){k=q}else{u=49;break}}if((u|0)==49){ao(s|0)|0;u=80;break}else if((u|0)==37){aQ(32816);ao(s|0)|0;u=50;break}}else{u=50}}while(0);L72:do{if((u|0)==50){w=(d|0)==0;v=w?1:18;z=0;do{y=0;do{a[117112+(y*17|0)+z|0]=v;y=y+1|0;}while((y|0)<67);z=z+1|0;}while((z|0)<17);if(w){bF(0,0,66,16);u=83;break}bC(1,1);do{if(!((d|0)==20|(d|0)==15)){z=((ai()|0)%3|0)+4|0;if((z|0)>0){v=(d|0)<16;s=0;do{y=(ai()|0)%11|0;x=(ai()|0)%2|0;A=y+2-x|0;f=(ai()|0)%2|0;g=y+4+f|0;y=ai()|0;if(v){k=(y|0)%44|0;n=k+5-((ai()|0)%4|0)|0;B=0;C=n;D=k+10+((ai()|0)%12|0)|0}else{k=(y|0)%60|0;y=k+3-((ai()|0)%2|0)|0;n=k+5+((ai()|0)%2|0)|0;B=cd(d)|0;C=y;D=n}if((C|0)<(D|0)){n=(A|0)<(g|0);y=(B|0)==0;k=B&255;r=5684+(B*24|0)|0;o=x+2+f|0;f=C;x=0;while(1){do{if(n){fl(117112+((x+C|0)*17|0)+A|0,1,o|0)|0;if(y){break}else{E=A}do{a[68960+(f*442|0)+(E*26|0)|0]=k;b[120568+(f*34|0)+(E<<1)>>1]=b[r>>1]|0;E=E+1|0;}while((E|0)<(g|0))}}while(0);t=f+1|0;if((t|0)<(D|0)){f=t;x=x+1|0}else{break}}}s=s+1|0;}while((s|0)<(z|0))}if((d|0)==20|(d|0)==15){break}z=((ai()|0)%15|0)+1|0;s=1;do{a[117112+(s*17|0)+z|0]=1;s=s+1|0;}while((s|0)<66);if((d|0)<=4){u=80;break L72}}}while(0);w=((ai()|0)%10|0)+2|0;if((w|0)<57){F=w}else{u=80;break}while(1){if((d|0)==20|(d|0)==15){u=76}else{if((((ai()|0)%10|0)+1|0)<3){u=76}else{G=F}}do{if((u|0)==76){u=0;w=((ai()|0)%6|0)+4|0;s=((ai()|0)%3|0)+4|0;z=((ai()|0)%8|0)+2|0;if((d|0)==20|(d|0)==15){v=F+1+((ai()|0)%43|0)|0;bM(d,w,s,v,z,((ai()|0)%3|0)+7|0);G=v;break}else{bM(d,w,s,F,z,((ai()|0)%9|0)+1|0);G=F;break}}}while(0);z=G+10|0;if((z|0)<57){F=z}else{u=80;break}}}}while(0);L119:do{if((u|0)==80){do{if((d|0)==1){a[117689]=1;bF(0,0,66,16);H=1}else{bF(0,0,66,16);if((d|0)==0){u=83;break L119}else if((d|0)!=16){H=0;break}F=((ai()|0)%65|0)+1|0;G=((ai()|0)%15|0)+1|0;D=117112+(F*17|0)+G|0;if((a[D]|0)==1){I=F;J=G;K=D}else{D=F;F=G;while(1){G=D-1+((ai()|0)%3|0)|0;E=F-1+((ai()|0)%3|0)|0;C=(G|0)>65?1:G;G=(C|0)<1?65:C;C=(E|0)>15?1:E;E=(C|0)<1?15:C;C=117112+(G*17|0)+E|0;if((a[C]|0)==1){I=G;J=E;K=C;break}else{D=G;F=E}}}a[K]=81;b[118288+(I*34|0)+(J<<1)>>1]=0;H=0}}while(0);F=(d|0)!=15;if(l&F&(d|0)<18){D=((ai()|0)%65|0)+1|0;E=((ai()|0)%15|0)+1|0;G=117112+(D*17|0)+E|0;if((a[G]|0)==1){L=D;M=E;N=G}else{G=D;D=E;while(1){E=G-1+((ai()|0)%3|0)|0;C=D-1+((ai()|0)%3|0)|0;B=(E|0)>65?1:E;E=(B|0)<1?65:B;B=(C|0)>15?1:C;C=(B|0)<1?15:B;B=117112+(E*17|0)+C|0;if((a[B]|0)==1){L=E;M=C;N=B;break}else{G=E;D=C}}}a[N]=13;b[118288+(L*34|0)+(M<<1)>>1]=0}if((d|0)>1&F){D=((ai()|0)%65|0)+1|0;G=((ai()|0)%15|0)+1|0;C=117112+(D*17|0)+G|0;if((a[C]|0)==1){O=D;P=G;Q=C}else{C=D;D=G;while(1){G=C-1+((ai()|0)%3|0)|0;E=D-1+((ai()|0)%3|0)|0;B=(G|0)>65?1:G;G=(B|0)<1?65:B;B=(E|0)>15?1:E;E=(B|0)<1?15:B;B=117112+(G*17|0)+E|0;if((a[B]|0)==1){O=G;P=E;Q=B;break}else{C=G;D=E}}}a[Q]=7;b[118288+(O*34|0)+(P<<1)>>1]=0}D=(d|0)>3;do{if(D&(d|0)!=16&(d|0)!=20&F&(c[32095]|0)==0){if((((ai()|0)%100|0)+1|0)<=85){break}C=((ai()|0)%65|0)+1|0;E=((ai()|0)%15|0)+1|0;G=117112+(C*17|0)+E|0;if((a[G]|0)==1){R=C;S=E;T=G}else{G=C;C=E;while(1){E=G-1+((ai()|0)%3|0)|0;B=C-1+((ai()|0)%3|0)|0;z=(E|0)>65?1:E;E=(z|0)<1?65:z;z=(B|0)>15?1:B;B=(z|0)<1?15:z;z=117112+(E*17|0)+B|0;if((a[z]|0)==1){R=E;S=B;T=z;break}else{G=E;C=B}}}a[T]=8;b[118288+(R*34|0)+(S<<1)>>1]=0;c[32095]=(c[32095]|0)+1}}while(0);do{if(l){if(!(((d|0)<11|(d|0)==15|(d|0)==20)&(c[32096]|0)==0)){break}if((((ai()|0)%100|0)+1|0)<=85){break}F=((ai()|0)%65|0)+1|0;C=((ai()|0)%15|0)+1|0;G=117112+(F*17|0)+C|0;if((a[G]|0)==1){U=F;V=C;W=G}else{G=F;F=C;while(1){C=G-1+((ai()|0)%3|0)|0;B=F-1+((ai()|0)%3|0)|0;E=(C|0)>65?1:C;C=(E|0)<1?65:E;E=(B|0)>15?1:B;B=(E|0)<1?15:E;E=117112+(C*17|0)+B|0;if((a[E]|0)==1){U=C;V=B;W=E;break}else{G=C;F=B}}}a[W]=14;b[118288+(U*34|0)+(V<<1)>>1]=0;c[32096]=(c[32096]|0)+1}}while(0);F=(ai()|0)%3|0;if((F|0)>0){G=d&65535;B=0;do{C=((ai()|0)%65|0)+1|0;E=((ai()|0)%15|0)+1|0;z=117112+(C*17|0)+E|0;if((a[z]|0)==1){X=C;Y=E;_=z}else{z=C;C=E;while(1){E=z-1+((ai()|0)%3|0)|0;s=C-1+((ai()|0)%3|0)|0;w=(E|0)>65?1:E;E=(w|0)<1?65:w;w=(s|0)>15?1:s;s=(w|0)<1?15:w;w=117112+(E*17|0)+s|0;if((a[w]|0)==1){X=E;Y=s;_=w;break}else{z=E;C=s}}}a[_]=57;b[118288+(X*34|0)+(Y<<1)>>1]=G;B=B+1|0;}while((B|0)<(F|0))}F=(ai()|0)%3|0;if((F|0)>0){B=0;do{G=((ai()|0)%65|0)+1|0;C=((ai()|0)%15|0)+1|0;z=117112+(G*17|0)+C|0;if((a[z]|0)==1){$=G;aa=C;ab=z}else{z=G;G=C;while(1){C=z-1+((ai()|0)%3|0)|0;s=G-1+((ai()|0)%3|0)|0;E=(C|0)>65?1:C;C=(E|0)<1?65:E;E=(s|0)>15?1:s;s=(E|0)<1?15:E;E=117112+(C*17|0)+s|0;if((a[E]|0)==1){$=C;aa=s;ab=E;break}else{z=C;G=s}}}a[ab]=94;b[118288+($*34|0)+(aa<<1)>>1]=0;B=B+1|0;}while((B|0)<(F|0))}F=(ai()|0)%3|0;if((F|0)>0){B=0;do{G=((ai()|0)%65|0)+1|0;z=((ai()|0)%15|0)+1|0;s=117112+(G*17|0)+z|0;if((a[s]|0)==1){ac=G;ad=z;ae=s}else{s=G;G=z;while(1){z=s-1+((ai()|0)%3|0)|0;C=G-1+((ai()|0)%3|0)|0;E=(z|0)>65?1:z;z=(E|0)<1?65:E;E=(C|0)>15?1:C;C=(E|0)<1?15:E;E=117112+(z*17|0)+C|0;if((a[E]|0)==1){ac=z;ad=C;ae=E;break}else{s=z;G=C}}}a[ae]=2;b[118288+(ac*34|0)+(ad<<1)>>1]=0;B=B+1|0;}while((B|0)<(F|0))}F=(ai()|0)%3|0;if((F|0)>0){B=0;do{G=((ai()|0)%65|0)+1|0;s=((ai()|0)%15|0)+1|0;C=117112+(G*17|0)+s|0;if((a[C]|0)==1){af=G;ag=s;ah=C}else{C=G;G=s;while(1){s=C-1+((ai()|0)%3|0)|0;z=G-1+((ai()|0)%3|0)|0;E=(s|0)>65?1:s;s=(E|0)<1?65:E;E=(z|0)>15?1:z;z=(E|0)<1?15:E;E=117112+(s*17|0)+z|0;if((a[E]|0)==1){af=s;ag=z;ah=E;break}else{C=s;G=z}}}a[ah]=10;b[118288+(af*34|0)+(ag<<1)>>1]=0;B=B+1|0;}while((B|0)<(F|0))}F=(ai()|0)%3|0;if((F|0)>0){B=0;do{G=((ai()|0)%65|0)+1|0;C=((ai()|0)%15|0)+1|0;z=117112+(G*17|0)+C|0;if((a[z]|0)==1){aj=G;ak=C;al=z}else{z=G;G=C;while(1){C=z-1+((ai()|0)%3|0)|0;s=G-1+((ai()|0)%3|0)|0;E=(C|0)>65?1:C;C=(E|0)<1?65:E;E=(s|0)>15?1:s;s=(E|0)<1?15:E;E=117112+(C*17|0)+s|0;if((a[E]|0)==1){aj=C;ak=s;al=E;break}else{z=C;G=s}}}a[al]=9;b[118288+(aj*34|0)+(ak<<1)>>1]=0;B=B+1|0;}while((B|0)<(F|0))}F=(ai()|0)%2|0;if((F|0)>0){B=0;do{G=((ai()|0)%65|0)+1|0;z=((ai()|0)%15|0)+1|0;s=117112+(G*17|0)+z|0;if((a[s]|0)==1){am=G;an=z;ap=s}else{s=G;G=z;while(1){z=s-1+((ai()|0)%3|0)|0;C=G-1+((ai()|0)%3|0)|0;E=(z|0)>65?1:z;z=(E|0)<1?65:E;E=(C|0)>15?1:C;C=(E|0)<1?15:E;E=117112+(z*17|0)+C|0;if((a[E]|0)==1){am=z;an=C;ap=E;break}else{s=z;G=C}}}a[ap]=3;b[118288+(am*34|0)+(an<<1)>>1]=0;B=B+1|0;}while((B|0)<(F|0))}F=(ai()|0)%2|0;if((F|0)>0){B=0;do{G=((ai()|0)%65|0)+1|0;s=((ai()|0)%15|0)+1|0;C=117112+(G*17|0)+s|0;if((a[C]|0)==1){aq=G;ar=s;as=C}else{C=G;G=s;while(1){s=C-1+((ai()|0)%3|0)|0;z=G-1+((ai()|0)%3|0)|0;E=(s|0)>65?1:s;s=(E|0)<1?65:E;E=(z|0)>15?1:z;z=(E|0)<1?15:E;E=117112+(s*17|0)+z|0;if((a[E]|0)==1){aq=s;ar=z;as=E;break}else{C=s;G=z}}}a[as]=12;b[118288+(aq*34|0)+(ar<<1)>>1]=0;B=B+1|0;}while((B|0)<(F|0))}F=ai()|0;do{if((d|0)>17){B=((F|0)%65|0)+1|0;G=((ai()|0)%15|0)+1|0;C=117112+(B*17|0)+G|0;if((a[C]|0)==1){au=B;av=G;ax=C}else{C=B;B=G;while(1){G=C-1+((ai()|0)%3|0)|0;z=B-1+((ai()|0)%3|0)|0;s=(G|0)>65?1:G;G=(s|0)<1?65:s;s=(z|0)>15?1:z;z=(s|0)<1?15:s;s=117112+(G*17|0)+z|0;if((a[s]|0)==1){au=G;av=z;ax=s;break}else{C=G;B=z}}}a[ax]=6;b[118288+(au*34|0)+(av<<1)>>1]=0;B=(ai()|0)%3|0;if((B|0)>0){C=0;do{z=((ai()|0)%65|0)+1|0;G=((ai()|0)%15|0)+1|0;s=117112+(z*17|0)+G|0;if((a[s]|0)==1){ay=z;az=G;aA=s}else{s=z;z=G;while(1){G=s-1+((ai()|0)%3|0)|0;E=z-1+((ai()|0)%3|0)|0;w=(G|0)>65?1:G;G=(w|0)<1?65:w;w=(E|0)>15?1:E;E=(w|0)<1?15:w;w=117112+(G*17|0)+E|0;if((a[w]|0)==1){ay=G;az=E;aA=w;break}else{s=G;z=E}}}a[aA]=6;b[118288+(ay*34|0)+(az<<1)>>1]=0;C=C+1|0;}while((C|0)<(B|0))}B=((ai()|0)%65|0)+1|0;C=((ai()|0)%15|0)+1|0;z=117112+(B*17|0)+C|0;if((a[z]|0)==1){aB=B;aC=C;aD=z}else{z=B;B=C;while(1){C=z-1+((ai()|0)%3|0)|0;s=B-1+((ai()|0)%3|0)|0;E=(C|0)>65?1:C;C=(E|0)<1?65:E;E=(s|0)>15?1:s;s=(E|0)<1?15:E;E=117112+(C*17|0)+s|0;if((a[E]|0)==1){aB=C;aC=s;aD=E;break}else{z=C;B=s}}}a[aD]=91;b[118288+(aB*34|0)+(aC<<1)>>1]=0}else{B=(F|0)%3|0;if((B|0)>0){aE=0}else{break}do{z=((ai()|0)%65|0)+1|0;s=((ai()|0)%15|0)+1|0;C=117112+(z*17|0)+s|0;if((a[C]|0)==1){aF=z;aG=s;aH=C}else{C=z;z=s;while(1){s=C-1+((ai()|0)%3|0)|0;E=z-1+((ai()|0)%3|0)|0;G=(s|0)>65?1:s;s=(G|0)<1?65:G;G=(E|0)>15?1:E;E=(G|0)<1?15:G;G=117112+(s*17|0)+E|0;if((a[G]|0)==1){aF=s;aG=E;aH=G;break}else{C=s;z=E}}}a[aH]=6;b[118288+(aF*34|0)+(aG<<1)>>1]=0;aE=aE+1|0;}while((aE|0)<(B|0))}}while(0);F=(ai()|0)%2|0;if((F|0)>0){B=0;do{z=((ai()|0)%65|0)+1|0;C=((ai()|0)%15|0)+1|0;E=117112+(z*17|0)+C|0;if((a[E]|0)==1){aI=z;aJ=C;aK=E}else{E=z;z=C;while(1){C=E-1+((ai()|0)%3|0)|0;s=z-1+((ai()|0)%3|0)|0;G=(C|0)>65?1:C;C=(G|0)<1?65:G;G=(s|0)>15?1:s;s=(G|0)<1?15:G;G=117112+(C*17|0)+s|0;if((a[G]|0)==1){aI=C;aJ=s;aK=G;break}else{E=C;z=s}}}a[aK]=91;b[118288+(aI*34|0)+(aJ<<1)>>1]=0;B=B+1|0;}while((B|0)<(F|0))}F=(ai()|0)%2|0;if((F|0)>0){B=0;do{z=((ai()|0)%65|0)+1|0;E=((ai()|0)%15|0)+1|0;s=117112+(z*17|0)+E|0;if((a[s]|0)==1){aL=z;aM=E;aN=s}else{s=z;z=E;while(1){E=s-1+((ai()|0)%3|0)|0;C=z-1+((ai()|0)%3|0)|0;G=(E|0)>65?1:E;E=(G|0)<1?65:G;G=(C|0)>15?1:C;C=(G|0)<1?15:G;G=117112+(E*17|0)+C|0;if((a[G]|0)==1){aL=E;aM=C;aN=G;break}else{s=E;z=C}}}a[aN]=86;b[118288+(aL*34|0)+(aM<<1)>>1]=0;B=B+1|0;}while((B|0)<(F|0))}F=((ai()|0)%3|0)-1|0;if((F|0)>0){B=0;do{z=((ai()|0)%65|0)+1|0;s=((ai()|0)%15|0)+1|0;C=117112+(z*17|0)+s|0;if((a[C]|0)==1){aO=z;aP=s;aR=C}else{C=z;z=s;while(1){s=C-1+((ai()|0)%3|0)|0;E=z-1+((ai()|0)%3|0)|0;G=(s|0)>65?1:s;s=(G|0)<1?65:G;G=(E|0)>15?1:E;E=(G|0)<1?15:G;G=117112+(s*17|0)+E|0;if((a[G]|0)==1){aO=s;aP=E;aR=G;break}else{C=s;z=E}}}a[aR]=92;b[118288+(aO*34|0)+(aP<<1)>>1]=0;B=B+1|0;}while((B|0)<(F|0))}F=((ai()|0)%3|0)-1|0;if((F|0)>0){B=0;do{z=((ai()|0)%65|0)+1|0;C=((ai()|0)%15|0)+1|0;E=117112+(z*17|0)+C|0;if((a[E]|0)==1){aS=z;aT=C;aU=E}else{E=z;z=C;while(1){C=E-1+((ai()|0)%3|0)|0;s=z-1+((ai()|0)%3|0)|0;G=(C|0)>65?1:C;C=(G|0)<1?65:G;G=(s|0)>15?1:s;s=(G|0)<1?15:G;G=117112+(C*17|0)+s|0;if((a[G]|0)==1){aS=C;aT=s;aU=G;break}else{E=C;z=s}}}a[aU]=88;b[118288+(aS*34|0)+(aT<<1)>>1]=0;B=B+1|0;}while((B|0)<(F|0))}F=ai()|0;do{if(H){B=((F|0)%65|0)+1|0;z=((ai()|0)%15|0)+1|0;E=117112+(B*17|0)+z|0;if((a[E]|0)==1){aV=B;aW=z;aX=E}else{E=B;B=z;while(1){z=E-1+((ai()|0)%3|0)|0;s=B-1+((ai()|0)%3|0)|0;C=(z|0)>65?1:z;z=(C|0)<1?65:C;C=(s|0)>15?1:s;s=(C|0)<1?15:C;C=117112+(z*17|0)+s|0;if((a[C]|0)==1){aV=z;aW=s;aX=C;break}else{E=z;B=s}}}a[aX]=58;b[118288+(aV*34|0)+(aW<<1)>>1]=1}else{B=(F|0)%2|0;if((B|0)<=0){break}E=d&65535;s=0;do{z=((ai()|0)%65|0)+1|0;C=((ai()|0)%15|0)+1|0;G=117112+(z*17|0)+C|0;if((a[G]|0)==1){aY=z;aZ=C;a_=G}else{G=z;z=C;while(1){C=G-1+((ai()|0)%3|0)|0;w=z-1+((ai()|0)%3|0)|0;v=(C|0)>65?1:C;C=(v|0)<1?65:v;v=(w|0)>15?1:w;w=(v|0)<1?15:v;v=117112+(C*17|0)+w|0;if((a[v]|0)==1){aY=C;aZ=w;a_=v;break}else{G=C;z=w}}}a[a_]=58;b[118288+(aY*34|0)+(aZ<<1)>>1]=E;s=s+1|0;}while((s|0)<(B|0))}}while(0);do{if((d|0)<16){F=(ai()|0)%2|0;B=ai()|0;if((F|0)>0){s=((B|0)%(d*10|0|1|0)|0)+11&65535;B=0;do{E=((ai()|0)%65|0)+1|0;z=((ai()|0)%15|0)+1|0;G=117112+(E*17|0)+z|0;if((a[G]|0)==1){a$=E;a0=z;a1=G}else{G=E;E=z;while(1){z=G-1+((ai()|0)%3|0)|0;w=E-1+((ai()|0)%3|0)|0;C=(z|0)>65?1:z;z=(C|0)<1?65:C;C=(w|0)>15?1:w;w=(C|0)<1?15:C;C=117112+(z*17|0)+w|0;if((a[C]|0)==1){a$=z;a0=w;a1=C;break}else{G=z;E=w}}}a[a1]=71;b[118288+(a$*34|0)+(a0<<1)>>1]=s;B=B+1|0;}while((B|0)<(F|0))}F=(ai()|0)%2|0;B=ai()|0;if((F|0)>0){s=((B|0)%(d*6|0|1|0)|0)+7&65535;B=0;do{E=((ai()|0)%65|0)+1|0;G=((ai()|0)%15|0)+1|0;w=117112+(E*17|0)+G|0;if((a[w]|0)==1){a2=E;a3=G;a4=w}else{w=E;E=G;while(1){G=w-1+((ai()|0)%3|0)|0;z=E-1+((ai()|0)%3|0)|0;C=(G|0)>65?1:G;G=(C|0)<1?65:C;C=(z|0)>15?1:z;z=(C|0)<1?15:C;C=117112+(G*17|0)+z|0;if((a[C]|0)==1){a2=G;a3=z;a4=C;break}else{w=G;E=z}}}a[a4]=72;b[118288+(a2*34|0)+(a3<<1)>>1]=s;B=B+1|0;}while((B|0)<(F|0))}F=(ai()|0)%2|0;B=ai()|0;if((F|0)>0){s=((B|0)%(d<<2|1|0)|0)+5&65535;B=0;do{E=((ai()|0)%65|0)+1|0;w=((ai()|0)%15|0)+1|0;z=117112+(E*17|0)+w|0;if((a[z]|0)==1){a5=E;a6=w;a7=z}else{z=E;E=w;while(1){w=z-1+((ai()|0)%3|0)|0;G=E-1+((ai()|0)%3|0)|0;C=(w|0)>65?1:w;w=(C|0)<1?65:C;C=(G|0)>15?1:G;G=(C|0)<1?15:C;C=117112+(w*17|0)+G|0;if((a[C]|0)==1){a5=w;a6=G;a7=C;break}else{z=w;E=G}}}a[a7]=73;b[118288+(a5*34|0)+(a6<<1)>>1]=s;B=B+1|0;}while((B|0)<(F|0))}F=(ai()|0)%2|0;B=ai()|0;if((F|0)<=0){break}s=((B|0)%((d*3|0)+1|0)|0)+3&65535;B=0;do{E=((ai()|0)%65|0)+1|0;z=((ai()|0)%15|0)+1|0;G=117112+(E*17|0)+z|0;if((a[G]|0)==1){a8=E;a9=z;ba=G}else{G=E;E=z;while(1){z=G-1+((ai()|0)%3|0)|0;w=E-1+((ai()|0)%3|0)|0;C=(z|0)>65?1:z;z=(C|0)<1?65:C;C=(w|0)>15?1:w;w=(C|0)<1?15:C;C=117112+(z*17|0)+w|0;if((a[C]|0)==1){a8=z;a9=w;ba=C;break}else{G=z;E=w}}}a[ba]=74;b[118288+(a8*34|0)+(a9<<1)>>1]=s;B=B+1|0;}while((B|0)<(F|0))}}while(0);F=((ai()|0)%4|0)+4|0;if((F|0)>0){B=0;do{s=c2()|0;E=((ai()|0)%65|0)+1|0;G=((ai()|0)%15|0)+1|0;w=117112+(E*17|0)+G|0;if((a[w]|0)==1){bb=E;bc=G;bd=w}else{w=E;E=G;while(1){G=w-1+((ai()|0)%3|0)|0;z=E-1+((ai()|0)%3|0)|0;C=(G|0)>65?1:G;G=(C|0)<1?65:C;C=(z|0)>15?1:z;z=(C|0)<1?15:C;C=117112+(G*17|0)+z|0;if((a[C]|0)==1){bb=G;bc=z;bd=C;break}else{w=G;E=z}}}a[bd]=56;b[118288+(bb*34|0)+(bc<<1)>>1]=s;B=B+1|0;}while((B|0)<(F|0))}F=((ai()|0)%5|0)+4|0;if((F|0)>0){B=0;do{E=dg()|0;w=((ai()|0)%65|0)+1|0;z=((ai()|0)%15|0)+1|0;G=117112+(w*17|0)+z|0;if((a[G]|0)==1){be=w;bf=z;bg=G}else{G=w;w=z;while(1){z=G-1+((ai()|0)%3|0)|0;C=w-1+((ai()|0)%3|0)|0;v=(z|0)>65?1:z;z=(v|0)<1?65:v;v=(C|0)>15?1:C;C=(v|0)<1?15:v;v=117112+(z*17|0)+C|0;if((a[v]|0)==1){be=z;bf=C;bg=v;break}else{G=z;w=C}}}a[bg]=55;b[118288+(be*34|0)+(bf<<1)>>1]=E;B=B+1|0;}while((B|0)<(F|0))}F=((ai()|0)%12|0)+12|0;if((F|0)>0){B=d+1|0;w=(d<<3)+22|0;G=0;do{s=w+(((ai()|0)%(B|0)|0)*12|0)|0;C=((ai()|0)%65|0)+1|0;z=((ai()|0)%15|0)+1|0;v=117112+(C*17|0)+z|0;if((a[v]|0)==1){bh=C;bi=z;bj=v}else{v=C;C=z;while(1){z=v-1+((ai()|0)%3|0)|0;x=C-1+((ai()|0)%3|0)|0;f=(z|0)>65?1:z;z=(f|0)<1?65:f;f=(x|0)>15?1:x;x=(f|0)<1?15:f;f=117112+(z*17|0)+x|0;if((a[f]|0)==1){bh=z;bi=x;bj=f;break}else{v=z;C=x}}}a[bj]=19;b[118288+(bh*34|0)+(bi<<1)>>1]=s;G=G+1|0;}while((G|0)<(F|0))}if((d|0)==8){F=((ai()|0)%65|0)+1|0;G=((ai()|0)%15|0)+1|0;B=117112+(F*17|0)+G|0;if((a[B]|0)==1){bk=F;bl=G;bm=B}else{B=F;F=G;while(1){G=B-1+((ai()|0)%3|0)|0;w=F-1+((ai()|0)%3|0)|0;C=(G|0)>65?1:G;G=(C|0)<1?65:C;C=(w|0)>15?1:w;w=(C|0)<1?15:C;C=117112+(G*17|0)+w|0;if((a[C]|0)==1){bk=G;bl=w;bm=C;break}else{B=G;F=w}}}a[bm]=77;b[118288+(bk*34|0)+(bl<<1)>>1]=0}do{if((c[32111]|0)==0&D){if((((ai()|0)%100|0)+1|0)<=75){break}F=((ai()|0)%65|0)+1|0;B=((ai()|0)%15|0)+1|0;w=117112+(F*17|0)+B|0;if((a[w]|0)==1){bn=F;bo=B;bp=w}else{w=F;F=B;while(1){B=w-1+((ai()|0)%3|0)|0;G=F-1+((ai()|0)%3|0)|0;C=(B|0)>65?1:B;B=(C|0)<1?65:C;C=(G|0)>15?1:G;G=(C|0)<1?15:C;C=117112+(B*17|0)+G|0;if((a[C]|0)==1){bn=B;bo=G;bp=C;break}else{w=B;F=G}}}a[bp]=85;b[118288+(bn*34|0)+(bo<<1)>>1]=0;c[32111]=(c[32111]|0)+1}}while(0);if((((ai()|0)%151|0)+1|0)<2){F=((ai()|0)%65|0)+1|0;w=((ai()|0)%15|0)+1|0;s=117112+(F*17|0)+w|0;if((a[s]|0)==1){bq=F;br=w;bs=s}else{s=F;F=w;while(1){w=s-1+((ai()|0)%3|0)|0;G=F-1+((ai()|0)%3|0)|0;B=(w|0)>65?1:w;w=(B|0)<1?65:B;B=(G|0)>15?1:G;G=(B|0)<1?15:B;B=117112+(w*17|0)+G|0;if((a[B]|0)==1){bq=w;br=G;bs=B;break}else{s=w;F=G}}}a[bs]=27;b[118288+(bq*34|0)+(br<<1)>>1]=0}if(((ai()|0)%151|0|0)<0){F=((ai()|0)%65|0)+1|0;s=((ai()|0)%15|0)+1|0;G=117112+(F*17|0)+s|0;if((a[G]|0)==1){bt=F;bu=s;bv=G}else{G=F;F=s;while(1){s=G-1+((ai()|0)%3|0)|0;w=F-1+((ai()|0)%3|0)|0;B=(s|0)>65?1:s;s=(B|0)<1?65:B;B=(w|0)>15?1:w;w=(B|0)<1?15:B;B=117112+(s*17|0)+w|0;if((a[B]|0)==1){bt=s;bu=w;bv=B;break}else{G=s;F=w}}}a[bv]=28;b[118288+(bt*34|0)+(bu<<1)>>1]=0}if((((ai()|0)%151|0)+1|0)<3){F=((ai()|0)%65|0)+1|0;G=((ai()|0)%15|0)+1|0;w=117112+(F*17|0)+G|0;if((a[w]|0)==1){bw=F;bx=G;by=w}else{w=F;F=G;while(1){G=w-1+((ai()|0)%3|0)|0;s=F-1+((ai()|0)%3|0)|0;B=(G|0)>65?1:G;G=(B|0)<1?65:B;B=(s|0)>15?1:s;s=(B|0)<1?15:B;B=117112+(G*17|0)+s|0;if((a[B]|0)==1){bw=G;bx=s;by=B;break}else{w=G;F=s}}}a[by]=29;b[118288+(bw*34|0)+(bx<<1)>>1]=0}F=ai()|0;if((((ai()|0)%151|0)+1|0)<5){w=(F|0)%3|0;F=((ai()|0)%65|0)+1|0;s=((ai()|0)%15|0)+1|0;G=117112+(F*17|0)+s|0;if((a[G]|0)==1){bz=F;bA=s;bB=G}else{G=F;F=s;while(1){s=G-1+((ai()|0)%3|0)|0;B=F-1+((ai()|0)%3|0)|0;C=(s|0)>65?1:s;s=(C|0)<1?65:C;C=(B|0)>15?1:B;B=(C|0)<1?15:C;C=117112+(s*17|0)+B|0;if((a[C]|0)==1){bz=s;bA=B;bB=C;break}else{G=s;F=B}}}a[bB]=32;b[118288+(bz*34|0)+(bA<<1)>>1]=w}F=ai()|0;if((((ai()|0)%151|0)+1|0)<2){G=(F|0)%3|0;F=((ai()|0)%65|0)+1|0;B=((ai()|0)%15|0)+1|0;s=117112+(F*17|0)+B|0;if((a[s]|0)==1){bD=F;bG=B;bH=s}else{s=F;F=B;while(1){B=s-1+((ai()|0)%3|0)|0;C=F-1+((ai()|0)%3|0)|0;v=(B|0)>65?1:B;B=(v|0)<1?65:v;v=(C|0)>15?1:C;C=(v|0)<1?15:v;v=117112+(B*17|0)+C|0;if((a[v]|0)==1){bD=B;bG=C;bH=v;break}else{s=B;F=C}}}a[bH]=40;b[118288+(bD*34|0)+(bG<<1)>>1]=G}F=ai()|0;if((((ai()|0)%151|0)+1|0)<5){s=(F|0)%3|0;F=((ai()|0)%65|0)+1|0;w=((ai()|0)%15|0)+1|0;C=117112+(F*17|0)+w|0;if((a[C]|0)==1){bI=F;bK=w;bL=C}else{C=F;F=w;while(1){w=C-1+((ai()|0)%3|0)|0;B=F-1+((ai()|0)%3|0)|0;v=(w|0)>65?1:w;w=(v|0)<1?65:v;v=(B|0)>15?1:B;B=(v|0)<1?15:v;v=117112+(w*17|0)+B|0;if((a[v]|0)==1){bI=w;bK=B;bL=v;break}else{C=w;F=B}}}a[bL]=41;b[118288+(bI*34|0)+(bK<<1)>>1]=s}F=(ai()|0)%3|0;if((((ai()|0)%151|0)+1|0)<5){C=((ai()|0)%65|0)+1|0;G=((ai()|0)%15|0)+1|0;B=117112+(C*17|0)+G|0;if((a[B]|0)==1){bN=C;bO=G;bP=B}else{B=C;C=G;while(1){G=B-1+((ai()|0)%3|0)|0;w=C-1+((ai()|0)%3|0)|0;v=(G|0)>65?1:G;G=(v|0)<1?65:v;v=(w|0)>15?1:w;w=(v|0)<1?15:v;v=117112+(G*17|0)+w|0;if((a[v]|0)==1){bN=G;bO=w;bP=v;break}else{B=G;C=w}}}a[bP]=42;b[118288+(bN*34|0)+(bO<<1)>>1]=F}C=((ai()|0)%5|0)+1|0;if((((ai()|0)%151|0)+1|0)<7){B=((ai()|0)%65|0)+1|0;s=((ai()|0)%15|0)+1|0;w=117112+(B*17|0)+s|0;if((a[w]|0)==1){bQ=B;bR=s;bS=w}else{w=B;B=s;while(1){s=w-1+((ai()|0)%3|0)|0;G=B-1+((ai()|0)%3|0)|0;v=(s|0)>65?1:s;s=(v|0)<1?65:v;v=(G|0)>15?1:G;G=(v|0)<1?15:v;v=117112+(s*17|0)+G|0;if((a[v]|0)==1){bQ=s;bR=G;bS=v;break}else{w=s;B=G}}}a[bS]=38;b[118288+(bQ*34|0)+(bR<<1)>>1]=C}B=(ai()|0)%3|0;if((((ai()|0)%151|0)+1|0)<4){w=((ai()|0)%65|0)+1|0;F=((ai()|0)%15|0)+1|0;G=117112+(w*17|0)+F|0;if((a[G]|0)==1){bT=w;bU=F;bV=G}else{G=w;w=F;while(1){F=G-1+((ai()|0)%3|0)|0;s=w-1+((ai()|0)%3|0)|0;v=(F|0)>65?1:F;F=(v|0)<1?65:v;v=(s|0)>15?1:s;s=(v|0)<1?15:v;v=117112+(F*17|0)+s|0;if((a[v]|0)==1){bT=F;bU=s;bV=v;break}else{G=F;w=s}}}a[bV]=47;b[118288+(bT*34|0)+(bU<<1)>>1]=B}w=(ai()|0)%3|0;if(((ai()|0)%151|0|0)<0){G=((ai()|0)%65|0)+1|0;C=((ai()|0)%15|0)+1|0;s=117112+(G*17|0)+C|0;if((a[s]|0)==1){bW=G;bX=C;bY=s}else{s=G;G=C;while(1){C=s-1+((ai()|0)%3|0)|0;F=G-1+((ai()|0)%3|0)|0;v=(C|0)>65?1:C;C=(v|0)<1?65:v;v=(F|0)>15?1:F;F=(v|0)<1?15:v;v=117112+(C*17|0)+F|0;if((a[v]|0)==1){bW=C;bX=F;bY=v;break}else{s=C;G=F}}}a[bY]=48;b[118288+(bW*34|0)+(bX<<1)>>1]=w}G=(ai()|0)%5|0;if((((ai()|0)%151|0)+1|0)<2){s=((ai()|0)%65|0)+1|0;B=((ai()|0)%15|0)+1|0;F=117112+(s*17|0)+B|0;if((a[F]|0)==1){bZ=s;b_=B;b$=F}else{F=s;s=B;while(1){B=F-1+((ai()|0)%3|0)|0;C=s-1+((ai()|0)%3|0)|0;v=(B|0)>65?1:B;B=(v|0)<1?65:v;v=(C|0)>15?1:C;C=(v|0)<1?15:v;v=117112+(B*17|0)+C|0;if((a[v]|0)==1){bZ=B;b_=C;b$=v;break}else{F=B;s=C}}}a[b$]=51;b[118288+(bZ*34|0)+(b_<<1)>>1]=G}if((((ai()|0)%151|0)+1|0)<2){s=((ai()|0)%65|0)+1|0;F=((ai()|0)%15|0)+1|0;w=117112+(s*17|0)+F|0;if((a[w]|0)==1){b0=s;b1=F;b2=w}else{w=s;s=F;while(1){F=w-1+((ai()|0)%3|0)|0;C=s-1+((ai()|0)%3|0)|0;B=(F|0)>65?1:F;F=(B|0)<1?65:B;B=(C|0)>15?1:C;C=(B|0)<1?15:B;B=117112+(F*17|0)+C|0;if((a[B]|0)==1){b0=F;b1=C;b2=B;break}else{w=F;s=C}}}a[b2]=46;b[118288+(b0*34|0)+(b1<<1)>>1]=0;b3=0}else{b3=0}L451:while(1){b4=c[46504+(b3<<2)>>2]|0;b5=128064+(c[46568+(b3<<2)>>2]<<2)|0;do{if((c[b5>>2]|0)==0){s=c[46440+(b3<<2)>>2]|0;if((s|0)>(d|0)){break}w=(Z(c[46312+(b3<<2)>>2]|0,d-s|0)|0)+(c[46376+(b3<<2)>>2]|0)|0;s=ai()|0;if((((s|0)%(c[46248+(b3<<2)>>2]|0)|0)+1|0)<(w|0)){u=284;break L451}}}while(0);w=b3+1|0;if((w|0)<10){b3=w}else{b6=10;break}}if((u|0)==284){w=((ai()|0)%65|0)+1|0;s=((ai()|0)%15|0)+1|0;G=117112+(w*17|0)+s|0;if((a[G]|0)==1){b7=w;b8=s;b9=G}else{G=w;w=s;while(1){s=G-1+((ai()|0)%3|0)|0;C=w-1+((ai()|0)%3|0)|0;F=(s|0)>65?1:s;s=(F|0)<1?65:F;F=(C|0)>15?1:C;C=(F|0)<1?15:F;F=117112+(s*17|0)+C|0;if((a[F]|0)==1){b7=s;b8=C;b9=F;break}else{G=s;w=C}}}a[b9]=b4;b[118288+(b7*34|0)+(b8<<1)>>1]=0;c[b5>>2]=(c[b5>>2]|0)+1;b6=10}do{w=c[46504+(b6<<2)>>2]|0;G=128064+(c[46568+(b6<<2)>>2]<<2)|0;do{if((c[G>>2]|0)==0){C=c[46440+(b6<<2)>>2]|0;if((C|0)>(d|0)){break}s=(Z(c[46312+(b6<<2)>>2]|0,d-C|0)|0)+(c[46376+(b6<<2)>>2]|0)|0;C=ai()|0;if((((C|0)%(c[46248+(b6<<2)>>2]|0)|0)+1|0)>=(s|0)){break}s=((ai()|0)%65|0)+1|0;C=((ai()|0)%15|0)+1|0;F=117112+(s*17|0)+C|0;if((a[F]|0)==1){ca=s;cb=C;cc=F}else{F=s;s=C;while(1){C=F-1+((ai()|0)%3|0)|0;B=s-1+((ai()|0)%3|0)|0;v=(C|0)>65?1:C;C=(v|0)<1?65:v;v=(B|0)>15?1:B;B=(v|0)<1?15:v;v=117112+(C*17|0)+B|0;if((a[v]|0)==1){ca=C;cb=B;cc=v;break}else{F=C;s=B}}}a[cc]=w;b[118288+(ca*34|0)+(cb<<1)>>1]=0;c[G>>2]=(c[G>>2]|0)+1}}while(0);b6=b6+1|0;}while((b6|0)<16);if((c[32069]|0)<3){if(!D){break}}else{if(((ai()|0)%4|0|0)!=2|D^1){break}}G=(ai()|0)%6|0;if((((ai()|0)%151|0)+1|0)<3){w=((ai()|0)%65|0)+1|0;s=((ai()|0)%15|0)+1|0;F=117112+(w*17|0)+s|0;if((a[F]|0)==1){ce=w;cf=s;cg=F}else{F=w;w=s;while(1){s=F-1+((ai()|0)%3|0)|0;B=w-1+((ai()|0)%3|0)|0;C=(s|0)>65?1:s;s=(C|0)<1?65:C;C=(B|0)>15?1:B;B=(C|0)<1?15:C;C=117112+(s*17|0)+B|0;if((a[C]|0)==1){ce=s;cf=B;cg=C;break}else{F=s;w=B}}}a[cg]=36;b[118288+(ce*34|0)+(cf<<1)>>1]=G}w=((ai()|0)%6|0)+1|0;if((((ai()|0)%151|0)+1|0)<5){F=((ai()|0)%65|0)+1|0;D=((ai()|0)%15|0)+1|0;B=117112+(F*17|0)+D|0;if((a[B]|0)==1){ch=F;ci=D;cj=B}else{B=F;F=D;while(1){D=B-1+((ai()|0)%3|0)|0;s=F-1+((ai()|0)%3|0)|0;C=(D|0)>65?1:D;D=(C|0)<1?65:C;C=(s|0)>15?1:s;s=(C|0)<1?15:C;C=117112+(D*17|0)+s|0;if((a[C]|0)==1){ch=D;ci=s;cj=C;break}else{B=D;F=s}}}a[cj]=37;b[118288+(ch*34|0)+(ci<<1)>>1]=w}F=(ai()|0)%7|0;if((((ai()|0)%151|0)+1|0)<3){B=((ai()|0)%65|0)+1|0;G=((ai()|0)%15|0)+1|0;s=117112+(B*17|0)+G|0;if((a[s]|0)==1){ck=B;cl=G;cm=s}else{s=B;B=G;while(1){G=s-1+((ai()|0)%3|0)|0;D=B-1+((ai()|0)%3|0)|0;C=(G|0)>65?1:G;G=(C|0)<1?65:C;C=(D|0)>15?1:D;D=(C|0)<1?15:C;C=117112+(G*17|0)+D|0;if((a[C]|0)==1){ck=G;cl=D;cm=C;break}else{s=G;B=D}}}a[cm]=54;b[118288+(ck*34|0)+(cl<<1)>>1]=F}B=(ai()|0)%6|0;if((((ai()|0)%151|0)+1|0)<3){s=((ai()|0)%65|0)+1|0;w=((ai()|0)%15|0)+1|0;D=117112+(s*17|0)+w|0;if((a[D]|0)==1){cn=s;co=w;cp=D}else{D=s;s=w;while(1){w=D-1+((ai()|0)%3|0)|0;G=s-1+((ai()|0)%3|0)|0;C=(w|0)>65?1:w;w=(C|0)<1?65:C;C=(G|0)>15?1:G;G=(C|0)<1?15:C;C=117112+(w*17|0)+G|0;if((a[C]|0)==1){cn=w;co=G;cp=C;break}else{D=w;s=G}}}a[cp]=49;b[118288+(cn*34|0)+(co<<1)>>1]=B}s=(ai()|0)%8|0;if((((ai()|0)%151|0)+1|0)>=4){break}D=((ai()|0)%65|0)+1|0;F=((ai()|0)%15|0)+1|0;G=117112+(D*17|0)+F|0;if((a[G]|0)==1){cq=D;cr=F;cs=G}else{G=D;D=F;while(1){F=G-1+((ai()|0)%3|0)|0;w=D-1+((ai()|0)%3|0)|0;C=(F|0)>65?1:F;F=(C|0)<1?65:C;C=(w|0)>15?1:w;w=(C|0)<1?15:C;C=117112+(F*17|0)+w|0;if((a[C]|0)==1){cq=F;cr=w;cs=C;break}else{G=F;D=w}}}a[cs]=24;b[118288+(cq*34|0)+(cr<<1)>>1]=s}}while(0);if((u|0)==83){cr=((ai()|0)%65|0)+1|0;cq=((ai()|0)%15|0)+1|0;cs=117112+(cr*17|0)+cq|0;if((a[cs]|0)==1){ct=cr;cu=cq;cv=cs}else{cs=cr;cr=cq;while(1){cq=cs-1+((ai()|0)%3|0)|0;co=cr-1+((ai()|0)%3|0)|0;cn=(cq|0)>65?1:cq;cq=(cn|0)<1?65:cn;cn=(co|0)>15?1:co;co=(cn|0)<1?15:cn;cn=117112+(cq*17|0)+co|0;if((a[cn]|0)==1){ct=cq;cu=co;cv=cn;break}else{cs=cq;cr=co}}}a[cv]=79;b[118288+(ct*34|0)+(cu<<1)>>1]=0;cu=((ai()|0)%65|0)+1|0;ct=((ai()|0)%15|0)+1|0;cv=117112+(cu*17|0)+ct|0;if((a[cv]|0)==1){cx=cu;cy=ct;cz=cv}else{cv=cu;cu=ct;while(1){ct=cv-1+((ai()|0)%3|0)|0;cr=cu-1+((ai()|0)%3|0)|0;cs=(ct|0)>65?1:ct;ct=(cs|0)<1?65:cs;cs=(cr|0)>15?1:cr;cr=(cs|0)<1?15:cs;cs=117112+(ct*17|0)+cr|0;if((a[cs]|0)==1){cx=ct;cy=cr;cz=cs;break}else{cv=ct;cu=cr}}}a[cz]=76;b[118288+(cx*34|0)+(cy<<1)>>1]=0;cy=((ai()|0)%65|0)+1|0;cx=((ai()|0)%15|0)+1|0;cz=117112+(cy*17|0)+cx|0;if((a[cz]|0)==1){cA=cy;cB=cx;cC=cz}else{cz=cy;cy=cx;while(1){cx=cz-1+((ai()|0)%3|0)|0;cu=cy-1+((ai()|0)%3|0)|0;cv=(cx|0)>65?1:cx;cx=(cv|0)<1?65:cv;cv=(cu|0)>15?1:cu;cu=(cv|0)<1?15:cv;cv=117112+(cx*17|0)+cu|0;if((a[cv]|0)==1){cA=cx;cB=cu;cC=cv;break}else{cz=cx;cy=cu}}}a[cC]=75;b[118288+(cA*34|0)+(cB<<1)>>1]=0;cB=((ai()|0)%65|0)+1|0;cA=((ai()|0)%15|0)+1|0;cC=117112+(cB*17|0)+cA|0;if((a[cC]|0)==1){cD=cB;cE=cA;cF=cC}else{cC=cB;cB=cA;while(1){cA=cC-1+((ai()|0)%3|0)|0;cy=cB-1+((ai()|0)%3|0)|0;cz=(cA|0)>65?1:cA;cA=(cz|0)<1?65:cz;cz=(cy|0)>15?1:cy;cy=(cz|0)<1?15:cz;cz=117112+(cA*17|0)+cy|0;if((a[cz]|0)==1){cD=cA;cE=cy;cF=cz;break}else{cC=cA;cB=cy}}}a[cF]=78;b[118288+(cD*34|0)+(cE<<1)>>1]=0;cE=((ai()|0)%65|0)+1|0;cD=((ai()|0)%15|0)+1|0;cF=117112+(cE*17|0)+cD|0;if((a[cF]|0)==1){cG=cE;cH=cD;cI=cF}else{cF=cE;cE=cD;while(1){cD=cF-1+((ai()|0)%3|0)|0;cB=cE-1+((ai()|0)%3|0)|0;cC=(cD|0)>65?1:cD;cD=(cC|0)<1?65:cC;cC=(cB|0)>15?1:cB;cB=(cC|0)<1?15:cC;cC=117112+(cD*17|0)+cB|0;if((a[cC]|0)==1){cG=cD;cH=cB;cI=cC;break}else{cF=cD;cE=cB}}}a[cI]=80;b[118288+(cG*34|0)+(cH<<1)>>1]=0;cH=((ai()|0)%65|0)+1|0;cG=((ai()|0)%15|0)+1|0;cI=117112+(cH*17|0)+cG|0;if((a[cI]|0)==1){cJ=cH;cK=cG;cL=cI}else{cI=cH;cH=cG;while(1){cG=cI-1+((ai()|0)%3|0)|0;cE=cH-1+((ai()|0)%3|0)|0;cF=(cG|0)>65?1:cG;cG=(cF|0)<1?65:cF;cF=(cE|0)>15?1:cE;cE=(cF|0)<1?15:cF;cF=117112+(cG*17|0)+cE|0;if((a[cF]|0)==1){cJ=cG;cK=cE;cL=cF;break}else{cI=cG;cH=cE}}}a[cL]=82;b[118288+(cJ*34|0)+(cK<<1)>>1]=0;cK=((ai()|0)%65|0)+1|0;cJ=((ai()|0)%15|0)+1|0;cL=117112+(cK*17|0)+cJ|0;if((a[cL]|0)==1){cM=cK;cN=cJ;cO=cL}else{cL=cK;cK=cJ;while(1){cJ=cL-1+((ai()|0)%3|0)|0;cH=cK-1+((ai()|0)%3|0)|0;cI=(cJ|0)>65?1:cJ;cJ=(cI|0)<1?65:cI;cI=(cH|0)>15?1:cH;cH=(cI|0)<1?15:cI;cI=117112+(cJ*17|0)+cH|0;if((a[cI]|0)==1){cM=cJ;cN=cH;cO=cI;break}else{cL=cJ;cK=cH}}}a[cO]=83;b[118288+(cM*34|0)+(cN<<1)>>1]=0;cN=((ai()|0)%65|0)+1|0;cM=((ai()|0)%15|0)+1|0;cO=117112+(cN*17|0)+cM|0;if((a[cO]|0)==1){cP=cN;cQ=cM;cR=cO}else{cO=cN;cN=cM;while(1){cM=cO-1+((ai()|0)%3|0)|0;cK=cN-1+((ai()|0)%3|0)|0;cL=(cM|0)>65?1:cM;cM=(cL|0)<1?65:cL;cL=(cK|0)>15?1:cK;cK=(cL|0)<1?15:cL;cL=117112+(cM*17|0)+cK|0;if((a[cL]|0)==1){cP=cM;cQ=cK;cR=cL;break}else{cO=cM;cN=cK}}}a[cR]=84;b[118288+(cP*34|0)+(cQ<<1)>>1]=0}a[j]=1;j=0;do{cQ=0;do{a[49776+(cQ*17|0)+j|0]=0;cQ=cQ+1|0;}while((cQ|0)<67);j=j+1|0;}while((j|0)<17);do{if((c[26690]|0)!=0){j=((ai()|0)%12|0)+3|0;cQ=c[26690]|0;s=j+(cQ>>1)|0;L555:do{if((s|0)>0){j=1;cP=cQ;while(1){cR=cd(cP)|0;cN=10;L558:do{cS=((ai()|0)%65|0)+1|0;cT=((ai()|0)%15|0)+1|0;do{if((a[117112+(cS*17|0)+cT|0]|0)==1){cU=68960+(cS*442|0)+(cT*26|0)|0;if((a[cU]|0)!=0){break}if(!((c[14874]|0)==(cS|0)&(c[14872]|0)==(cT|0))){u=328;break L558}}}while(0);cN=cN-1|0;}while((cN|0)>0);if((u|0)==328){u=0;a[cU]=cR;a[49776+(cS*17|0)+cT|0]=0;b[120568+(cS*34|0)+(cT<<1)>>1]=b[5684+(cR*24|0)>>1]|0}cN=c[26690]|0;if((j|0)>=(s|0)){cV=cN;break L555}j=j+1|0;cP=cN}}else{cV=cQ}}while(0);if((cV-11|0)>>>0<5>>>0){cQ=cV-10|0;if((cQ|0)<1){break}else{cW=1}while(1){L573:while(1){cX=((ai()|0)%7|0)+57|0;s=10;while(1){cY=((ai()|0)%65|0)+1|0;cZ=((ai()|0)%15|0)+1|0;do{if((a[117112+(cY*17|0)+cZ|0]|0)==1){c_=68960+(cY*442|0)+(cZ*26|0)|0;if((a[c_]|0)!=0){break}if(!((c[14874]|0)==(cY|0)&(c[14872]|0)==(cZ|0))){break L573}}}while(0);cP=s-1|0;if((cP|0)>0){s=cP}else{continue L573}}}a[c_]=cX;a[49776+(cY*17|0)+cZ|0]=0;b[120568+(cY*34|0)+(cZ<<1)>>1]=b[5684+(cX*24|0)>>1]|0;cW=cW+1|0;if((cW|0)>(cQ|0)){break}}c$=c[26690]|0}else{c$=cV}if((c$|0)<=15){break}cQ=c$-15|0;if((cQ|0)<1){break}else{c0=1}do{while(1){c1=((ai()|0)%65|0)+1|0;c3=((ai()|0)%15|0)+1|0;if((a[117112+(c1*17|0)+c3|0]|0)!=1){continue}c4=68960+(c1*442|0)+(c3*26|0)|0;if((a[c4]|0)!=0){continue}if(!((c[14874]|0)==(c1|0)&(c[14872]|0)==(c3|0))){break}}a[c4]=64;a[49776+(c1*17|0)+c3|0]=0;b[120568+(c1*34|0)+(c3<<1)>>1]=b[3610]|0;c0=c0+1|0;}while((c0|0)<=(cQ|0))}}while(0);if((a[47648]|0)!=0|(d|0)==0){d=0;while(1){c0=0;do{a[107880+(c0*17|0)+d|0]=a[117112+(c0*17|0)+d|0]|0;c3=49776+(c0*17|0)+d|0;a[c3]=a[c3]|1;c0=c0+1|0;}while((c0|0)<67);c0=d+1|0;if((c0|0)<17){d=c0}else{c5=0;break}}}else{c5=0}do{d=0;do{c0=68960+(d*442|0)+(c5*26|0)|0;if((c[5692+((a[c0]|0)*24|0)>>2]&1|0)!=0){a[c0]=0}d=d+1|0;}while((d|0)<67);c5=c5+1|0;}while((c5|0)<17);cw();i=e;return}function bH(a,b){a=a|0;b=b|0;var c=0;if(!(a>>>0<67>>>0&(b|0)>-1)){c=0;return c|0}c=(b|0)<17|0;return c|0}function bI(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;i=i+8|0;f=e|0;if(d>>>0>20>>>0){i=e;return}do{g=bJ(d,f)|0;bA(a,b,g,c[f>>2]|0);}while((((ai()|0)%101|0)+1|0)<8);i=e;return}function bJ(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;if((c[26690]|0)>>>0>20>>>0){e=0;return e|0}if((b|0)<4){f=32}else{f=(b|0)<7?35:37}g=a[((ai()|0)%(f|0)|0)+5233|0]|0;switch(g|0){case 41:{c[d>>2]=a[5200+((ai()|0)%(((c[32069]|0)!=0?6:13)|0)|0)|0]|0;e=41;return e|0};case 38:{c[d>>2]=(ai()|0)%(((b|0)/3|0)+1|0)|0;e=38;return e|0};case 56:{c[d>>2]=c2()|0;e=56;return e|0};case 26:{c[d>>2]=a[5272+((ai()|0)%(((c[32069]|0)!=0?12:15)|0)|0)|0]|0;e=26;return e|0};case 47:case 32:case 37:{c[d>>2]=(ai()|0)%(((b|0)/3|0)+1|0)|0;e=g;return e|0};case 48:case 50:{c[d>>2]=((ai()|0)%(((b|0)/4|0)+1|0)|0)+1;e=g;return e|0};case 39:{c[d>>2]=a[5288+((ai()|0)%13|0)|0]|0;e=39;return e|0};case 57:{c[d>>2]=b;e=57;return e|0};case 19:{f=b*10|0;c[d>>2]=f+11+((ai()|0)%(f+10|0)|0);e=19;return e|0};case 55:{c[d>>2]=dg()|0;e=55;return e|0};case 54:case 28:{c[d>>2]=(ai()|0)%(((b|0)/2|0)+1|0)|0;e=g;return e|0};case 49:{c[d>>2]=(ai()|0)%(((b|0)/4|0)+1|0)|0;e=49;return e|0};case 51:{c[d>>2]=((ai()|0)%(((b|0)/2|0)+1|0)|0)+1;e=51;return e|0};case 27:case 42:{c[d>>2]=(ai()|0)%(((b|0)/2|0)+1|0)|0;e=g;return e|0};case 25:{c[d>>2]=a[5304+((ai()|0)%10|0)|0]|0;e=25;return e|0};case 24:{c[d>>2]=a[5216+((ai()|0)%(((c[32069]|0)!=0?3:10)|0)|0)|0]|0;e=24;return e|0};default:{e=g;return e|0}}return 0}function bK(b){b=b|0;var d=0,e=0;d=c[59232+(c[26690]<<2)>>2]|0;e=d;fk(e|0,120568,2278)|0;fk(d+2278|0,68960,29614)|0;fk(d+31892|0,117112,1139)|0;fk(d+33032|0,118288,2278)|0;fk(d+35310|0,107880,1139)|0;d=c6(e,36450)|0;c[106672+(c[26690]<<2)>>2]=d;c7(b,106760,4);c7(b,128488,21);d=0;do{if((a[128488+d|0]|0)!=0){c7(b,c[59232+(d<<2)>>2]|0,36450)}d=d+1|0;}while((d|0)<21);return 0}function bL(b){b=b|0;var d=0;c8(b,106760,4);c8(b,128488,21);d=0;do{if((a[128488+d|0]|0)!=0){c8(b,c[59232+(d<<2)>>2]|0,36450)}d=d+1|0;}while((d|0)<21);return 0}function bM(d,e,f,g,h,j){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;k=i;i=i+16|0;l=k|0;m=k+8|0;n=h-1|0;o=h+f|0;if((n|0)<=(o|0)){p=g-1|0;q=g+e|0;r=(p|0)>(q|0);s=n;do{if(!r){n=p;do{a[117112+(n*17|0)+s|0]=1;n=n+1|0;}while((n|0)<=(q|0))}s=s+1|0;}while((s|0)<=(o|0))}if((f|0)>0){s=g+e|0;q=(e|0)>0;p=h;do{if(q){r=g;do{a[117112+(r*17|0)+p|0]=18;a[68960+(r*442|0)+(p*26|0)|0]=0;r=r+1|0;}while((r|0)<(s|0))}p=p+1|0;}while((p|0)<(o|0))}p=h+1|0;s=o-1|0;if((p|0)<(s|0)){o=g+1|0;q=e-1+g|0;r=(o|0)<(q|0);n=p;do{if(r){p=o;do{a[117112+(p*17|0)+n|0]=1;p=p+1|0;}while((p|0)<(q|0))}n=n+1|0;}while((n|0)<(s|0))}s=(ai()|0)%2|0;if((s|0)==0){n=((ai()|0)%(e|0)|0)+g|0;q=(Z((ai()|0)%2|0,f-1|0)|0)+h|0;a[117112+(n*17|0)+q|0]=17;b[118288+(n*34|0)+(q<<1)>>1]=j}else if((s|0)==1){s=(Z((ai()|0)%2|0,e-1|0)|0)+g|0;q=((ai()|0)%(f|0)|0)+h|0;a[117112+(s*17|0)+q|0]=17;b[118288+(s*34|0)+(q<<1)>>1]=j}j=c[14874]|0;q=c[14872]|0;c[14872]=(f>>>1)+h<<24>>24;h=(c[32069]|0)<3;f=(g<<24)+16777216>>24;c[14874]=f;s=(g+e<<24)-33554432>>24;e=(f|0)>(s|0);if(h){if(e){c[14874]=j;c[14872]=q;i=k;return}h=d+2|0;f=h>>>0>20>>>0;do{g=((ai()|0)%6|0)+1|0;n=c[14874]|0;if((g|0)<0){t=n}else{o=0;r=n;while(1){n=c[14872]|0;if(!f){do{p=bJ(h,m)|0;bA(r,n,p,c[m>>2]|0);}while((((ai()|0)%101|0)+1|0)<8)}b6(cd(h)|0);n=o+1|0;p=c[14874]|0;if((n|0)>(g|0)){t=p;break}else{o=n;r=p}}}r=t+2|0;c[14874]=r;}while((r|0)<=(s|0));c[14874]=j;c[14872]=q;i=k;return}else{if(e){c[14874]=j;c[14872]=q;i=k;return}e=d+2|0;t=e>>>0>20>>>0;h=d+4|0;do{d=((ai()|0)%4|0)+1|0;m=c[14874]|0;if((d|0)<0){u=m}else{f=0;r=m;while(1){m=c[14872]|0;if(!t){do{o=bJ(e,l)|0;bA(r,m,o,c[l>>2]|0);}while((((ai()|0)%101|0)+1|0)<8)}b6(cd(h)|0);m=f+1|0;o=c[14874]|0;if((m|0)>(d|0)){u=o;break}else{f=m;r=o}}}r=u+2|0;c[14874]=r;}while((r|0)<=(s|0));c[14874]=j;c[14872]=q;i=k;return}}function bN(d,e){d=d|0;e=e|0;var f=0;f=117112+(d*17|0)+e|0;if((a[f]|0)!=17){return}if((((ai()|0)%11|0)+1|0)>=7){a[f]=16;eT(d,e);return}f=118288+(d*34|0)+(e<<1)|0;e=b[f>>1]|0;if((e|0)==6){d=((ai()|0)%400|0)+1|0;c[32054]=d+(c[32054]|0)}else if((e|0)==7|(e|0)==8){eR(31688);cG(19,((ai()|0)%20|0)+1|0);eM()}else if((e|0)==9){eR(41512);e=c[32016]|0;if((e|0)>3){c[32016]=e-1}eM()}b[f>>1]=0;return}function bO(b){b=b|0;var d=0;switch(b|0){case 106:{b=(ai()|0)%100|0;if((b|0)<12){b6(cd((c[26690]|0)+2|0)|0);return}if((b|0)<17){cN(1);return}if((b|0)<22){cM(1);return}if((b|0)>=27){eR(24024);return}eR(25136);b=c[32047]|0;if((b|0)==0){c[32035]=(c[32035]|0)+3}c[32047]=b+800;cu();eN();return};case 112:{e4(109,33528,128568);e4(106,26648,128568);return};case 109:{fb(21608);e1(19432);e2(17056);return};case 100:{do{if((((ai()|0)%100|0)+1|0)<60){b6((cd((c[26690]|0)+3|0)|0)+8|0);c[32054]=(c[32054]|0)+2500}else{if((((ai()|0)%100|0)+1|0)<5){cy();break}if((((ai()|0)%101|0)+1|0)<30){eR(14688);b=c[14872]|0;d=c[14874]|0;a[117112+(d*17|0)+b|0]=1;a[107880+(d*17|0)+b|0]=1;break}else{eR(24024);break}}}while(0);eM();return};case 105:case 27:{if((((ai()|0)%100|0)+1|0)<30){b6(cd((c[26690]|0)+2|0)|0);b=((ai()|0)%450|0)+1|0;c[32054]=b+(c[32054]|0);return}else{eR(24024);return}break};default:{return}}}function bP(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;if((b|0)<0){e1(19432);e2(17056);return}d=c[32024]|0;if((d|0)<(b|0)){eR(45584);e0(1001);e1(19432);e2(17056);return}e=d-b|0;c[32024]=e;do{if(((e|0)/10|0|0)>(b|0)){d=(((ai()|0)%60|0)+1|0)>29;if(d|(a[47648]|0)!=0){f=c[32024]|0;g=9;break}else{eR(43504);d=c[14872]|0;h=c[14874]|0;a[117112+(h*17|0)+d|0]=1;a[107880+(h*17|0)+d|0]=1;b6(64);c[32054]=(c[32054]|0)+1500;c[32024]=(c[32024]|0)-b;break}}else{f=e;g=9}}while(0);do{if((g|0)==9){if(((f+b|0)/10|0|0)>(b|0)){if((a[47648]|0)==0){g=12}}else{e=(((ai()|0)%50|0)+1|0)<=(b|0);if(!(e|(a[47648]|0)!=0)){g=12}}if((g|0)==12){b6(cd((c[26690]|0)+2|0)|0);c[32054]=(c[32054]|0)+500;c[32024]=(c[32024]|0)-b;break}e=(ai()|0)%16|0;if((e|0)<4){eR(42176);break}if((e|0)<6){cM(1);cM(1);break}if((e|0)<8){cN(1);cN(1);break}eR(25136);e=c[32047]|0;if((e|0)==0){c[32035]=(c[32035]|0)+3}c[32047]=e+800;cu();eN()}}while(0);eM();return}function bQ(b,d){b=b|0;d=d|0;var e=0,f=0;if((d|0)==112){e=((ai()|0)%101|0)+1|0;if((e|0)<25){if((((ai()|0)%4|0)+1|0)>0){f=0;do{cS();f=f+1|0;}while((f|0)<(((ai()|0)%4|0)+1|0))}a[(c[14872]|0)+(117112+((c[14874]|0)*17|0))|0]=5;return}if((e|0)<40&(b|0)==0){b6(45);a[(c[14872]|0)+(117112+((c[14874]|0)*17|0))|0]=4;return}else{eR(24024);return}}else if((d|0)==115){d=((ai()|0)%101|0)+1|0;if((d|0)<30&(b|0)==0){b6(45);a[(c[14872]|0)+(117112+((c[14874]|0)*17|0))|0]=4;return}if((d|0)<35){eR(41080);eP();bR(0);return}else{eR(24024);return}}else{return}}function bR(b){b=b|0;var d=0,e=0,f=0,g=0;do{if((b|0)!=0){d=(((ai()|0)%151|0)+1|0)<3;if(!(d&(c[32090]|0)==0)){break}de(9,0);return}}while(0);if((a[47648]|0)==0){c[32056]=1}b=c[26690]|0;do{if((b|0)==0){e=0}else{d=ai()|0;if((b|0)<16){f=((d|0)%5|0)-2+(c[26690]|0)|0;g=(f|0)>15?15:f;e=(g|0)<0?0:g;break}else{g=((d|0)%4|0)-1+(c[26690]|0)|0;d=(g|0)<20?g:20;e=(d|0)<16?0:d;break}}}while(0);c[14874]=(((ai()|0)%65|0)<<24)+16777216>>24;c[14872]=(((ai()|0)%15|0)<<24)+16777216>>24;if((c[26690]|0)==(e|0)){cw()}else{bG(e)}eX(0,67,0,17);eO();return}function bS(a){a=a|0;if((a|0)!=115){return}a=((ai()|0)%101|0)+1|0;if((a|0)<5){cy();return}if((a|0)<25){eR(41080);eP();bR(0);return}else{eR(24024);return}}function bT(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;if((b|0)==100){if((((ai()|0)%1501|0)+1|0)<4){eR(39864);eP();e0(3e3);de(25,0);i=d;return}e=(ai()|0)%100|0;f=e+1|0;do{if((e|0)==0){cy()}else{if((f|0)<11){g=ai()|0;h=(g|0)%(c[26690]<<2|2|0)|0;g=h+1|0;eS(39160,(j=i,i=i+16|0,c[j>>2]=g,c[j+8>>2]=(h|0)==0?128568:38184,j)|0);i=j;cG(18,g);eM();break}if((f|0)<14){g=((ai()|0)%200|0)+201|0;c[32086]=g+(c[32086]|0);eR(37472);break}if((f|0)<17){eR(36704);g=c[32065]|0;if((g|0)==0){c[32091]=(c[32091]|0)+21}c[32065]=g+700;eN();break}if((f|0)<45){eR(35744);break}if(((ai()|0)%3|0|0)==1){bU(-1);break}else{bU(1);break}}}while(0);if((((ai()|0)%12|0)+1|0)>=3){i=d;return}eR(34888);a[(c[14872]|0)+(117112+((c[14874]|0)*17|0))|0]=15;i=d;return}else if((b|0)==119){b=(((ai()|0)%100|0)+1|0)<11;f=ai()|0;if(b){b=(f|0)%(c[26690]<<2|2|0)|0;e=b+1|0;eS(34200,(j=i,i=i+16|0,c[j>>2]=e,c[j+8>>2]=(b|0)==0?128568:38184,j)|0);i=j;cG(18,e);eM();i=d;return}if((((f|0)%100|0)+1|0)<29){eR(33672);if((c[32081]|0)==0){i=d;return}c[32081]=1;i=d;return}if((((ai()|0)%100|0)+1|0)<31){eR(33304);i=d;return}if((((ai()|0)%100|0)+1|0)<34){b6(47);i=d;return}else{eR(35744);i=d;return}}else{i=d;return}}function bU(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;switch((ai()|0)%9|0|0){case 0:{eR(29520);do{if((a|0)<0){if((c[32016]|0)>3){eR(25840);c[32016]=(c[32016]|0)-1;break}else{eR(25568);break}}else{eR(25304);c[32016]=(c[32016]|0)+1}}while(0);eM();i=b;return};case 1:{eR(29136);do{if((a|0)<0){if((c[32017]|0)>3){eR(25840);c[32017]=(c[32017]|0)-1;break}else{eR(25568);break}}else{eR(25304);c[32017]=(c[32017]|0)+1}}while(0);eM();i=b;return};case 2:{eR(28840);do{if((a|0)<0){if((c[32018]|0)>3){eR(25840);c[32018]=(c[32018]|0)-1;break}else{eR(25568);break}}else{eR(25304);c[32018]=(c[32018]|0)+1}}while(0);eM();i=b;return};case 3:{eR(28560);do{if((a|0)<0){if((c[32019]|0)>3){eR(25840);c[32019]=(c[32019]|0)-1;break}else{eR(25568);break}}else{eR(25304);c[32019]=(c[32019]|0)+1}}while(0);eM();i=b;return};case 4:{eR(28288);do{if((a|0)<0){if((c[32020]|0)>3){eR(25840);c[32020]=(c[32020]|0)-1;break}else{eR(25568);break}}else{eR(25304);c[32020]=(c[32020]|0)+1}}while(0);eM();i=b;return};case 5:{eR(28048);do{if((a|0)<0){if((c[32021]|0)>3){eR(25840);c[32021]=(c[32021]|0)-1;break}else{eR(25568);break}}else{eR(25304);c[32021]=(c[32021]|0)+1}}while(0);eM();i=b;return};case 6:{d=(ai()|0)%((c[26690]|0)+1|0)|0;e=d+1|0;f=(d|0)==0?128568:38184;if((a|0)<0){eS(27744,(g=i,i=i+16|0,c[g>>2]=e,c[g+8>>2]=f,g)|0);i=g;cE(e)}else{eS(27440,(g=i,i=i+16|0,c[g>>2]=e,c[g+8>>2]=f,g)|0);i=g;cC(e)}eM();i=b;return};case 7:{e=(ai()|0)%((c[26690]|0)+1|0)|0;f=e+1|0;d=(e|0)==0?128568:38184;if((a|0)>0){eS(27144,(g=i,i=i+16|0,c[g>>2]=f,c[g+8>>2]=d,g)|0);i=g;cD(f)}else{eS(26776,(g=i,i=i+16|0,c[g>>2]=f,c[g+8>>2]=d,g)|0);i=g;cF(f)}eM();i=b;return};case 8:{f=ai()|0;d=(c[26690]|0)+1|0;e=(((f|0)%(Z(d,d)|0)|0)*5|0)+5|0;d=(e|0)==1?128568:38184;if((a|0)<0){eS(26464,(g=i,i=i+16|0,c[g>>2]=e,c[g+8>>2]=d,g)|0);i=g;cB(e);i=b;return}else{eS(26120,(g=i,i=i+16|0,c[g>>2]=e,c[g+8>>2]=d,g)|0);i=g;cz(e);i=b;return}break};default:{i=b;return}}}function bV(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;if((d|0)==117){if((b|0)<0){eR(32792);return}e=c[26690]|0;if(!((e|0)>1&(e|0)!=16)){eR(32488);return}bG(e-1|0);e=0;f=0;while(1){if((a[117112+(e*17|0)+f|0]|0)==13){g=7;break}h=f+1|0;if((h|0)<17){e=e;f=h;continue}h=e+1|0;if((h|0)<67){e=h;f=0}else{break}}if((g|0)==7){c[14874]=e<<24>>24;c[14872]=f<<24>>24}if((a[68960+((c[14874]|0)*442|0)+((c[14872]|0)*26|0)|0]|0)!=0){cw()}eX(0,67,0,17);eO();return}else if((d|0)==100){if((b|0)>0){eR(32128);return}b=c[26690]|0;if((b|0)==20|(b|0)==15|(b|0)==0){eR(32488);return}bG(b+1|0);b=0;d=0;while(1){if((a[117112+(b*17|0)+d|0]|0)==7){g=19;break}f=d+1|0;if((f|0)<17){b=b;d=f;continue}f=b+1|0;if((f|0)<67){b=f;d=0}else{break}}if((g|0)==19){c[14874]=b<<24>>24;c[14872]=d<<24>>24}if((a[68960+((c[14874]|0)*442|0)+((c[14872]|0)*26|0)|0]|0)!=0){cw()}eX(0,67,0,17);eO();return}else{return}}function bW(){var a=0,b=0,d=0,e=0,f=0;a=i;if((((ai()|0)%101|0)+1|0)>81){i=a;return}b=((ai()|0)%70|0)+1|0;d=(c[32020]|0)*9|0;do{if((b|0)<=(d-(cT()|0)|0)){if((((ai()|0)%101|0)+1|0)<5){break}i=a;return}}while(0);if((cx(68)|0)!=0){eR(31744);i=a;return}d=c[26690]|0;if((d|0)==20|(d|0)==15){eR(29896);eP();e0(3e3);de(7,0);i=a;return}if((((ai()|0)%101|0)+1|0)<20){eR(31392);e=0}else{d=ai()|0;b=((d|0)%(((c[26690]|0)*3|0)+3|0)|0)+1|0;d=c[32023]|0;f=(b|0)>(d|0)?d:b;eS(30936,(b=i,i=i+16|0,c[b>>2]=f,c[b+8>>2]=(f|0)==1?128568:38184,b)|0);i=b;e=f}cG(6,e);e0(2e3);bG((c[26690]|0)+1|0);eX(0,67,0,17);i=a;return}function bX(a){a=a|0;var b=0,d=0,e=0,f=0;b=c[26690]|0;do{if((a|0)==1){if((b|0)==0){eR(30568);return}c[14874]=(((ai()|0)%65|0)<<24)+16777216>>24;c[14872]=(((ai()|0)%15|0)<<24)+16777216>>24;e0(2e3);d=(c[26690]|0)<16;e=ai()|0;f=c[26690]|0;if(d){bG((e|0)%(f|0)|0);break}else{d=(e|0)%(f-15|0)|0;bG((d|0)==0?0:d+15|0);break}}else{if((b|0)==20|(b|0)==15){e0(2e3);eR(30240);eP();e0(3e3);de(32,0);return}c[14874]=(((ai()|0)%65|0)<<24)+16777216>>24;c[14872]=(((ai()|0)%15|0)<<24)+16777216>>24;e0(2e3);d=c[26690]|0;f=ai()|0;e=c[26690]|0;if((d|0)<15){bG(d+1+((f|0)%(15-e|0)|0)|0);break}else{bG(d+1+((f|0)%(20-e|0)|0)|0);break}}}while(0);eX(0,67,0,17);eO();return}function bY(){return}function bZ(){return}function b_(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;d=i;i=i+80|0;e=d|0;if(a[10976]|0){f=1}else{g=aw(b|0,29848)|0;if((g|0)==0){h=0;i=d;return h|0}L6:do{if((aj(g|0)|0)==0){b=e|0;while(1){if((at(b|0,80,g|0)|0)!=0){j=(fj(b|0)|0)-1|0;L12:do{if((j|0)>0){k=j;do{l=e+k|0;if((aK(a[l]|0)|0)==0){break L12}a[l]=0;k=k-1|0;}while((k|0)>0)}}while(0);j=fe(84)|0;if((j|0)==0){h=0;break}fm(j|0,b|0)|0;c[j+80>>2]=c[31624];c[31624]=j;c[16934]=(c[16934]|0)+1}if((aj(g|0)|0)!=0){break L6}}i=d;return h|0}}while(0);a[10976]=1;ao(g|0)|0;f=a[10976]|0}if(!(f&(c[16934]|0)>0)){h=0;i=d;return h|0}f=ai()|0;g=(f|0)%(c[16934]|0)|0;f=c[31624]|0;if((g|0)>0){e=g;g=f;while(1){b=e-1|0;j=c[g+80>>2]|0;if((b|0)>0){e=b;g=j}else{m=j;break}}}else{m=f}h=m|0;i=d;return h|0}function b$(){var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;b=i;i=i+256|0;d=b|0;e=aw(122872,37416)|0;c[30974]=e;if((e|0)==0){eS(36608,(f=i,i=i+8|0,c[f>>2]=122872,f)|0);i=f;e0(4e3);i=b;return}f=(al(e|0)|0)-48|0;if((f|0)<0){i=b;return}e=b+128|0;g=0;do{at(e|0,128,c[30974]|0)|0;g=g+1|0;}while((g|0)<23);L11:do{if((f|0)>0){g=d|0;e=f;L13:while(1){h=0;do{at(g|0,128,c[30974]|0)|0;j=fj(g|0)|0;if((j|0)>0){k=0;l=0;while(1){L20:do{if((k|0)==0){m=a[d+l|0]|0;do{if(m<<24>>24==94){n=l+3|0;if((n|0)>=(j|0)){o=l;p=94;break}if((a[d+(l+1)|0]|0)!=91){o=l;p=94;break}q=(a[d+(l+2)|0]|0)==91;r=q?n:l;if(q){s=r;t=q&1;break L20}o=r;p=a[d+r|0]|0}else{o=l;p=m}}while(0);eQ(p);s=o+1|0;t=0}else if((k|0)==1){m=a[d+l|0]|0;if((m<<24>>24|0)==55){u=l+1|0}else if((m<<24>>24|0)==56){u=l+1|0}else if((m<<24>>24|0)==57){u=l+1|0}else{u=l}s=u+1|0;t=0}else{break L13}}while(0);if((s|0)<(j|0)){k=t;l=s}else{break}}}h=h+1|0;}while((h|0)<23);e=e-1|0;if((e|0)<=0){break L11}}while(1){}}}while(0);ao(c[30974]|0)|0;i=b;return}function b0(){fb(29680);fb(41e3);fb(33224);fb(29432);fb(26416);fb(23840);fb(21480);fb(19320);fb(16888);fb(14520);fb(45472);fb(43256);fb(42016);fb(40880);e2(39768);e4(-1,39016,128608);return}function b1(){var a=0;a=fe(12)|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;return a|0}function b2(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;g=b+4|0;h=c[g>>2]|0;i=b|0;j=c[i>>2]|0;k=h-j|0;l=f+1+((k|0)/2|0)|0;m=b+8|0;b=c[m>>2]|0;if(b>>>0<l>>>0){n=b;do{n=n+1024|0;}while(n>>>0<l>>>0);c[m>>2]=n;m=fg(j,n<<1)|0;c[i>>2]=m;i=m+k|0;c[g>>2]=i;o=i}else{o=h}if((f|0)==0){p=o;a[p]=0;return}else{q=0;r=o}while(1){o=e+q|0;h=a[26080+((d[o]|0)>>>4)|0]|0;c[g>>2]=r+1;a[r]=h;h=a[26080+(a[o]&15)|0]|0;o=c[g>>2]|0;c[g>>2]=o+1;a[o]=h;h=q+1|0;o=c[g>>2]|0;if(h>>>0<f>>>0){q=h;r=o}else{p=o;break}}a[p]=0;return}function b3(a){a=a|0;var b=0;b=fe(12)|0;c[b+8>>2]=0;c[b>>2]=a;c[b+4>>2]=a;return b|0}function b4(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0;f=b+4|0;if((e|0)==0){return}else{g=0}while(1){b=c[f>>2]|0;if((a[b]|0)==0){h=14;break}c[f>>2]=b+1;i=a[b]|0;b=i-48&255;do{if((b&255)>>>0<10>>>0){j=b}else{if((i-97&255)>>>0<6>>>0){j=i-87&255;break}else{j=i-55&255;break}}}while(0);i=d+g|0;a[i]=j<<4;b=c[f>>2]|0;c[f>>2]=b+1;k=a[b]|0;b=k-48&255;do{if((b&255)>>>0<10>>>0){l=b}else{if((k-97&255)>>>0<6>>>0){l=k-87&255;break}else{l=k-55&255;break}}}while(0);a[i]=(a[i]|0)+l;k=g+1|0;if(k>>>0<e>>>0){g=k}else{h=15;break}}if((h|0)==14){return}else if((h|0)==15){return}}function b5(a){a=a|0;var b=0;if((c[a+8>>2]|0)==0){b=a;ff(b);return}ff(c[a>>2]|0);b=a;ff(b);return}function b6(d){d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;if((d|0)==0|d>>>0>65>>>0){eP();eS(20992,(f=i,i=i+8|0,c[f>>2]=d,f)|0);i=f;e0(3e3);i=e;return}else{g=d}while(1){if((c[5692+(g*24|0)>>2]&1|0)!=0&g>>>0<57>>>0){g=g+1|0}else{break}}d=-8;f=(ai()|0)%8|0;while(1){h=f+1|0;if((d|0)>=0){j=10;break}k=(h|0)>8?1:h;l=(a[11e3+k|0]|0)+(c[14874]|0)|0;m=(a[10984+k|0]|0)+(c[14872]|0)|0;if((by(l,m,0,1)|0)==0){d=d+1|0;f=k}else{break}}if((j|0)==10){i=e;return}a[68960+(l*442|0)+(m*26|0)|0]=g;b[120568+(l*34|0)+(m<<1)>>1]=b[5684+(g*24|0)>>1]|0;j=49776+(l*17|0)+m|0;a[j]=0;if(!((g|0)==36|(g|0)==40|(g|0)==38)){i=e;return}a[j]=2;i=e;return}function b7(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;if((a[68960+(b*442|0)+(c*26|0)|0]|0)==0){e=0;return e|0}f=a[68960+(b*442|0)+(c*26|0)+1|0]|0;if(f<<24>>24<=0){e=0;return e|0}g=f<<24>>24;f=0;h=0;while(1){i=(a[68960+(b*442|0)+(c*26|0)+2+(h<<2)|0]|0)==(d|0)?1:f;j=h+1|0;if((j|0)<(g|0)){f=i;h=j}else{e=i;break}}return e|0}function b8(a){a=a|0;var b=0,d=0;if(a>>>0>20>>>0){b=0;return b|0}if((c[32076]|0)!=0){b=1e4;return b|0}d=Z((c[32016]|0)-12+(c[32028]>>1)+(c[32091]|0)-(c[32069]|0)+(c[32041]|0)|0,a)|0;b=(d|0)>0?d:a;return b|0}function b9(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;e=(b|0)<0?0:b;b=(d|0)<0?0:d;if((c[32044]|0)==0){d=a[68960+(((e|0)>66?66:e)*442|0)+(((b|0)>16?16:b)*26|0)|0]|0;c[26708]=d;f=c[5672+(d*24|0)>>2]|0;g=fm(106792,f|0)|0;return}else{c[26708]=0;f=20760;g=fm(106792,f|0)|0;return}}function ca(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;f=i;if((c[32062]|0)!=0){i=f;return}g=(d|0)<0?0:d;d=(e|0)<0?0:e;e=(g|0)>66?66:g;g=(d|0)>16?16:d;d=68960+(e*442|0)+(g*26|0)|0;h=a[d]|0;if(h<<24>>24==0){i=f;return}j=h<<24>>24;a[122856]=1;if((c[32044]|0)==0){c[26708]=j;k=c[5672+(j*24|0)>>2]|0}else{c[26708]=0;k=20760}fm(106792,k|0)|0;k=(c[32026]|0)-12+(a[5677+(j*24|0)|0]|0)+(c[32020]|0)+((c[32028]|0)/4|0)-(c[32069]|0)|0;do{if((((ai()|0)%20|0)+1|0)<(k|0)){l=8}else{if((((ai()|0)%71|0)+1|0)<5){l=8;break}eR(20384);eS(20136,(m=i,i=i+8|0,c[m>>2]=106792,m)|0);i=m}}while(0);L14:do{if((l|0)==8){eR(20608);do{if((c[32076]|0)==0){k=(c[32016]|0)-12+(c[32028]>>1)+(c[32091]|0)-(c[32069]|0)+(c[32041]|0)|0;j=(k|0)<1?1:k;if((j|0)>=9999){n=j;break}n=((ai()|0)%(j|0)|0)+2|0}else{n=1e4}}while(0);eS(20136,(m=i,i=i+8|0,c[m>>2]=106792,m)|0);i=m;j=c[32038]|0;L20:do{if((h<<24>>24==16|h<<24>>24==41|h<<24>>24==27)&(j|0)>-1){k=b[117024+(j<<1)>>1]|0;if(k<<16>>16<=-10){eS(19544,(m=i,i=i+1|0,i=i+7&-8,c[m>>2]=0,m)|0);i=m;o=c[32038]|0;cK(a[117080+o|0]|0,b[117024+(o<<1)>>1]|0);o=c[32038]|0;a[117080+o|0]=1;b[117024+(o<<1)>>1]=0;c[32038]=-1;cu();eM();break L14}L25:do{switch(a[117080+j|0]|0){case 45:case 39:case 38:case 42:case 40:case 41:case 37:case 43:case 35:case 44:case 54:{break};default:{if(k<<16>>16>0){break L25}cu();eM();break L20}}}while(0);eS(19712,(m=i,i=i+8|0,c[m>>2]=106792,m)|0);i=m;eP();cL(c[32038]|0,-1);cu();eM()}}while(0);cb(e,g,n,0)|0;if(!((h&255)>>>0>56>>>0&(c[32076]|0)!=0)){break}if((b[120568+(e*34|0)+(g<<1)>>1]|0)==0){break}eS(19256,(m=i,i=i+8|0,c[m>>2]=106792,m)|0);i=m}}while(0);do{if(h<<24>>24==28){if(((b[120568+(e*34|0)+(g<<1)>>1]|0)-1&65535)>>>0>=24>>>0){break}a[d]=((ai()|0)%9|0)+48;eT(e,g)}}while(0);if((a[d]|0)!=1){i=f;return}if((((ai()|0)%100|0)+1|0)>=41){i=f;return}b6(1);i=f;return}function cb(d,e,f,g){d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;h=i;j=(d|0)<0?0:d;d=(e|0)<0?0:e;e=(j|0)>66?66:j;j=(d|0)>16?16:d;d=68960+(e*442|0)+(j*26|0)|0;k=a[d]|0;l=k<<24>>24;m=f>>((c[32086]|0)!=0);n=(m|0)<1;o=n?1:m;m=n?1:f;c[26712]=e<<24>>24;c[26710]=j<<24>>24;f=49776+(e*17|0)+j|0;a[f]=a[f]|2;if((c[32061]|0)>0){c[32061]=1}L4:do{if((c[32057]|0)==0){p=o}else{switch(l|0){case 25:case 56:case 49:case 48:case 54:case 53:{break};default:{p=o;break L4}}p=o*3|0}}while(0);do{if((g|0)==0){o=c[32038]|0;do{if((o|0)>0){if((a[117080+o|0]|0)!=44){q=p;break}if(((ai()|0)%20|0|0)!=0){q=p;break}if((c[5692+(l*24|0)>>2]&6|0)!=2){q=p;break}eS(19040,(r=i,i=i+8|0,c[r>>2]=106792,r)|0);i=r;q=b[120568+(e*34|0)+(j<<1)>>1]|0}else{q=p}}while(0);if((k&255)>>>0<=56>>>0){s=q;break}s=(a[117080+(c[32038]|0)|0]|0)==45?1e4:(c[32076]|0)==0?q:300}else{s=p}}while(0);p=120568+(e*34|0)+(j<<1)|0;q=b[p>>1]|0;if((q|0)>(s|0)){t=m;u=q-s&65535;b[p>>1]=u;i=h;return t|0}eS(18872,(r=i,i=i+8|0,c[r>>2]=106792,r)|0);i=r;cz(c[5688+(l*24|0)>>2]|0);a[d]=0;if((a[107880+(e*17|0)+j|0]|0)!=0){eT(e,j)}d=68960+(e*442|0)+(j*26|0)+1|0;L25:do{if((a[d]|0)>0){r=0;do{bA(e,j,a[68960+(e*442|0)+(j*26|0)+2+(r<<2)|0]|0,b[68960+(e*442|0)+(j*26|0)+2+(r<<2)+2>>1]|0);r=r+1|0;v=a[d]|0;}while((r|0)<(v<<24>>24|0));r=128488+(c[26690]|0)|0;s=(a[r]|0)-v&255;a[r]=s<<24>>24<1?1:s;a[d]=0;s=b[5682+(l*24|0)>>1]|0;r=s<<16>>16;if(s<<16>>16<=0){break}bz(r+1+((ai()|0)%(r|0)|0)|0)}else{r=b[5682+(l*24|0)>>1]|0;s=r<<16>>16;if(r<<16>>16>0){bz(s+1+((ai()|0)%(s|0)|0)|0);w=l}else{w=l}L29:while(1){switch(w|0){case 6:case 14:case 26:case 10:case 23:case 36:case 31:case 54:case 45:case 56:{break L29;break};case 13:{break};default:{break L25}}if((((ai()|0)%101|0)+1|0)>74){cS()}if(((ai()|0)%5|0|0)==0){w=13}else{break L25}}bI(e,j,c[26690]|0)}}while(0);eT(e,j);eV(c[14874]|0,c[14872]|0);cu();eM();t=q;u=0;b[p>>1]=u;i=h;return t|0}function cc(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0;f=i;g=(d|0)<0?0:d;d=(e|0)<0?0:e;e=(g|0)>66?66:g;g=(d|0)>16?16:d;d=68960+(e*442|0)+(g*26|0)|0;h=a[d]|0;j=h<<24>>24;c[26708]=j;k=107880+(e*17|0)+g|0;if((a[k]|0)==0){eT(e,g)}l=c[32069]|0;m=l+1|0;a[122856]=1;a[122864]=1;a[122848]=1;c[11902]=0;if((c[32044]|0)==0){n=a[d]|0;c[26708]=n;o=c[5672+(n*24|0)>>2]|0}else{c[26708]=0;o=20760}fm(106792,o|0)|0;if(h<<24>>24==1){i=f;return}o=5692+(j*24|0)|0;do{if((c[o>>2]&128|0)==0&(c[32050]|0)!=0){if((((ai()|0)%33|0)+1|0)>=20){break}eS(18584,(p=i,i=i+8|0,c[p>>2]=106792,p)|0);i=p;i=f;return}}while(0);do{if((h&255)>>>0<57>>>0&h<<24>>24!=54&(c[32049]|0)!=0){n=((ai()|0)%30|0)+1|0;q=5676+(j*24|0)|0;if((n-(c[32021]|0)+((a[q]|0)*5|0)|0)>=30){r=q;break}eS(18336,(p=i,i=i+8|0,c[p>>2]=106792,p)|0);i=p;i=f;return}else{r=5676+(j*24|0)|0}}while(0);q=a[5678+(j*24|0)|0]|0;n=ai()|0;s=q+1+((n|0)%(((q|0)<1?1:q)|0)|0)+(a[r]|0)|0;do{if((h&255)>>>0>56>>>0){if((a[117080+(c[32038]|0)|0]|0)!=45){t=s;break}t=(Z(((ai()|0)%5|0)+1|0,s)|0)/10|0}else{t=s}}while(0);do{if((c[32077]|c[32058]|0)==0){u=t}else{if((c[o>>2]&32|0)==0){u=t;break}u=(t|0)/2|0}}while(0);do{if((c[32078]|c[32064]|0)==0){v=u}else{if((c[o>>2]&64|0)==0){v=u;break}v=(u|0)/2|0}}while(0);u=c[32029]|0;o=(u|0)>1?u:1;t=5679+(j*24|0)|0;do{if((a[t]|0)>0){if((l+9+v|0)>(u|0)){w=t}else{if(((ai()|0)%(o|0)|0|0)==0){w=t}else{x=0;y=m;break}}L38:while(1){j=a[w]|0;z=a[d]|0;s=z<<24>>24;if((c[32051]|0)!=0){if((z&255)>>>0<=63>>>0){break}if((((ai()|0)%100|0)+1|0)>94){break}}do{if(z<<24>>24!=65){if((z&255)>>>0<=56>>>0){if(!((z<<24>>24|0)==38|(z<<24>>24|0)==32)){break}}if((cx(69)|0)==0){break}if((((ai()|0)%100|0)+1|0)<75){break L38}}}while(0);if((c[5692+(s*24|0)>>2]&64|0)!=0){if((c[32078]|c[32064]|0)!=0){break}}switch(j|0){case 10:{A=80;break L38;break};case 9:{B=50;A=75;break L38;break};case 14:{A=87;break L38;break};case 11:{A=82;break L38;break};case 12:{break};case 13:{A=85;break L38;break};case 8:{A=66;break L38;break};case 4:{A=56;break L38;break};case 5:{A=58;break L38;break};case 6:{A=60;break L38;break};case 3:{A=54;break L38;break};case 7:{A=64;break L38;break};case 15:{A=91;break L38;break};case 16:{A=93;break L38;break};case 2:{A=52;break L38;break};case 1:{A=37;break L38;break};default:{break L38}}w=264+((ai()|0)%10|0)|0}L55:do{if((A|0)==80){h=((ai()|0)%25|0)+1|0;r=h-(c[32029]|0)|0;if((r|0)<=0){C=45616;D=0;A=96;break}cG(0,r);eM();C=45616;D=0;A=96}else if((A|0)==75){L58:while(1){A=0;E=(ai()|0)%26|0;r=a[117080+E|0]|0;do{if(r<<24>>24!=1){F=b[117024+(E<<1)>>1]|0;if(F<<16>>16<=0){break}if((r-55&255)>>>0>1>>>0){break L58}}}while(0);r=B-1|0;if((r|0)>0){B=r;A=75}else{G=0;H=45768;A=98;break L55}}cL(E,F<<16>>16<3?-(F<<16>>16)|0:-3);dm(E);C=45984;D=0;A=96}else if((A|0)==87){if((c[32068]|0)!=0){break}if((cR()|0)==1){G=0;H=45128;A=98;break}eS(44904,(p=i,i=i+8|0,c[p>>2]=106792,p)|0);i=p;if((cQ(e,g)|0)==0){eR(44752)}cf(e,g,a[d]|0);eP();i=f;return}else if((A|0)==82){if((a[47648]|0)!=0){break}j=((ai()|0)%10|0)+11|0;c[32046]=j+(c[32046]|0);C=45440;D=0;A=96}else if((A|0)==85){j=((ai()|0)%15|0)+31|0;s=j-(c[32029]|0)|0;if((s|0)<=0){C=45288;D=0;A=96;break}cG(0,s);eM();C=45288;D=0;A=96}else if((A|0)==66){if((c[32068]|0)!=0){break}s=c[32024]|0;do{if((s|0)==0){I=13440}else{if((s|0)>32767){J=s>>1}else{j=ai()|0;r=c[32024]|0;J=r-1-((j|0)%((r>>1)+1|0)|0)|0}c[32024]=J;if((J|0)>=0){I=13616;break}c[32024]=0;I=13616}}while(0);a[d]=0;if((a[k]|0)==0){C=I;D=1;A=96;break}eT(e,g);C=I;D=1;A=96}else if((A|0)==56){if((c[32016]|0)<=3){G=0;H=14360;A=98;break}cU(0,-1);C=14480;D=0;A=96}else if((A|0)==58){s=((ai()|0)%15|0)+19|0;r=s-(c[32029]|0)|0;if((r|0)<=0){C=14192;D=0;A=96;break}cG(0,r);eM();C=14192;D=0;A=96}else if((A|0)==60){if((cx(70)|0)!=0){break}cA();if((z<<24>>24|0)==64){cF(1);C=13968;D=0;A=96;break}else if((z<<24>>24|0)==65){cA();cF(2);cU(0,-1);cU(1,-1);cU(2,-1);cU(3,-1);cU(4,-1);C=13968;D=0;A=96;break}else{C=13968;D=0;A=96;break}}else if((A|0)==54){r=((ai()|0)%20|0)+26|0;s=r-(c[32029]|0)|0;r=(c[32066]|0)==0;j=r?14776:14976;h=r&1;if((s|0)<=0){K=h;L=j;A=95;break}cG(0,s);eM();K=h;L=j;A=95}else if((A|0)==64){j=((ai()|0)%15|0)+26|0;h=j-(c[32029]|0)|0;if((h|0)<=0){C=13800;D=0;A=96;break}cG(0,h);eM();C=13800;D=0;A=96}else if((A|0)==91){h=((ai()|0)%10|0)+6|0;j=h-(c[32029]|0)|0;if((j|0)<=0){C=44584;D=0;A=96;break}cG(0,j);eM();C=44584;D=0;A=96}else if((A|0)==93){j=((ai()|0)%15|0)+11|0;h=j-(c[32029]|0)|0;if((h|0)<=0){C=44584;D=0;A=96;break}cG(0,h);eM();C=44584;D=0;A=96}else if((A|0)==52){h=((ai()|0)%15|0)+9|0;j=h-(c[32029]|0)|0;h=(c[32066]|0)==0;s=h?14776:14976;r=h&1;if((j|0)<=0){K=r;L=s;A=95;break}cG(0,j);eM();K=r;L=s;A=95}else if((A|0)==37){s=c[32036]|0;r=c[32079]|0;do{if((r|0)==-1){A=40}else{if((b[117024+(r<<1)>>1]|0)<=-1){A=40;break}cL(r,-1);A=50}}while(0);L110:do{if((A|0)==40){do{if((s|0)!=-1){r=a[117080+s|0]|0;j=0;do{M=(r|0)==(b[4056+(j<<2)>>1]|0);j=(M&1^1)+j|0;}while((j|0)<6&(M^1));do{if(M){if((b[117024+(s<<1)>>1]|0)<=(b[4058+(j<<2)>>1]|0)){break}cL(s,-1);A=50;break L110}}while(0);if((r|0)==31){N=44128;break L110}else if((r|0)==33){N=43800;break L110}else if((r|0)==26){N=44384;break L110}else{break}}}while(0);N=18128}}while(0);if((A|0)==50){eP();N=43584}cu();G=0;H=N;A=98}}while(0);if((A|0)==95){if((K|0)==0){G=0;H=L;A=98}else{C=L;D=0;A=96}}if((A|0)==96){eP();G=D;H=C;A=98}do{if((A|0)==98){eS(H,(p=i,i=i+8|0,c[p>>2]=106792,p)|0);i=p;cu();eM();if((G|0)==0){break}i=f;return}}while(0);x=1;y=l-1|0}else{x=0;y=m}}while(0);do{if((y+v|0)<=(c[32029]|0)){if(((ai()|0)%(o|0)|0|0)==0){break}if((x|0)!=0){i=f;return}eS(17920,(p=i,i=i+8|0,c[p>>2]=106792,p)|0);i=p;i=f;return}}while(0);eS(18128,(p=i,i=i+8|0,c[p>>2]=106792,p)|0);i=p;p=v-(c[32029]|0)|0;v=(p|0)<0?0:p;if((v|0)<=0){i=f;return}cG(0,v);eM();i=f;return}function cd(b){b=b|0;var d=0,e=0,f=0;d=(b|0)<1?1:b;b=(d|0)>12?12:d;if((b|0)<5){e=1}else{e=(a[5656+(b-4)|0]|0)+1|0}d=1-e+(a[5656+(b-1)|0]|0)|0;while(1){b=((ai()|0)%(d|0)|0)+e|0;if((b|0)!=47){f=b;break}}while(1){if((c[5692+(f*24|0)>>2]&1|0)!=0&(f|0)<57){f=f+1|0}else{break}}if((c[26690]|0)<16){e=(((ai()|0)%100|0)+1|0)<10;return(e?1:f)|0}else{return f|0}return 0}function ce(){var b=0,d=0,e=0,f=0,g=0;if((c[32062]|0)!=0){return}b=(a[4080]|0)-1&255;a[4080]=b;if(b<<24>>24>=1){return}b=c[26690]|0;a[4080]=120-(b<<2);d=(b|0)<1?1:b;b=(d|0)>12?12:d;if((b|0)<5){e=1}else{e=(a[5656+(b-4)|0]|0)+1|0}d=1-e+(a[5656+(b-1)|0]|0)|0;while(1){b=((ai()|0)%(d|0)|0)+e|0;if((b|0)!=47){f=b;break}}while(1){if((c[5692+(f*24|0)>>2]&1|0)!=0&(f|0)<57){f=f+1|0}else{break}}if((c[26690]|0)<16){e=(((ai()|0)%100|0)+1|0)<10;g=e?1:f}else{g=f}bB(g)|0;return}function cf(d,e,f){d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0;g=10;L1:while(1){h=((ai()|0)%65|0)+1|0;i=((ai()|0)%15|0)+1|0;do{if((a[117112+(h*17|0)+i|0]|0)==1){j=68960+(h*442|0)+(i*26|0)|0;if((a[j]|0)!=0){break}if(!((c[14874]|0)==(h|0)&(c[14872]|0)==(i|0))){break L1}}}while(0);k=g-1|0;if((k|0)>0){g=k}else{l=10;break}}if((l|0)==10){return}a[j]=f;a[68960+(d*442|0)+(e*26|0)|0]=0;b[120568+(h*34|0)+(i<<1)>>1]=b[5684+(f*24|0)>>1]|0;b[120568+(d*34|0)+(e<<1)>>1]=0;f=68960+(d*442|0)+(e*26|0)+1|0;j=a[f]|0;if(j<<24>>24>0){l=0;while(1){g=68960+(d*442|0)+(e*26|0)+2+(l<<2)|0;a[68960+(h*442|0)+(i*26|0)+2+(l<<2)|0]=a[g]|0;k=68960+(d*442|0)+(e*26|0)+2+(l<<2)+2|0;b[68960+(h*442|0)+(i*26|0)+2+(l<<2)+2>>1]=b[k>>1]|0;a[g]=1;b[k>>1]=0;k=l+1|0;g=a[f]|0;if((k|0)<(g<<24>>24|0)){l=k}else{m=g;break}}}else{m=j}a[68960+(h*442|0)+(i*26|0)+1|0]=m;a[f]=0;c[16944]=h;c[16942]=i;eT(d,e);return}function cg(){var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;if((c[32062]|0)!=0){return}b=c[32052]|0;if((b|0)!=0&(b&1|0)==0){return}dY();if((c[32061]|0)!=0){return}b=c[32054]|0;d=c[14872]|0;if((b|0)==0){e=d-3|0;c[17232]=e;f=d+4|0;c[17234]=f;g=c[14874]|0;h=g-5|0;c[17236]=h;i=17;j=g+6|0;k=e;l=f;m=h}else{h=d-5|0;c[17232]=h;f=d+6|0;c[17234]=f;d=c[14874]|0;e=d-10|0;c[17236]=e;i=40;j=d+11|0;k=h;l=f;m=e}c[17238]=j;c[31888]=i;do{if((c[26690]|0)==0){if((k|0)<0){c[17232]=0;n=0}else{n=k}if((l|0)>17){c[17234]=17;o=17}else{o=l}if((m|0)<0){c[17236]=0;p=0}else{p=m}if((j|0)<=67){q=n;r=o;s=p;t=j;break}c[17238]=67;q=n;r=o;s=p;t=67}else{if((k|0)<1){c[17232]=1;u=1}else{u=k}if((l|0)>16){c[17234]=16;v=16}else{v=l}if((m|0)<1){c[17236]=1;w=1}else{w=m}if((j|0)<=66){q=u;r=v;s=w;t=j;break}c[17238]=66;q=u;r=v;s=w;t=66}}while(0);if((q|0)<(r|0)){w=(s|0)<(t|0);v=q;do{if(w){u=s;do{a[67784+(u*17|0)+v|0]=0;u=u+1|0;}while((u|0)<(t|0))}v=v+1|0;}while((v|0)<(r|0))}r=c[26712]|0;v=c[26710]|0;do{if(r>>>0<67>>>0&(v|0)>-1&(v|0)<17){a[67784+(r*17|0)+v|0]=0;if((a[68960+(r*442|0)+(v*26|0)|0]|0)==0){x=b;y=q;break}ch(r,v);c[26712]=c[16944]<<24>>24;c[26710]=c[16942]<<24>>24;x=c[32054]|0;y=c[17232]|0}else{x=b;y=q}}while(0);q=c[17234]|0;b=(y|0)<(q|0);if(!((x|0)==0&(c[32080]|0)!=0)){if(!b){return}x=y;v=c[17238]|0;r=q;while(1){t=c[17236]|0;if((t|0)<(v|0)){s=t;t=v;while(1){do{if((a[68960+(s*442|0)+(x*26|0)|0]|0)==0){z=t}else{if((a[67784+(s*17|0)+x|0]|0)!=0){z=t;break}ch(s,x);z=c[17238]|0}}while(0);w=s+1|0;if((w|0)<(z|0)){s=w;t=z}else{break}}A=z;B=c[17234]|0}else{A=v;B=r}t=x+1|0;if((t|0)<(B|0)){x=t;v=A;r=B}else{break}}return}if(!b){return}b=y;y=c[17238]|0;B=q;while(1){q=c[17236]|0;if((q|0)<(y|0)){r=q;q=y;while(1){do{if((a[68960+(r*442|0)+(b*26|0)|0]|0)==0){C=q}else{if((a[67784+(r*17|0)+b|0]|0)!=0){C=q;break}if((a[49776+(r*17|0)+b|0]&2)==0){C=q;break}ch(r,b);C=c[17238]|0}}while(0);A=r+1|0;if((A|0)<(C|0)){r=A;q=C}else{break}}D=C;E=c[17234]|0}else{D=y;E=B}q=b+1|0;if((q|0)<(E|0)){b=q;y=D;B=E}else{break}}return}function ch(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,_=0,$=0,aa=0,ab=0,ac=0,ad=0,ae=0,af=0,ag=0,ah=0,aj=0,ak=0,al=0,am=0,an=0;f=i;i=i+72|0;g=f|0;h=f+24|0;j=f+48|0;k=68960+(d*442|0)+(e*26|0)|0;l=a[k]|0;m=l<<24>>24;do{if((c[5692+(m*24|0)>>2]&8|0)!=0){if((c[31476]&1|0)==0){break}i=f;return}}while(0);n=cx(66)|0;do{if((c[32059]|0)==0){if((n|0)!=1){o=n;break}o=(((ai()|0)%10|0)+1|0)<5|0}else{o=n+1|0}}while(0);do{if((l&255)>>>0>57>>>0|l<<24>>24==54){if((o|0)<2){break}p=(((ai()|0)%10|0)+1|0)>5|0;q=10}else{p=o;q=10}}while(0);do{if((q|0)==10){if((p|0)==0){break}o=d-1+((ai()|0)%3|0)|0;l=e-1+((ai()|0)%3|0)|0;n=(o|0)<0?0:o;o=(n|0)>66?66:n;n=(l|0)<0?0:l;l=(n|0)>16?16:n;n=a[k]|0;r=a[117112+(o*17|0)+l|0]|0;if((c[14874]|0)==(o|0)){s=(c[14872]|0)!=(l|0)|0}else{s=1}if((o|0)==33&(l|0)==16){t=(c[26690]|0)!=1}else{t=1}if(r<<24>>24==17){u=0}else{u=(s|0)==0|r<<24>>24!=18}if(n<<24>>24==38&r<<24>>24==12|t&((n&255)>>>0>63>>>0|u)^1){i=f;return}if((a[68960+(o*442|0)+(l*26|0)|0]|0)!=0){i=f;return}cl(d,e,o,l);i=f;return}}while(0);if((a[5680+(m*24|0)|0]|0)<=(10-(c[32069]|0)|0)){m=a[k]|0;u=d+2|0;t=e+2|0;s=c[14874]|0;if((s|0)>(d|0)){v=u;w=d}else{v=(s|0)<(d|0)?d+1|0:u;w=d-1|0}u=c[14872]|0;if((u|0)>(e|0)){x=t;y=e}else{x=(u|0)<(e|0)?e+1|0:t;y=e-1|0}t=g|0;b[t>>1]=1e4;p=g+2|0;b[p>>1]=1e4;l=g+4|0;b[l>>1]=1e4;o=g+6|0;b[o>>1]=1e4;n=g+8|0;b[n>>1]=1e4;r=g+10|0;b[r>>1]=1e4;z=g+12|0;b[z>>1]=1e4;A=g+14|0;b[A>>1]=1e4;B=g+16|0;b[B>>1]=1e4;C=(w|0)<0?0:w;w=(v|0)>67?67:v;v=(y|0)<0?0:y;D=(x|0)>17?17:x;if((C|0)<(w|0)){E=(v|0)<(D|0);F=(c[26690]|0)!=1;G=m<<24>>24==38;H=(m&255)>>>0>63>>>0;m=((x|0)<17?x:17)+((y|0)>0?-y|0:0)|0;y=C;C=0;while(1){if(E){x=(s|0)==(y|0);I=s-y|0;J=Z(I,I)|0;I=y&65535;K=(y|0)!=33;L=v;M=C;while(1){N=a[117112+(y*17|0)+L|0]|0;if(x){O=(u|0)!=(L|0)|0}else{O=1}if(N<<24>>24==17){P=0}else{P=(O|0)==0|N<<24>>24!=18}do{if(!(G&N<<24>>24==12|(F|((L|0)!=16|K))&(H|P)^1)){if((a[68960+(y*442|0)+(L*26|0)|0]|0)!=0){break}Q=u-L|0;b[g+(M<<1)>>1]=(Z(Q,Q)|0)+J;b[h+(M<<1)>>1]=I;b[j+(M<<1)>>1]=L}}while(0);N=L+1|0;if((N|0)<(D|0)){L=N;M=M+1|0}else{break}}R=m+C|0}else{R=C}M=y+1|0;if((M|0)<(w|0)){y=M;C=R}else{break}}S=b[p>>1]|0;T=b[t>>1]|0;U=b[l>>1]|0;V=b[o>>1]|0;W=b[n>>1]|0;X=b[r>>1]|0;Y=b[z>>1]|0;_=b[A>>1]|0;$=b[B>>1]|0}else{S=1e4;T=1e4;U=1e4;V=1e4;W=1e4;X=1e4;Y=1e4;_=1e4;$=1e4}B=S<<16>>16<T<<16>>16|0;T=U<<16>>16<(b[g+(B<<1)>>1]|0)?2:B;B=V<<16>>16<(b[g+(T<<1)>>1]|0)?3:T;T=W<<16>>16<(b[g+(B<<1)>>1]|0)?4:B;B=X<<16>>16<(b[g+(T<<1)>>1]|0)?5:T;T=Y<<16>>16<(b[g+(B<<1)>>1]|0)?6:B;B=_<<16>>16<(b[g+(T<<1)>>1]|0)?7:T;T=$<<16>>16<(b[g+(B<<1)>>1]|0)?8:B;if((b[g+(T<<1)>>1]|0)>=1e4){i=f;return}g=b[h+(T<<1)>>1]|0;h=b[j+(T<<1)>>1]|0;if((g|0)==(d|0)&(h|0)==(e|0)){i=f;return}cl(d,e,g,h);i=f;return}h=a[k]|0;k=c[17236]|0;g=k-2|0;T=c[17232]|0;j=T-2|0;B=c[17238]|0;$=B+2|0;_=c[17234]|0;Y=_+2|0;X=(g|0)<0?0:g;g=(j|0)<0?0:j;j=(X|0)>66?66:X;X=(g|0)>16?16:g;g=($|0)<0?0:$;$=(Y|0)<0?0:Y;Y=(g|0)>66?66:g;g=($|0)>16?16:$;if((X|0)>(g|0)){aa=c[14872]|0;ab=c[14874]|0}else{$=(j|0)>(Y|0);W=c[14874]|0;V=c[14872]|0;U=(c[26690]|0)!=1;S=h<<24>>24==38;A=(h&255)>>>0>63>>>0;z=5692+((h<<24>>24)*24|0)|0;h=X;while(1){if(!$){X=(V|0)==(h|0);if((h|0)==16){r=j;do{n=a[117128+(r*17|0)|0]|0;if(n<<24>>24==17){ac=0}else{ac=(W|0)==(r|0)&X|n<<24>>24!=18}L103:do{if(S&n<<24>>24==12|(U|(r|0)!=33)&(A|ac)^1){b[51248+(r*34|0)>>1]=127}else{if(A){b[51248+(r*34|0)>>1]=0;break}switch(n<<24>>24|0){case 8:case 14:case 87:case 89:case 11:{b[51248+(r*34|0)>>1]=127;break L103;break};case 6:case 90:{o=51248+(r*34|0)|0;if((c[z>>2]&16|0)==0){b[o>>1]=127;break L103}else{b[o>>1]=0;break L103}break};default:{b[51248+(r*34|0)>>1]=0;break L103}}}}while(0);r=r+1|0;}while((r|0)<=(Y|0))}else{r=j;do{n=a[117112+(r*17|0)+h|0]|0;if(n<<24>>24==17){ad=0}else{ad=(W|0)==(r|0)&X|n<<24>>24!=18}L84:do{if(S&n<<24>>24==12|(A|ad)^1){b[51216+(r*34|0)+(h<<1)>>1]=127}else{if(A){b[51216+(r*34|0)+(h<<1)>>1]=0;break}switch(n<<24>>24|0){case 8:case 14:case 87:case 89:case 11:{b[51216+(r*34|0)+(h<<1)>>1]=127;break L84;break};case 6:case 90:{o=51216+(r*34|0)+(h<<1)|0;if((c[z>>2]&16|0)==0){b[o>>1]=127;break L84}else{b[o>>1]=0;break L84}break};default:{b[51216+(r*34|0)+(h<<1)>>1]=0;break L84}}}}while(0);r=r+1|0;}while((r|0)<=(Y|0))}}r=h+1|0;if((r|0)>(g|0)){aa=V;ab=W;break}else{h=r}}}b[51216+(ab*34|0)+(aa<<1)>>1]=1;aa=k-1|0;k=T-1|0;T=B+1|0;B=_+1|0;_=(aa|0)<0?0:aa;aa=(k|0)<0?0:k;k=(_|0)>66?66:_;_=(aa|0)>16?16:aa;aa=(T|0)<0?0:T;T=(B|0)<0?0:B;B=(aa|0)>66?66:aa;aa=(T|0)>16?16:T;T=c[31888]|0;if((T|0)<=1){i=f;return}ab=(_|0)>(aa|0);h=(k|0)>(B|0);W=1;while(1){V=W+1|0;L124:do{if(ab){ae=0}else{g=(V&255)<<24>>24;if(h){Y=_;while(1){z=Y+1|0;if((z|0)>(aa|0)){ae=0;break L124}else{Y=z}}}else{af=_;ag=0}while(1){Y=ag;z=k;while(1){if((b[51216+(z*34|0)+(af<<1)>>1]|0)==(W|0)){A=Y;ad=1;while(1){S=(a[11e3+ad|0]|0)+z|0;j=(a[10984+ad|0]|0)+af|0;do{if(S>>>0<67>>>0&j>>>0<17>>>0){ac=51216+(S*34|0)+(j<<1)|0;if((b[ac>>1]|0)!=0){ah=A;break}b[ac>>1]=g;ah=(S|0)==(d|0)&(j|0)==(e|0)?1:A}else{ah=A}}while(0);j=ad+1|0;if((j|0)<9){A=ah;ad=j}else{aj=ah;break}}}else{aj=Y}ad=z+1|0;if((ad|0)>(B|0)){break}else{Y=aj;z=ad}}z=af+1|0;if((z|0)>(aa|0)){ae=aj;break}else{af=z;ag=aj}}}}while(0);ak=(ae|0)==0;if((V|0)<(T|0)&ak){W=V}else{break}}if(ak){i=f;return}ak=(b[51216+(d*34|0)+(e<<1)>>1]|0)-1|0;W=1;L147:while(1){al=(a[11e3+W|0]|0)+d|0;am=(a[10984+W|0]|0)+e|0;do{if((c[26690]|0)==0){an=bH(al,am)|0;q=73}else{if(!((al-1|0)>>>0<65>>>0&(am|0)>0)){break}an=(am|0)<16|0;q=73}}while(0);do{if((q|0)==73){q=0;if((an|0)==0){break}if((b[51216+(al*34|0)+(am<<1)>>1]|0)!=(ak|0)){break}if((a[68960+(al*442|0)+(am*26|0)|0]|0)==0){break L147}}}while(0);V=W+1|0;if((V|0)<9){W=V}else{q=107;break}}if((q|0)==107){i=f;return}cl(d,e,al,am);i=f;return}function ci(){if((c[32063]|0)!=0){cg()}cg();ce();cV();return}function cj(b){b=b|0;var d=0,e=0,f=0;d=i;i=i+8|0;e=d|0;c7(b,4080,1);f=0;do{a[e]=c[5692+(f*24|0)>>2]&1;c7(b,e,1);f=f+1|0;}while((f|0)<57);i=d;return}function ck(b){b=b|0;var d=0,e=0,f=0,g=0;d=i;i=i+8|0;e=d|0;c8(b,4080,1);f=0;do{c8(b,e,1);if((a[e]|0)!=0){g=5692+(f*24|0)|0;c[g>>2]=c[g>>2]|1}f=f+1|0;}while((f|0)<57);i=d;return}function cl(d,f,g,h){d=d|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;j=i;if((c[14874]|0)==(g|0)&(c[14872]|0)==(h|0)){cc(d,f);a[67784+(d*17|0)+f|0]=1;c[16944]=d;c[16942]=f;i=j;return}k=68960+(d*442|0)+(f*26|0)|0;l=a[k]|0;m=l<<24>>24;n=117112+(g*17|0)+h|0;o=a[n]|0;p=o<<24>>24;q=68960+(d*442|0)+(f*26|0)+1|0;r=a[q]|0;if(r<<24>>24>0){s=0;do{t=68960+(d*442|0)+(f*26|0)+2+(s<<2)|0;a[68960+(g*442|0)+(h*26|0)+2+(s<<2)|0]=a[t]|0;u=68960+(d*442|0)+(f*26|0)+2+(s<<2)+2|0;b[68960+(g*442|0)+(h*26|0)+2+(s<<2)+2>>1]=b[u>>1]|0;a[t]=1;b[u>>1]=0;s=s+1|0;v=a[q]|0;}while((s|0)<(v<<24>>24|0));w=v;x=a[k]|0}else{w=r;x=l}r=68960+(g*442|0)+(h*26|0)+1|0;a[r]=w;w=68960+(g*442|0)+(h*26|0)|0;a[w]=x;x=49776+(g*17|0)+h|0;a[x]=a[x]|2;x=120568+(d*34|0)+(f<<1)|0;v=120568+(g*34|0)+(h<<1)|0;b[v>>1]=b[x>>1]|0;a[k]=0;a[q]=0;b[x>>1]=0;a[67784+(g*17|0)+h|0]=1;L10:do{if((l<<24>>24|0)==1){if((((ai()|0)%100|0)+1|0)>=3){break}a[k]=1;b[x>>1]=b[v>>1]|0}else if((l<<24>>24|0)==13){switch(p|0){case 19:case 22:case 21:case 20:case 71:case 72:case 73:case 74:{break};default:{break L10}}q=a[r]|0;if(q<<24>>24<6){s=q<<24>>24;a[68960+(g*442|0)+(h*26|0)+2+(s<<2)|0]=o;q=118288+(g*34|0)+(h<<1)|0;b[68960+(g*442|0)+(h*26|0)+2+(s<<2)+2>>1]=b[q>>1]|0;a[r]=(a[r]|0)+1;y=q}else{y=118288+(g*34|0)+(h<<1)|0}a[n]=1;b[y>>1]=0}else if((l<<24>>24|0)==23){if((c[31476]&1|0)!=0){break}q=b[v>>1]|0;if((b[5684+(m*24|0)>>1]|0)<=q<<16>>16){break}b[v>>1]=q+1}}while(0);L23:do{switch(o<<24>>24){case 93:{if((l&255)>>>0<=56>>>0){a[w]=0;a[r]=0;b[v>>1]=0;z=17128;A=0;B=h;C=g;D=128512;break L23}do{if((cx(67)|0)!=0){if(l<<24>>24==65){if((((ai()|0)%10|0)+1|0)>7){break}}a[w]=0;a[r]=0;b[v>>1]=0;z=17128;A=0;B=h;C=g;D=128512;break L23}}while(0);dV(g,h);z=17368;A=1;B=h;C=g;D=128512;break};case 87:{E=16856;F=((ai()|0)%10|0)+1+(c[26690]|0)|0;G=35;break};case 89:{E=16648;F=((ai()|0)%6|0)+1|0;G=35;break};case 11:{if((l&255)>>>0>=57>>>0){z=0;A=1;B=h;C=g;D=128512;break L23}cf(g,h,a[w]|0);z=16400;A=1;B=c[16942]|0;C=c[16944]|0;D=128512;break};case 6:{if((c[5692+(m*24|0)>>2]&16|0)!=0){z=0;A=1;B=h;C=g;D=128512;break L23}a[w]=0;b[v>>1]=0;z=16192;A=0;B=h;C=g;D=128512;break};case 90:{if((c[5692+(m*24|0)>>2]&16|0)!=0){z=0;A=1;B=h;C=g;D=128512;break L23}a[w]=0;b[v>>1]=0;z=15944;A=0;B=h;C=g;D=128512;break};case 14:case 8:{if((l&255)>>>0>=57>>>0){z=0;A=1;B=h;C=g;D=128512;break L23}a[w]=0;b[v>>1]=0;z=15664;A=0;B=h;C=g;D=128512;break};default:{z=0;A=1;B=h;C=g;D=128512}}}while(0);do{if((G|0)==35){if((F|0)<=0){z=0;A=1;B=h;C=g;D=E;break}r=(e[v>>1]|0)-F&65535;b[v>>1]=r;if(r<<16>>16>=1){z=15248;A=1;B=h;C=g;D=E;break}a[w]=0;z=15448;A=0;B=h;C=g;D=E}}while(0);c[16944]=A?C:-1;c[16942]=A?B:-1;if((c[32044]|0)!=0){i=j;return}A=107880+(C*17|0)+B|0;if(!((a[A]|0)==0|(z|0)==0)){E=c[5672+(m*24|0)>>2]|0;eS(z,(z=i,i=i+16|0,c[z>>2]=D,c[z+8>>2]=E,z)|0);i=z;eP()}if((l-57&255)>>>0<9>>>0&(c[32053]|0)==0){i=j;return}if((a[107880+(d*17|0)+f|0]|0)!=0){eT(d,f)}if((a[A]|0)==0){i=j;return}eT(C,B);i=j;return}function cm(b){b=b|0;var d=0,e=0;if((b|0)==101){eR(23040);d=c[14872]|0;e=c[14874]|0;a[117112+(e*17|0)+d|0]=1;a[107880+(e*17|0)+d|0]=1;if((c[32044]|0)!=0){return}d=b_(126504)|0;if((d|0)==0){return}eR(38520);eR(d);return}else if((b|0)==116){if((cI(94,0)|0)!=0){return}b=c[14872]|0;d=c[14874]|0;a[117112+(d*17|0)+b|0]=1;a[107880+(d*17|0)+b|0]=1;return}else{return}}function cn(){var d=0,e=0,f=0,g=0,h=0;d=i;if((a[(c[14872]|0)+(117112+((c[14874]|0)*17|0))|0]|0)!=58){i=d;return}if((((ai()|0)%101|0)+1|0)>=40){eR(45104);i=d;return}eR(23384);eP();e=((ai()|0)%10|0)+1|0;f=c[32023]|0;g=(e|0)>(f|0)?f:e;eS(21072,(e=i,i=i+16|0,c[e>>2]=g,c[e+8>>2]=(g|0)==1?128544:25712,e)|0);i=e;cG(26,g);eM();g=(ai()|0)%10|0;if((g|0)==0){e=((ai()|0)%1e3|0)+101|0;c[32081]=e+(c[32081]|0);eR(18736);eP()}else if((g|0)==1){e=((ai()|0)%1600|0)+201|0;c[32084]=e+(c[32084]|0);eR(16328);eP()}else if((g|0)==2){g=((ai()|0)%1600|0)+201|0;c[32086]=g+(c[32086]|0);eR(14136);eP()}a[(c[14872]|0)+(117112+((c[14874]|0)*17|0))|0]=1;if((((ai()|0)%100|0)+1|0)<69){cS()}g=ai()|0;bz(((g|0)%(((b[118288+((c[14874]|0)*34|0)+(c[14872]<<1)>>1]|0)*110|0)+200|0)|0)+1|0);if((((ai()|0)%4|0)+1|0)>0){h=0}else{i=d;return}do{g=c[14874]|0;e=c[14872]|0;bI(g,e,(b[118288+(g*34|0)+(e<<1)>>1]|0)+2|0);h=h+1|0;}while((h|0)<(((ai()|0)%4|0)+1|0));i=d;return}function co(){var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;d=i;if((c[32062]|0)!=0){i=d;return}e=c[14872]|0;f=c[14874]|0;g=a[117112+(f*17|0)+e|0]|0;h=g<<24>>24;if(g<<24>>24==1){i=d;return}eV(f,e);c[11902]=0;L7:do{switch(h|0){case 57:{eR(33104);if((c[32044]|0)==0){e4(114,37256,128544)}e4(116,38648,128544);i=d;return};case 55:{eR(37992);e=b[118288+((c[14874]|0)*34|0)+(c[14872]<<1)>>1]|0;if((c[51104+(e<<2)>>2]|0)!=0){eS(41824,(j=i,i=i+8|0,c[j>>2]=(c[3856+(e<<2)>>2]|0)+1,j)|0);i=j}eR(40720);if((c[32044]|0)==0){e4(114,37256,128544)}e4(116,38648,128544);i=d;return};case 76:{if((cP()|0)!=0){i=d;return}eR(25048);e4(103,26352,128544);i=d;return};case 19:case 22:case 21:case 20:{e=b[118288+((c[14874]|0)*34|0)+(c[14872]<<1)>>1]|0;if((h|0)==20){k=e*10|0}else if((h|0)==22){k=e*100|0}else if((h|0)==21){k=e*1e3|0}else{k=e}eS(32368,(j=i,i=i+16|0,c[j>>2]=k,c[j+8>>2]=(k|0)==1?128544:25712,j)|0);i=j;c[32024]=(c[32024]|0)+k;eM();a[(c[14872]|0)+(117112+((c[14874]|0)*17|0))|0]=1;i=d;return};case 77:case 78:{if((cP()|0)!=0){i=d;return}if(g<<24>>24==78){eR(25744)}else{eR(25480)}e4(103,26352,128544);i=d;return};case 11:{e=c[14872]|0;f=c[14874]|0;l=e;m=f;n=a[117112+(f*17|0)+e|0]|0;o=47;break};case 13:{eR(29792);e4(100,24832,128544);i=d;return};case 88:{if((((ai()|0)%17|0)+1|0)<13){i=d;return}else{a[(c[14872]|0)+(117112+((c[14874]|0)*17|0))|0]=89;o=73;break L7}break};case 12:{if((cP()|0)!=0){i=d;return}eR(26024);bZ();i=d;return};case 86:{if((((ai()|0)%17|0)+1|0)<13){i=d;return}else{a[(c[14872]|0)+(117112+((c[14874]|0)*17|0))|0]=87;o=70;break L7}break};case 84:{if((cP()|0)!=0){i=d;return}eR(19672);e4(103,26352,128544);i=d;return};case 59:{if((cP()|0)!=0){i=d;return}eS(24288,(j=i,i=i+8|0,c[j>>2]=c[1257],j)|0);i=j;eR(40720);e4(116,38648,128544);i=d;return};case 87:{o=70;break};case 65:{eR(30856);e4(114,30512,128544);e4(116,38648,128544);i=d;return};case 7:{eR(29792);e4(117,29352,128544);i=d;return};case 8:{eR(29e3);bX(1);i=d;return};case 80:{eR(24104);eR(c[1278]|0);e4(99,23768,128544);i=d;return};case 81:{eR(24104);eR(c[1279]|0);e4(99,23632,128544);i=d;return};case 6:{eR(30152);bW();i=d;return};case 58:{eR(27656);e4(116,38648,128544);e4(111,27408,128544);i=d;return};case 3:{if((cP()|0)!=0){i=d;return}eS(32056,(j=i,i=i+8|0,c[j>>2]=c[1201],j)|0);i=j;e4(112,31616,128544);e4(115,31280,128544);i=d;return};case 68:{if((cP()|0)!=0){i=d;return}eS(24288,(j=i,i=i+8|0,c[j>>2]=c[1266],j)|0);i=j;eR(40720);e4(116,38648,128544);i=d;return};case 15:{if((cP()|0)!=0){i=d;return}eR(25232);i=d;return};case 66:{if((cP()|0)!=0){i=d;return}eS(24288,(j=i,i=i+8|0,c[j>>2]=c[1264],j)|0);i=j;eR(40720);e4(116,38648,128544);i=d;return};case 2:{if((cP()|0)!=0){i=d;return}eR(36376);e2(35528);e4(112,34704,128544);e4(100,34104,128544);e4(105,33584,128544);i=d;return};case 14:{eR(28752);bX(-1);i=d;return};case 9:{if((cP()|0)!=0){i=d;return}eR(28456);e4(100,39640,128544);e4(119,28232,128544);i=d;return};case 5:{eS(32056,(j=i,i=i+8|0,c[j>>2]=c[1203],j)|0);i=j;e4(112,31616,128544);e4(115,31280,128544);i=d;return};case 10:{if((cP()|0)!=0){i=d;return}eR(27960);bY();i=d;return};case 83:{if((cP()|0)!=0){i=d;return}eR(22144);e4(103,26352,128544);i=d;return};case 90:{p=0;o=76;break};case 75:{if((cP()|0)!=0){i=d;return}eR(26680);e4(103,26352,128544);i=d;return};case 92:{if((((ai()|0)%11|0)+1|0)<6){i=d;return}else{e=c[14872]|0;f=c[14874]|0;a[117112+(f*17|0)+e|0]=11;l=e;m=f;n=11;o=47;break L7}break};case 4:{if((cP()|0)!=0){i=d;return}eS(32056,(j=i,i=i+8|0,c[j>>2]=c[1202],j)|0);i=j;e4(115,31280,128544);i=d;return};case 56:{eR(42928);f=b[118288+((c[14874]|0)*34|0)+(c[14872]<<1)>>1]|0;if((c[59344+(f<<2)>>2]|0)!=0){eS(41824,(j=i,i=i+8|0,c[j>>2]=(c[4136+(f<<2)>>2]|0)+1,j)|0);i=j}eR(40720);e4(100,39640,128544);e4(116,38648,128544);i=d;return};case 79:{eR(24104);eR(c[1277]|0);e4(103,26352,128544);i=d;return};case 98:{eR(20736);e4(115,20600,128544);e4(116,38648,128544);i=d;return};case 100:{eR(20336);e4(115,21256,128544);e4(116,38648,128544);i=d;return};case 93:{if((cx(67)|0)==0){de(28,0);i=d;return}else{eR(20072);i=d;return}break};case 89:{o=73;break};case 91:{if((((ai()|0)%17|0)+1|0)<13){i=d;return}else{a[(c[14872]|0)+(117112+((c[14874]|0)*17|0))|0]=90;p=0;o=76;break L7}break};case 96:{eR(21384);e4(115,21256,128544);e4(116,38648,128544);i=d;return};case 99:{eR(21120);e4(101,32424,128544);e4(116,38648,128544);i=d;return};case 97:{eR(20968);e4(101,32424,128544);e4(116,38648,128544);i=d;return};case 18:{i=d;return};case 82:{if((cP()|0)!=0){i=d;return}eR(21824);e4(103,26352,128544);i=d;return};case 85:{if((cP()|0)!=0){i=d;return}eR(21648);e4(103,26352,128544);i=d;return};case 94:{eR(32720);e4(101,32424,128544);e4(116,38648,128544);i=d;return};case 16:{eR(24648);i=d;return};case 17:{if(!((c[32062]|0)==0&(a[127544]|0)==0)){i=d;return}eS(24288,(j=i,i=i+8|0,c[j>>2]=c[1215],j)|0);i=j;e2(35528);e4(111,27408,128544);e4(105,33584,128544);i=d;return};default:{eS(24288,(j=i,i=i+8|0,c[j>>2]=c[4792+(h<<2)>>2],j)|0);i=j;f=b[118288+((c[14874]|0)*34|0)+(c[14872]<<1)>>1]|0;e=f<<16>>16;L64:do{switch(h|0){case 71:case 72:case 73:case 74:case 62:case 61:case 64:case 63:{eR(40720);break};default:{if(f<<16>>16>0){eS(15936,(j=i,i=i+8|0,c[j>>2]=e,j)|0);i=j;break L64}if(f<<16>>16>=0){break L64}eS(15656,(j=i,i=i+8|0,c[j>>2]=e,j)|0);i=j}}}while(0);e4(116,38648,128544);i=d;return}}}while(0);if((o|0)==70){eR(23448);eP();j=((ai()|0)%10|0)+1|0;cG(4,j+(c[26690]|0)|0);eM();i=d;return}else if((o|0)==76){while(1){o=0;if((p|0)>=26){break}if((a[117080+p|0]|0)==68){o=78;break}else{p=p+1|0;o=76}}if((o|0)==78){eR(23016);i=d;return}p=c[26690]|0;if((p|0)==20|(p|0)==15){eR(22752);eP();e0(3e3);de(16,0)}eR(22336);eP();p=ai()|0;cG(17,((p|0)%((c[26690]|0)+5|0)|0)+1|0);e0(2e3);bG((c[26690]|0)+1|0);eX(0,67,0,17);eO();i=d;return}else if((o|0)==47){a[107880+(m*17|0)+l|0]=n;eR(27032);eP();e0(3e3);bR(0);i=d;return}else if((o|0)==73){eR(23264);eP();cG(5,((ai()|0)%5|0)+1|0);o=(c[32016]|0)-1|0;c[32016]=(o|0)<3?3:o;eM();i=d;return}}function cp(d){d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;if((c[32062]|0)!=0){return}e=c[14872]|0;f=c[14874]|0;g=a[117112+(f*17|0)+e|0]|0;h=g<<24>>24;if(g<<24>>24==1){return}eV(f,e);c[11902]=0;switch(h|0){case 56:{e=c[14872]|0;f=c[14874]|0;i=b[118288+(f*34|0)+(e<<1)>>1]|0;if((d|0)==100){a[117112+(f*17|0)+e|0]=1;a[107880+(f*17|0)+e|0]=1;c3(i);return}else if((d|0)==116){if((cI(56,i)|0)!=0){return}i=c[14872]|0;e=c[14874]|0;a[117112+(e*17|0)+i|0]=1;a[107880+(e*17|0)+i|0]=1;return}else{return}break};case 55:{i=c[14872]|0;e=c[14874]|0;f=b[118288+(e*34|0)+(i<<1)>>1]|0;if((d|0)==114){if((c[32044]|0)!=0){return}a[117112+(e*17|0)+i|0]=1;a[107880+(e*17|0)+i|0]=1;dh(f);return}else if((d|0)==116){if((cI(55,f)|0)!=0){return}f=c[14872]|0;i=c[14874]|0;a[117112+(i*17|0)+f|0]=1;a[107880+(i*17|0)+f|0]=1;return}else{return}break};case 2:{bO(d);return};case 57:{if((d|0)==114){if((c[32044]|0)!=0){return}dj(b[118288+((c[14874]|0)*34|0)+(c[14872]<<1)>>1]|0);f=c[14872]|0;i=c[14874]|0;a[117112+(i*17|0)+f|0]=1;a[107880+(i*17|0)+f|0]=1;return}else if((d|0)==116){if((cI(57,b[118288+((c[14874]|0)*34|0)+(c[14872]<<1)>>1]|0)|0)!=0){return}f=c[14872]|0;i=c[14874]|0;a[117112+(i*17|0)+f|0]=1;a[107880+(i*17|0)+f|0]=1;return}else{return}break};case 94:{cm(d);return};case 3:{bQ(0,d);return};case 4:{bQ(1,d);return};case 5:{bS(d);return};case 59:{if((d|0)!=116){return}f=c[14872]|0;i=c[14874]|0;if((cI(a[117112+(i*17|0)+f|0]|0,b[118288+(i*34|0)+(f<<1)>>1]|0)|0)!=0){return}f=c[14872]|0;i=c[14874]|0;a[117112+(i*17|0)+f|0]=1;a[107880+(i*17|0)+f|0]=1;return};case 65:{if((d|0)==114){do{if((((ai()|0)%100|0)+1|0)>90){eR(19480);cG(31,((c[32023]|0)/2|0)+1|0);eP()}else{f=((ai()|0)%100|0)+1|0;if((f+((c[32026]|0)/2|0)|0)>80){j=0;k=0}else{eR(18560);break}while(1){if((c[50936+(k<<2)>>2]|0)==0){e4(k,c[2880+(k<<2)>>2]|0,128544);l=j+1|0}else{l=j}f=k+1|0;if((f|0)<39){j=l;k=f}else{break}}if((l|0)<=0){eR(18800);break}fb(19176);e2(19016);return}}while(0);if((((ai()|0)%100|0)+1|0)<15){eR(18288);l=c[14872]|0;k=c[14874]|0;a[117112+(k*17|0)+l|0]=1;a[107880+(k*17|0)+l|0]=1;c[32102]=0}eM();return}else if((d|0)==116){if((cI(65,0)|0)!=0){return}l=c[14872]|0;k=c[14874]|0;a[117112+(k*17|0)+l|0]=1;a[107880+(k*17|0)+l|0]=1;return}else{return}break};case 68:{if((d|0)!=116){return}l=c[14872]|0;k=c[14874]|0;if((cI(a[117112+(k*17|0)+l|0]|0,b[118288+(k*34|0)+(l<<1)>>1]|0)|0)!=0){return}l=c[14872]|0;k=c[14874]|0;a[117112+(k*17|0)+l|0]=1;a[107880+(k*17|0)+l|0]=1;return};case 66:{if((d|0)!=116){return}l=c[14872]|0;k=c[14874]|0;if((cI(a[117112+(k*17|0)+l|0]|0,b[118288+(k*34|0)+(l<<1)>>1]|0)|0)!=0){return}l=c[14872]|0;k=c[14874]|0;a[117112+(k*17|0)+l|0]=1;a[107880+(k*17|0)+l|0]=1;return};case 7:{bV(1,d);return};case 9:{bT(d);return};case 58:{if((d|0)==111){cn();return}else if((d|0)==116){if((cI(58,b[118288+((c[14874]|0)*34|0)+(c[14872]<<1)>>1]|0)|0)!=0){return}a[(c[14872]|0)+(117112+((c[14874]|0)*17|0))|0]=1;return}else{return}break};case 75:{if((d|0)!=103){return}d4();return};case 77:case 78:{if((d|0)!=103){return}if(g<<24>>24==78){ec();return}else{ee();return}break};case 76:{if((d|0)!=103){return}d1();return};case 13:{bV(-1,d);return};case 17:{if((c[32062]|0)!=0){return}g=c[14874]|0;l=c[14872]|0;if((a[127544]|0)!=0){return}if((d|0)==105|(d|0)==27){c[14874]=c[26696];c[14872]=c[26694];c[26696]=g<<24>>24;c[26694]=l<<24>>24;return}bN(g,l);if((a[(c[14872]|0)+(117112+((c[14874]|0)*17|0))|0]|0)!=17){return}c[14874]=c[26696];c[14872]=c[26694];c[26696]=g<<24>>24;c[26694]=l<<24>>24;return};case 79:{if((d|0)!=103){return}bG(1);c[14874]=33;c[14872]=15;a[117689]=1;a[83962]=0;eX(0,67,0,17);eO();return};case 80:{if((d|0)==105|(d|0)==27){return}if((c[26690]|0)!=0){eR(18088);return}if((cT()|0)>((((c[32091]|0)+(c[32016]|0)|0)*3|0)+45|0)){eR(17864);eP();cG(20,((ai()|0)%20|0)+31|0);eM()}e0(3e3);bG(16);c[14874]=(((ai()|0)%65|0)<<24)+16777216>>24;c[14872]=(((ai()|0)%15|0)<<24)+16777216>>24;cw();eX(0,67,0,17);eO();return};case 81:{if((d|0)==105|(d|0)==27){return}if((cT()|0)>((((c[32016]|0)+(c[32020]|0)+(c[32091]|0)|0)*5|0)+40|0)){eR(17864);eP();cG(20,((ai()|0)%20|0)+16|0);eM();return}e0(3e3);bG(0);l=0;g=0;while(1){if((a[117112+(l*17|0)+g|0]|0)==80){m=82;break}k=l+1|0;if((k|0)<67){l=k;g=g;continue}k=g+1|0;if((k|0)<17){l=0;g=k}else{break}}if((m|0)==82){c[14874]=l<<24>>24;c[14872]=g<<24>>24;cw()}eX(0,67,0,17);eO();return};case 83:{if((d|0)!=103){return}ei();return};case 82:{if((d|0)!=103){return}eq();return};case 85:{if((d|0)!=99){return}eo();return};case 96:{if((d|0)==115){eR(17664);c[32052]=(c[32026]|0)+200+(c[32052]|0);g=((ai()|0)%200|0)+301|0;c[32086]=g+(c[32086]|0);cU(1,-2);cU(2,-2);cU(3,-2);cU(4,-2);cU(0,-2);g=c[14872]|0;l=c[14874]|0;a[117112+(l*17|0)+g|0]=1;a[107880+(l*17|0)+g|0]=1;eM();return}else if((d|0)==116){if((cI(96,0)|0)!=0){return}g=c[14872]|0;l=c[14874]|0;a[117112+(l*17|0)+g|0]=1;a[107880+(l*17|0)+g|0]=1;return}else{return}break};case 99:{if((d|0)==101){eR(17296);g=((ai()|0)%75|0)+26|0;c[32063]=g+(c[32063]|0);g=((ai()|0)%10|0)+31|0;c[32046]=g+(c[32046]|0);cU(2,2);cU(5,2);g=c[14872]|0;l=c[14874]|0;a[117112+(l*17|0)+g|0]=1;a[107880+(l*17|0)+g|0]=1;eM();return}else if((d|0)==116){if((cI(99,0)|0)!=0){return}g=c[14872]|0;l=c[14874]|0;a[117112+(l*17|0)+g|0]=1;a[107880+(l*17|0)+g|0]=1;return}else{return}break};case 97:{if((d|0)==101){eR(17088);g=((ai()|0)%10|0)+31|0;c[32046]=g+(c[32046]|0);cU(2,2);cU(1,2);c[32060]=(c[32060]|0)+1500;c[32054]=(c[32054]|0)+1500;g=0;do{l=0;do{m=a[68960+(l*442|0)+(g*26|0)|0]|0;if(m<<24>>24!=0){b[120568+(l*34|0)+(g<<1)>>1]=b[5684+((m<<24>>24)*24|0)>>1]|0}l=l+1|0;}while((l|0)<67);g=g+1|0;}while((g|0)<17);g=c[14872]|0;l=c[14874]|0;a[117112+(l*17|0)+g|0]=1;a[107880+(l*17|0)+g|0]=1;eM();return}else if((d|0)==116){if((cI(97,0)|0)!=0){return}g=c[14872]|0;l=c[14874]|0;a[117112+(l*17|0)+g|0]=1;a[107880+(l*17|0)+g|0]=1;return}else{return}break};case 98:{if((d|0)==115){eR(16800);g=((ai()|0)%75|0)+26|0;c[32063]=g+(c[32063]|0);cU(1,2);cU(2,2);cU(3,-2);cU(4,-2);g=((ai()|0)%200|0)+301|0;c[32086]=g+(c[32086]|0);g=((ai()|0)%1800|0)+201|0;c[32084]=g+(c[32084]|0);g=c[14872]|0;l=c[14874]|0;a[117112+(l*17|0)+g|0]=1;a[107880+(l*17|0)+g|0]=1;eM();return}else if((d|0)==116){if((cI(98,0)|0)!=0){return}g=c[14872]|0;l=c[14874]|0;a[117112+(l*17|0)+g|0]=1;a[107880+(l*17|0)+g|0]=1;return}else{return}break};case 100:{if((d|0)==115){eR(16600);cU(4,-2);cU(3,-2);cU(5,3);cU(0,33);cU(1,33);cU(2,33);cU(3,33);cU(4,33);cU(5,33);c[32113]=(c[32113]|0)+10;g=c[14872]|0;l=c[14874]|0;a[117112+(l*17|0)+g|0]=1;a[107880+(l*17|0)+g|0]=1;eM();return}else if((d|0)==116){if((cI(100,0)|0)!=0){return}g=c[14872]|0;l=c[14874]|0;a[117112+(l*17|0)+g|0]=1;a[107880+(l*17|0)+g|0]=1;return}else{return}break};case 93:{if((cx(67)|0)==0){de(28,0);return}else{eR(20072);return}break};case 84:{if(!((cP()|0)==0&(d|0)==103)){return}ek();return};case 18:{return};default:{if((d|0)!=116){return}if((cI(h,b[118288+((c[14874]|0)*34|0)+(c[14872]<<1)>>1]|0)|0)!=0){return}h=c[14872]|0;d=c[14874]|0;a[117112+(d*17|0)+h|0]=1;a[107880+(d*17|0)+h|0]=1;return}}}function cq(b){b=b|0;var d=0,e=0,f=0;d=i;e=50936+(b<<2)|0;c[e>>2]=(c[e>>2]|0)+1;e=c[3120+(b<<2)>>2]|0;eS(16376,(f=i,i=i+16|0,c[f>>2]=c[2880+(b<<2)>>2],c[f+8>>2]=e,f)|0);i=f;eR(16144);f=c[14872]|0;e=c[14874]|0;a[117112+(e*17|0)+f|0]=1;a[107880+(e*17|0)+f|0]=1;cu();eM();i=d;return}function cr(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;d=i;i=i+24|0;e=d|0;if((b|0)==0){f=0;i=d;return f|0}g=fj(b|0)|0;if((g|0)>0){h=0;do{j=b+h|0;a[j]=fn(a[j]|0)|0;h=h+1|0;}while((h|0)<(g|0))}g=e|0;h=0;do{fm(g|0,c[46736+(h*76|0)>>2]|0)|0;j=fj(g|0)|0;if((j|0)>0){k=0;do{l=e+k|0;a[l]=fn(a[l]|0)|0;k=k+1|0;}while((k|0)<(j|0))}j=(a_(b|0,g|0)|0)==0;h=(j&1^1)+h|0;m=(h|0)<8;}while(m&(j^1));if(!m){f=0;i=d;return f|0}f=h+97&255;i=d;return f|0}function cs(){var b=0;fl(128064,0,404)|0;fl(127632,0,404)|0;fl(117080,1,26)|0;fl(117024,0,52)|0;fl(59344,0,140)|0;fl(51104,0,112)|0;fl(50936,0,156)|0;c[32026]=1;c[32040]=16;c[32034]=96;c[32079]=-1;c[32036]=-1;c[32038]=-1;b=a[127600]|0;if((b-97&255)>>>0<8>>>0){ct(b<<24>>24)}else{ct(0)}c[14874]=(((ai()|0)%65|0)<<24)+16777216>>24;c[14872]=(((ai()|0)%15|0)<<24)+16777216>>24;c[26696]=0;c[26694]=0;c[31476]=0;c[31924]=-50;cu();return}function ct(d){d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;c[16930]=1;c[32038]=-1;c[32036]=-1;c[32079]=-1;e=d-97|0;c[31896]=e;fm(127608,c[46736+(e*76|0)>>2]|0)|0;f=c[46764+(e*76|0)>>2]|0;c[32031]=f;c[32032]=f;f=c[46768+(e*76|0)>>2]|0;c[32022]=f;c[32023]=f;f=39440+(d*76|0)-72|0;c[32016]=c[f>>2];c[32017]=c[f+4>>2];c[32018]=c[f+8>>2];c[32019]=c[f+12>>2];c[32020]=c[f+16>>2];c[32021]=c[f+20>>2];c[50936+(c[46772+(e*76|0)>>2]<<2)>>2]=1;if((d|0)==102|(d|0)==98){c[50936+(c[46776+(e*76|0)>>2]<<2)>>2]=1}f=c[46780+(e*76|0)>>2]&255;a[117080]=f;if(f<<24>>24==43){c[32076]=1;a[59328]=1}f=c[46792+(e*76|0)>>2]|0;if((e|0)==0){g=((ai()|0)%(f|0)|0)&65535}else{g=f&65535}b[58512]=g;g=c[46784+(e*76|0)>>2]&255;a[117081]=g;if(g<<24>>24==43){c[32076]=1;a[59328]=1}g=c[46796+(e*76|0)>>2]|0;if((d-101|0)>>>0<4>>>0){h=g&65535}else{h=((ai()|0)%(g|0)|0)&65535}b[58513]=h;h=c[46788+(e*76|0)>>2]&255;a[117082]=h;if(h<<24>>24==43){c[32076]=1;a[59328]=1}h=c[46800+(e*76|0)>>2]|0;if((e|0)!=1){i=h&65535;b[58514]=i;j=46804+(e*76|0)|0;k=c[j>>2]|0;c[32036]=k;l=46808+(e*76|0)|0;m=c[l>>2]|0;c[32038]=m;c[16930]=0;return}i=((ai()|0)%(h|0)|0)&65535;b[58514]=i;j=46804+(e*76|0)|0;k=c[j>>2]|0;c[32036]=k;l=46808+(e*76|0)|0;m=c[l>>2]|0;c[32038]=m;c[16930]=0;return}function cu(){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;d=c[32035]|0;c[32029]=d;e=c[32036]|0;L1:do{if((e|0)>-1){switch(a[117080+e|0]|0){case 28:{f=d+3+(b[117024+(e<<1)>>1]|0)|0;c[32029]=f;g=f;break L1;break};case 27:{f=d+5+(b[117024+(e<<1)>>1]|0)|0;c[32029]=f;g=f;break L1;break};case 25:{f=d+6+(b[117024+(e<<1)>>1]|0)|0;c[32029]=f;g=f;break L1;break};case 32:{f=d+2+(b[117024+(e<<1)>>1]|0)|0;c[32029]=f;g=f;break L1;break};case 26:{f=d+2+(b[117024+(e<<1)>>1]|0)|0;c[32029]=f;g=f;break L1;break};case 24:{f=d+9+(b[117024+(e<<1)>>1]|0)|0;c[32029]=f;g=f;break L1;break};case 30:{f=d+10+(b[117024+(e<<1)>>1]|0)|0;c[32029]=f;g=f;break L1;break};case 31:{f=d+12+(b[117024+(e<<1)>>1]|0)|0;c[32029]=f;g=f;break L1;break};case 33:{f=d+15+(b[117024+(e<<1)>>1]|0)|0;c[32029]=f;g=f;break L1;break};case 29:{f=d+7+(b[117024+(e<<1)>>1]|0)|0;c[32029]=f;g=f;break L1;break};default:{g=d;break L1}}}else{g=d}}while(0);d=c[32079]|0;do{if((d|0)>-1){if((a[117080+d|0]|0)!=32){h=g;break}e=(b[117024+(d<<1)>>1]|0)+2+g|0;c[32029]=e;h=e}else{h=g}}while(0);c[32076]=0;g=c[32038]|0;L19:do{if((g|0)<0){c[32028]=0;i=0}else{d=b[117024+(g<<1)>>1]|0;switch(a[117080+g|0]|0){case 39:{e=d+3|0;c[32028]=e;i=e;break L19;break};case 54:{e=d+7|0;c[32028]=e;i=e;break L19;break};case 32:{e=d+8|0;c[32028]=e;i=e;break L19;break};case 69:case 38:{e=d+10|0;c[32028]=e;i=e;break L19;break};case 42:{e=d+14|0;c[32028]=e;i=e;break L19;break};case 40:{e=d+17|0;c[32028]=e;i=e;break L19;break};case 43:{c[32076]=1;e=d+20|0;c[32028]=e;i=e;break L19;break};case 41:case 44:{e=d+22|0;c[32028]=e;i=e;break L19;break};case 37:{e=d+26|0;c[32028]=e;i=e;break L19;break};case 34:{e=d+30|0;c[32028]=e;i=e;break L19;break};case 45:{e=d+30|0;c[32028]=e;i=e;break L19;break};case 36:{e=d+32|0;c[32028]=e;i=e;break L19;break};case 35:{e=d+35|0;c[32028]=e;i=e;break L19;break};default:{c[32028]=0;i=0;break L19}}}}while(0);g=i+(c[32041]|0)|0;c[32028]=g;c[32027]=1;c[32033]=0;i=0;e=h;h=g;g=1;d=0;while(1){switch(a[117080+i|0]|0){case 48:{f=(b[117024+(i<<1)>>1]|0)+1+e|0;c[32029]=f;j=f;k=h;l=g;m=d;break};case 53:{f=(b[117024+(i<<1)>>1]|0)+1+h|0;c[32028]=f;j=e;k=f;l=g;m=d;break};case 54:{f=h+2+(b[117024+(i<<1)>>1]<<1)|0;c[32028]=f;j=e;k=f;l=g;m=d;break};case 47:{f=(b[117024+(i<<1)>>1]|0)+1+g|0;c[32027]=f;j=e;k=h;l=f;m=d;break};case 46:{f=g+5+((b[117024+(i<<1)>>1]|0)*5|0)|0;c[32027]=f;j=e;k=h;l=f;m=d;break};case 49:{f=(b[117024+(i<<1)>>1]|0)+1+d|0;c[32033]=f;j=e;k=h;l=g;m=f;break};default:{j=e;k=h;l=g;m=d}}f=i+1|0;if((f|0)<27){i=f;e=j;h=k;g=l;d=m}else{break}}return}function cv(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;do{if((c[32046]|0)==0){d=b}else{e=c[32026]|0;if((e|0)>=(((ai()|0)%30|0)+1|0)){d=b;break}d=(ai()|0)%9|0}}while(0);b=(a[11e3+d|0]|0)+(c[14874]|0)|0;e=(a[10984+d|0]|0)+(c[14872]|0)|0;if(b>>>0>66>>>0|e>>>0>16>>>0){a[67728]=1;c[11902]=0;f=0;return f|0}d=a[117112+(b*17|0)+e|0]|0;g=a[68960+(b*442|0)+(e*26|0)|0]|0;if(d<<24>>24==18&(c[32090]|0)==0){a[67728]=1;c[11902]=0;f=0;return f|0}if((a[127528]|0)!=0&d<<24>>24==17){a[67728]=1;c[11902]=0;f=0;return f|0}L17:do{if((b|0)==33){if(!((e|0)==16&(c[26690]|0)==1)){h=e;i=33;break}bG(0);j=0;L20:while(1){k=0;while(1){if((k|0)>=17){break}if((a[117112+(j*17|0)+k|0]|0)==79){break L20}else{k=k+1|0}}l=j+1|0;if((l|0)<67){j=l}else{h=k;i=l;break L17}}l=j<<24>>24;c[14874]=l;m=k<<24>>24;c[14872]=m;if((a[117112+(l*17|0)+m|0]|0)==1){if((a[68960+(l*442|0)+(m*26|0)|0]|0)!=0){n=0;o=0;p=0;q=1e4;r=18}}else{n=0;o=0;p=0;q=1e4;r=18}do{if((r|0)==18){while(1){r=0;s=l-p|0;t=Z(s,s)|0;s=0;u=n;v=o;w=q;while(1){do{if((a[117112+(p*17|0)+s|0]|0)==1){if((a[68960+(p*442|0)+(s*26|0)|0]|0)!=0){x=w;y=v;z=u;break}A=m-s|0;B=(Z(A,A)|0)+t|0;A=(B|0)<(w|0);x=A?B:w;y=A?s:v;z=A?p:u}else{x=w;y=v;z=u}}while(0);A=s+1|0;if((A|0)<17){s=A;u=z;v=y;w=x}else{break}}w=p+1|0;if((w|0)<67){n=z;o=y;p=w;q=x;r=18}else{break}}if((x|0)==1e4){eR(28720);break}else{c[14874]=z;c[14872]=y;break}}}while(0);eW();f=0;return f|0}else{h=e;i=b}}while(0);if(g<<24>>24>0){ca(i,h);c[11902]=0;f=0;return f|0}c[26696]=c[14874];c[26694]=c[14872];c[14874]=i<<24>>24;c[14872]=h<<24>>24;switch(d<<24>>24){case 92:case 91:case 88:case 86:case 1:{f=1;return f|0};default:{}}c[11902]=0;f=0;return f|0}function cw(){var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;b=c[14872]|0;d=c[14874]|0;do{if((a[117112+(d*17|0)+b|0]|0)==1){if((a[68960+(d*442|0)+(b*26|0)|0]|0)!=0){e=0;f=0;g=0;h=1e4;break}return}else{e=0;f=0;g=0;h=1e4}}while(0);while(1){i=d-g|0;j=Z(i,i)|0;i=0;k=e;l=f;m=h;while(1){do{if((a[117112+(g*17|0)+i|0]|0)==1){if((a[68960+(g*442|0)+(i*26|0)|0]|0)!=0){n=m;o=l;p=k;break}q=b-i|0;r=(Z(q,q)|0)+j|0;q=(r|0)<(m|0);n=q?r:m;o=q?i:l;p=q?g:k}else{n=m;o=l;p=k}}while(0);q=i+1|0;if((q|0)<17){i=q;k=p;l=o;m=n}else{break}}m=g+1|0;if((m|0)<67){e=p;f=o;g=m;h=n}else{break}}if((n|0)==1e4){eR(28720);return}else{c[14874]=p;c[14872]=o;return}}function cx(b){b=b|0;var c=0,d=0;c=0;d=0;do{d=(a[117080+c|0]|0)==(b|0)?1:d;c=c+1|0;}while((c|0)<26);return d|0}function cy(){var a=0;a=c[32026]|0;if((a|0)>=100){return}cz((c[3440+(a<<2)>>2]|0)-(c[32025]|0)|0);return}function cz(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;d=i;e=c[32026]|0;f=(c[32025]|0)+b|0;c[32025]=f;if(!((f|0)>=(c[3440+(e<<2)>>2]|0)&(e|0)<100)){eO();i=d;return}f=e;b=c[32069]|0;do{g=(c[32019]|0)-b>>1;c[32026]=f+1;h=(ai()|0)%3|0;j=ai()|0;k=h+2+((j|0)%(((g|0)<1?1:g)|0)|0)|0;c[32022]=(c[32022]|0)+k;c[32023]=(c[32023]|0)+k;k=(ai()|0)%3|0;c[32031]=(c[32031]|0)+k;c[32032]=(c[32032]|0)+k;f=c[32026]|0;b=c[32069]|0;if((f|0)<(7-b|0)){k=c[32019]>>2;c[32022]=(c[32022]|0)+k;c[32023]=(c[32023]|0)+k}}while((c[32025]|0)>=(c[3440+(f<<2)>>2]|0)&(f|0)<100);if((f|0)==(e|0)){eO();i=d;return}eP();eS(30488,(e=i,i=i+8|0,c[e>>2]=c[32026],e)|0);i=e;switch(c[32026]|0){case 96:{c[32066]=99999;eO();i=d;return};case 95:{c[32050]=99999;eO();i=d;return};case 97:{c[32051]=99999;eO();i=d;return};case 98:{c[32052]=99999;eO();i=d;return};case 99:{c[32080]=99999;c[32077]=99999;eO();i=d;return};case 100:{eR(30120);e=0;while(1){f=0;do{a[107880+(f*17|0)+e|0]=a[117112+(f*17|0)+e|0]|0;f=f+1|0;}while((f|0)<67);f=e+1|0;if((f|0)<17){e=f}else{l=0;break}}do{c[50936+(l<<2)>>2]=1;l=l+1|0;}while((l|0)<39);c[12776]=1;c[12777]=1;c[12778]=1;c[12779]=1;c[12780]=1;c[12781]=1;c[12782]=1;c[12783]=1;c[12784]=1;c[12785]=1;c[12786]=1;c[12787]=1;c[12788]=1;c[12789]=1;c[12790]=1;c[12791]=1;c[12792]=1;c[12793]=1;c[12794]=1;c[12795]=1;c[12796]=1;c[12797]=1;c[12798]=1;c[12799]=1;c[12800]=1;c[12801]=1;c[12802]=1;c[12803]=1;l=0;do{c[59344+(l<<2)>>2]=1;l=l+1|0;}while((l|0)<35);eO();i=d;return};case 94:{c[32090]=99999;eO();i=d;return};default:{eO();i=d;return}}}function cA(){var a=0;a=c[32026]|0;if((a|0)<=1){return}cB((c[32025]|0)+1-(c[3440+(a-1<<2)>>2]|0)|0);return}function cB(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;b=i;d=c[32026]|0;e=(c[32025]|0)-a|0;a=(e|0)<0?0:e;c[32025]=a;e=d-1|0;if((a|0)<(c[3440+(e<<2)>>2]|0)){a=e;while(1){c[32026]=(a|0)>1?a:1;e=(c[32019]|0)-(c[32069]|0)>>1;f=ai()|0;g=((f|0)%(((e|0)<1?1:e)|0)|0)+1|0;e=(c[32023]|0)-g|0;f=(e|0)<1?1:e;c[32023]=f;e=(c[32022]|0)-g|0;g=(e|0)<1?1:e;c[32022]=g;if((c[32026]|0)<(7-(c[32069]|0)|0)){e=c[32019]>>2;h=f-e|0;c[32023]=(h|0)<1?1:h;h=g-e|0;c[32022]=(h|0)<1?1:h}h=(ai()|0)%3|0;e=(c[32031]|0)-h|0;c[32031]=(e|0)<0?0:e;e=(c[32032]|0)-h|0;c[32032]=(e|0)<0?0:e;e=c[32026]|0;h=e-1|0;if((c[32025]|0)<(c[3440+(h<<2)>>2]|0)){a=h}else{j=e;break}}}else{j=d}if((d|0)==(j|0)){cu();eM();i=b;return}eS(29760,(d=i,i=i+8|0,c[d>>2]=j,d)|0);i=d;cu();eM();i=b;return}function cC(a){a=a|0;c[32022]=(c[32022]|0)+a;c[32023]=(c[32023]|0)+a;return}function cD(a){a=a|0;c[32031]=(c[32031]|0)+a;c[32032]=(c[32032]|0)+a;return}function cE(a){a=a|0;var b=0;b=(c[32023]|0)-a|0;c[32023]=(b|0)<1?1:b;b=(c[32022]|0)-a|0;c[32022]=(b|0)<1?1:b;return}function cF(a){a=a|0;var b=0;b=(c[32031]|0)-a|0;c[32031]=(b|0)<0?0:b;b=(c[32032]|0)-a|0;c[32032]=(b|0)<0?0:b;return}function cG(a,b){a=a|0;b=b|0;var d=0;d=(c[32023]|0)-b|0;c[32023]=d;if((d|0)>=1){return}eP();eR(29328);eR(128560);e0(3e3);d=c[26708]|0;de((d|a|0)==0?24:a,d);return}function cH(a){a=a|0;var b=0;b=(c[32023]|0)+a|0;c[32023]=b;a=c[32022]|0;if((b|0)<=(a|0)){return}c[32023]=a;return}function cI(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=0;L1:while(1){g=117080+f|0;h=f+1|0;do{if((a[g]|0)==1){i=h;while(1){j=117080+i|0;k=a[j]|0;if(k<<24>>24!=1){break}l=i+1|0;if((l|0)==26){break L1}else{i=l}}a[g]=k;b[117024+(f<<1)>>1]=b[117024+(i<<1)>>1]|0;a[j]=1;if((c[32038]|0)==(i|0)){c[32038]=f}if((c[32036]|0)==(i|0)){c[32036]=f}if((c[32079]|0)!=(i|0)){break}c[32079]=f}}while(0);if((h|0)<25){f=h}else{break}}f=(c[32026]>>1)+15|0;j=(f|0)>26?26:f;do{if((j|0)>0){f=0;do{m=(a[117080+f|0]|0)==1?f:-1;f=f+1|0;n=(m|0)==-1;}while((f|0)<(j|0)&n);if(n){break}a[117080+m|0]=d;f=e&65535;b[117024+(m<<1)>>1]=f;switch(d|0){case 48:case 53:case 54:{o=0;p=1;break};case 50:{c[32020]=(f<<16>>16)+1+(c[32020]|0);o=0;p=1;break};case 51:{c[32091]=(f<<16>>16)+1+(c[32091]|0);o=0;p=1;break};case 52:{c[32017]=(f<<16>>16)+1+(c[32017]|0);o=0;p=1;break};case 35:{c[32020]=(c[32020]|0)+10;c[32091]=(c[32091]|0)+10;f=c[32017]|0;c[32114]=f;h=f-10|0;c[32017]=(h|0)<3?3:h;o=0;p=1;break};case 59:{c[32094]=(c[32094]|0)+1;c[32060]=(c[32060]|0)+1;o=0;p=0;break};case 61:{c[32057]=(c[32057]|0)+1;o=0;p=0;break};case 62:{c[32058]=(c[32058]|0)+1;o=0;p=0;break};case 63:{c[32064]=(c[32064]|0)+1;o=0;p=0;break};case 64:{c[32068]=(c[32068]|0)+1;o=0;p=0;break};case 34:{c[32020]=(c[32020]|0)+5;o=0;p=1;break};case 45:{c[32017]=(c[32017]|0)+10;o=0;p=1;break};case 69:{c[32018]=(c[32018]|0)+10;o=0;p=1;break};case 23:{c[32053]=1;o=1;p=0;break};default:{o=0;p=0}}eR(28416);dm(m);if(p){cu();eM()}if((c[32044]|0)!=0|(o|0)==0){q=0;return q|0}eR(28192);e0(2e3);eW();eR(27904);q=0;return q|0}}while(0);eR(27624);q=1;return q|0}function cJ(d){d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;e=i;if(d>>>0>25>>>0){f=0;i=e;return f|0}g=117080+d|0;h=a[g]|0;j=h<<24>>24;if(h<<24>>24==1){eS(27376,(k=i,i=i+8|0,c[k>>2]=d+97,k)|0);i=k;f=1;i=e;return f|0}l=c[14872]|0;m=c[14874]|0;n=117112+(m*17|0)+l|0;o=a[n]|0;do{if(o<<24>>24==6){p=1}else{if(o<<24>>24<=1){p=0;break}eP();eR(27e3);f=1;i=e;return f|0}}while(0);if((l|0)==16&(m|0)==33){f=1;i=e;return f|0}o=(p|0)!=0;if(!o){a[n]=h;b[118288+(m*34|0)+(l<<1)>>1]=b[117024+(d<<1)>>1]|0}eR(26664);dm(d);a[g]=1;if((c[32038]|0)==(d|0)){c[32038]=-1}if((c[32036]|0)==(d|0)){c[32036]=-1}if((c[32079]|0)==(d|0)){c[32079]=-1}cK(j,b[117024+(d<<1)>>1]|0);cu();eM();if(o){eS(26320,(k=i,i=i+1|0,i=i+7&-8,c[k>>2]=0,k)|0);i=k}a[127544]=1;f=0;i=e;return f|0}function cK(a,b){a=a|0;b=b|0;var d=0;L1:do{switch(a|0){case 35:{c[32020]=(c[32020]|0)-10;c[32091]=(c[32091]|0)-10;c[32017]=c[32114];d=1;break};case 61:{c[32057]=(c[32057]|0)-1;d=0;break};case 51:{c[32091]=(c[32091]|0)+~b;d=1;break};case 69:{c[32018]=(c[32018]|0)-10;d=1;break};case 59:{c[32094]=(c[32094]|0)-1;c[32060]=(c[32060]|0)-1;d=0;break};case 52:{c[32017]=(c[32017]|0)+~b;d=1;break};case 62:{c[32058]=(c[32058]|0)-1;d=0;break};case 34:{c[32020]=(c[32020]|0)-5;d=1;break};case 63:{c[32064]=(c[32064]|0)-1;d=0;break};case 64:{c[32068]=(c[32068]|0)-1;d=0;break};case 43:{c[32076]=0;d=0;break};case 23:{c[32053]=0;if((c[32044]|0)!=0){d=0;break L1}eR(28192);e0(2e3);eW();eR(24048);d=0;break};case 56:case 55:{d=0;break};case 45:{c[32017]=(c[32017]|0)-10;d=1;break};case 50:{c[32020]=(c[32020]|0)+~b;d=1;break};default:{d=1}}}while(0);if((c[32016]|0)<3){c[32016]=3}if((c[32017]|0)<3){c[32017]=3}if((c[32018]|0)<3){c[32018]=3}if((c[32019]|0)<3){c[32019]=3}if((c[32020]|0)<3){c[32020]=3}if((c[32021]|0)<3){c[32021]=3}if((d|0)==0){return}cu();eO();return}function cL(d,f){d=d|0;f=f|0;var g=0;g=117024+(d<<1)|0;b[g>>1]=(e[g>>1]|0)+f;switch(a[117080+d|0]|0){case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:case 32:case 33:{cu();eM();return};case 48:{cu();eM();return};case 50:{c[32020]=(c[32020]|0)+f;cu();eM();return};case 46:{cu();return};case 51:{c[32091]=(c[32091]|0)+f;cu();eM();return};case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 45:case 54:{cu();eM();return};case 49:{cu();return};case 53:{cu();eM();return};case 52:{c[32017]=(c[32017]|0)+f;cu();eM();return};case 47:{cu();return};default:{return}}}function cM(d){d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;if((c[32079]&c[32036]|0)<0){eP();eR(25976);i=e;return}f=((ai()|0)%100|0|0)<50;g=f?63:20;h=c[128064+(g<<2)>>2]|0;if((h|0)<0){j=f?20:63;k=j;l=c[128064+(j<<2)>>2]|0}else{k=g;l=h}h=128064+(k<<2)|0;do{if((b[117024+(l<<1)>>1]|0)>8){if((d|0)==1){eS(25720,(m=i,i=i+8|0,c[m>>2]=c[4792+(a[117080+l|0]<<2)>>2],m)|0);i=m;break}if((((ai()|0)%10|0)+1|0)>=10){break}eS(25400,(m=i,i=i+8|0,c[m>>2]=c[4792+(a[117080+(c[h>>2]|0)|0]<<2)>>2],m)|0);i=m;k=c[h>>2]|0;cK(a[117080+k|0]|0,b[117024+(k<<1)>>1]|0);k=c[h>>2]|0;a[117080+k|0]=1;b[117024+(k<<1)>>1]=0;c[h>>2]=-1;cu()}else{eS(25200,(m=i,i=i+8|0,c[m>>2]=c[4792+(a[117080+l|0]<<2)>>2],m)|0);i=m;cL(c[h>>2]|0,1)}}while(0);eM();i=e;return}function cN(d){d=d|0;var e=0,f=0,g=0;e=c[32038]|0;if((e|0)<0){eP();eR(25024);return}f=117080+e|0;L5:do{if(((a[f]|0)-55&255)>>>0>1>>>0){g=117024+(e<<1)|0;do{if((b[g>>1]|0)>8){if((((ai()|0)%10|0)+1|0)>=10){break}if((d|0)==1){eR(24800);break L5}else{eR(24592);cK(a[f]|0,b[g>>1]|0);a[f]=1;b[g>>1]=0;c[32038]=-1;cu();break L5}}}while(0);eR(24256);cL(e,1)}}while(0);eM();return}function cO(){var b=0,d=0,e=0,f=0;b=(c[32026]>>1)+15|0;d=(b|0)>26?26:b;b=0;while(1){if((b|0)>=(d|0)){e=1;f=6;break}if((a[117080+b|0]|0)==1){e=0;f=5;break}else{b=b+1|0}}if((f|0)==5){return e|0}else if((f|0)==6){return e|0}return 0}function cP(){var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;b=c[14874]|0;d=b-1|0;e=b+1|0;b=c[14872]|0;f=b-1|0;g=b+1|0;b=(d|0)<0?0:d;d=(e|0)>66?66:e;e=(f|0)<0?0:f;f=(g|0)>16?16:g;if((b|0)>(d|0)){h=0;return h|0}else{i=b}L3:while(1){b=e;while(1){if((b|0)>(f|0)){break}if((a[68960+(i*442|0)+(b*26|0)|0]|0)==0){b=b+1|0}else{h=1;j=7;break L3}}b=i+1|0;if((b|0)>(d|0)){h=0;j=9;break}else{i=b}}if((j|0)==9){return h|0}else if((j|0)==7){return h|0}return 0}function cQ(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0;f=68960+(d*442|0)+(e*26|0)+1|0;if((a[f]|0)>5){g=0;return g|0}else{h=100}while(1){if((h|0)==0){g=0;i=8;break}j=(ai()|0)%26|0;k=117080+j|0;if((a[k]|0)==1|(c[32036]|0)==(j|0)|(c[32038]|0)==(j|0)|(c[32079]|0)==(j|0)){h=h-1|0}else{break}}if((i|0)==8){return g|0}dm(j);i=117024+(j<<1)|0;cK(a[k]|0,b[i>>1]|0);j=a[f]|0;a[f]=j+1;f=j<<24>>24;a[68960+(d*442|0)+(e*26|0)+2+(f<<2)|0]=a[k]|0;b[68960+(d*442|0)+(e*26|0)+2+(f<<2)+2>>1]=b[i>>1]|0;a[k]=1;b[i>>1]=0;i=128488+(c[26690]|0)|0;a[i]=(a[i]|0)+1;g=1;return g|0}function cR(){var b=0,d=0,e=0,f=0,g=0,h=0;b=c[32038]|0;d=c[32036]|0;e=c[32079]|0;f=0;while(1){if((f|0)>=26){g=1;h=5;break}if((a[117080+f|0]|0)==1|(f|0)==(b|0)|(f|0)==(d|0)|(f|0)==(e|0)){f=f+1|0}else{g=0;h=6;break}}if((h|0)==6){return g|0}else if((h|0)==5){return g|0}return 0}function cS(){var a=0,b=0,d=0,e=0;a=(ai()|0)%4|0;if((a|0)==0){b=50;d=71}else if((a|0)==2){b=30;d=73}else if((a|0)==1){b=40;d=72}else{b=20;d=74}a=c[14874]|0;e=c[14872]|0;bA(a,e,d,((ai()|0)%(b|0)|0)+1+((b>>>0)/10|0)|0);return}function cT(){var d=0,e=0,f=0,g=0,h=0,i=0,j=0;d=c[32024]|0;e=25;while(1){if((a[117080+e|0]|0)==1&(e|0)>0){e=e-1|0}else{break}}f=(d|0)/1e3|0;if((e|0)<0){g=f;return g|0}else{h=0;i=f}while(1){switch(a[117080+h|0]|0){case 31:case 30:{j=i+40|0;break};case 41:case 69:case 36:case 27:case 42:{j=i+20|0;break};case 35:{j=i+30|0;break};case 24:{j=i+35|0;break};case 33:case 34:case 43:case 45:case 28:{j=i+15|0;break};case 29:{j=i+26|0;break};case 25:case 40:case 37:{j=i+23|0;break};case 26:case 38:{j=i+8|0;break};case 61:case 59:case 54:{j=i+4|0;break};case 32:{j=i+7|0;break};case 58:{j=i+30+(b[117024+(h<<1)>>1]|0)|0;break};case 1:{j=i;break};default:{j=i+1|0}}f=h+1|0;if((f|0)>(e|0)){g=j;break}else{h=f;i=j}}return g|0}function cU(a,b){a=a|0;b=b|0;var d=0;if(a>>>0>5>>>0){return}d=128064+(a<<2)|0;a=(c[d>>2]|0)+b|0;c[d>>2]=a;if((a|0)>=3){return}c[d>>2]=3;return}function cV(){var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;b=c[32062]|0;if((b|0)!=0){d=b-1|0;c[32062]=d;if((d|0)>=1){return}cu();eO();return}do{if((c[32052]|0)==0){c[31476]=(c[31476]|0)+1}else{d=(c[34276]|0)+1|0;c[34276]=d;if((d|0)!=2){break}c[31476]=(c[31476]|0)+1;c[34276]=0}}while(0);d=c[32023]|0;b=c[32022]|0;do{if((d|0)==(b|0)){e=0}else{f=(c[32040]|0)-1|0;c[32040]=f;if((f|0)>=0){e=0;break}c[32040]=(c[32069]<<1)+22-(c[32026]|0);f=d+(c[32027]|0)|0;c[32023]=f;if((f|0)<=(b|0)){e=1;break}c[32023]=b;e=1}}while(0);b=c[32032]|0;do{if((b|0)<(c[32031]|0)){d=(c[32034]|0)-1|0;c[32034]=d;if((d|0)>=0){g=0;h=e;break}c[32034]=((c[32069]|0)-(c[32026]|0)-(c[32033]|0)<<2)+100;c[32032]=b+1;g=0;h=1}else{g=0;h=e}}while(0);while(1){e=c[152+(g<<2)>>2]|0;b=128064+(e<<2)|0;d=c[b>>2]|0;L23:do{if((d|0)==0){i=h}else{f=d-1|0;c[b>>2]=f;if((g|0)==13&(c[32094]|0)!=0){c[32060]=(c[32060]|0)+1;j=c[b>>2]|0}else{j=f}if((j|0)!=0){i=h;break}switch(e|0){case 32:{f=(c[32016]|0)-10|0;if((f|0)<3){k=3}else{k=f}c[32016]=k;f=(c[32017]|0)-10|0;if((f|0)<3){l=3}else{l=f}c[32017]=l;f=(c[32018]|0)-10|0;if((f|0)<3){m=3}else{m=f}c[32018]=m;f=(c[32019]|0)-10|0;if((f|0)<3){n=3}else{n=f}c[32019]=n;f=(c[32020]|0)-10|0;if((f|0)<3){o=3}else{o=f}c[32020]=o;f=(c[32021]|0)-10|0;if((f|0)<3){p=3}else{p=f}c[32021]=p;i=h|1;break L23;break};case 97:{f=(c[32016]|0)-34|0;if((f|0)<3){q=3}else{q=f}c[32016]=q;f=(c[32017]|0)-34|0;if((f|0)<3){r=3}else{r=f}c[32017]=r;f=(c[32018]|0)-34|0;if((f|0)<3){s=3}else{s=f}c[32018]=s;f=(c[32019]|0)-34|0;if((f|0)<3){t=3}else{t=f}c[32019]=t;f=(c[32020]|0)-34|0;if((f|0)<3){u=3}else{u=f}c[32020]=u;f=(c[32021]|0)-34|0;if((f|0)<3){v=3}else{v=f}c[32021]=v;i=h|1;break L23;break};case 31:{c[32035]=(c[32035]|0)-3;i=h|3;break L23;break};case 21:{c[32035]=(c[32035]|0)-2;i=h|3;break L23;break};case 26:{f=c[32020]|0;c[32020]=(f|0)<0?3:f+3|0;i=h|3;break L23;break};case 27:{c[32091]=(c[32091]|0)-3;i=h|3;break L23;break};case 28:{eR(23744);eP();i=h;break L23;break};case 30:{eR(23608);eP();i=h;break L23;break};case 49:{c[32091]=(c[32091]|0)-20;i=h|3;break L23;break};case 39:{c[32035]=(c[32035]|0)-10;i=h|1;break L23;break};case 70:{eR(23424);eP();i=h;break L23;break};case 71:{f=0;w=0;do{w=(a[117080+f|0]|0)==60?1:w;f=f+1|0;}while((f|0)<26);if((w|0)==0){i=h;break L23}c[32087]=(c[32087]|0)+1;i=h;break L23;break};case 65:{eR(23208);eP();i=h;break L23;break};case 68:{eR(22984);eP();i=h;break L23;break};case 33:{i=h|3;break L23;break};case 34:case 35:case 74:case 36:case 43:case 64:case 45:case 50:case 61:case 62:{i=h|2;break L23;break};default:{i=h;break L23}}}}while(0);e=g+1|0;if((e|0)<28){g=e;h=i}else{break}}do{if((c[32081]|0)==0){x=i}else{if(!((c[32036]|0)!=-1|(c[32079]|0)!=-1)){x=i;break}if((((ai()|0)%100|0)+1|0)>=50){x=i;break}c[32036]=-1;c[32079]=-1;eR(22688);eP();cu();x=i|1}}while(0);do{if((c[32084]|0)!=0&(c[32038]|0)!=-1){if((a[(c[14872]|0)+(117112+((c[14874]|0)*17|0))|0]|0)!=1){break}if((((ai()|0)%100|0)+1|0)>=33){break}cJ(c[32038]|0)|0}}while(0);if((x|0)==1){eM();return}else if((x|0)==2){eN();return}else if((x|0)==3){eO();return}else{return}}function cW(){if((c[32044]|0)!=0){c[32044]=1}if((c[32046]|0)!=0){c[32046]=1}if((c[32054]|0)!=0){c[32054]=1}if((c[32063]|0)!=0){c[32063]=1}if((c[32081]|0)!=0){c[32081]=1}if((c[32082]|0)!=0){c[32082]=1}if((c[32083]|0)!=0){c[32083]=1}if((c[32084]|0)!=0){c[32084]=1}if((c[32085]|0)!=0){c[32085]=1}if((c[32086]|0)==0){return}c[32086]=1;return}function cX(a){a=a|0;var b=0,d=0,e=0,f=0;b=0;do{d=128064+(c[152+(b<<2)>>2]<<2)|0;e=c[d>>2]|0;do{if((e|0)!=0){f=e-a|0;c[d>>2]=f;if((f|0)>=1){break}c[d>>2]=1}}while(0);b=b+1|0;}while((b|0)<28);cV();return}function cY(a){a=a|0;c7(a,127608,20);c7(a,3848,1);c7(a,59328,1);c7(a,47648,1);c7(a,127592,1);c7(a,59496,4);c7(a,59488,4);c7(a,118280,4);c7(a,125904,4);c7(a,59704,4);c7(a,128064,404);c7(a,117080,26);c7(a,117024,52);c7(a,59344,140);c7(a,51104,112);c7(a,50936,156);return}function cZ(b){b=b|0;var d=0;c8(b,127608,20);c8(b,3848,1);c8(b,59328,1);c8(b,47648,1);c8(b,127592,1);c8(b,59496,4);c8(b,59488,4);c8(b,118280,4);c8(b,125904,4);c8(b,59704,4);c8(b,128064,404);c8(b,117080,26);c8(b,117024,52);c8(b,59344,140);c8(b,51104,112);c8(b,50936,156);b=cr(127608)|0;d=b<<24>>24;c[31896]=d;if(b<<24>>24==0){a[127608]=a[21112]|0;a[127609]=a[21113]|0;a[127610]=a[21114]|0;a[127611]=a[21115]|0;a[127612]=a[21116]|0;return}else{c[31896]=d-97;return}}function c_(){fb(22320);e2(22128);e4(1,21816,128560);e4(0,21640,128560);return}function c$(){fb(21352);e2(21240);e4(97,21112,20872);e4(98,20728,20560);e4(99,20328,20024);e4(100,19664,19440);e4(101,19168,18968);e4(102,18784,18496);e4(103,18280,18040);e4(104,17856,17616);return}function c0(b){b=b|0;a[3848]=b;c$();return}function c1(){return c[31476]|0}function c2(){return a[4088+((ai()|0)%41|0)|0]|0}function c3(b){b=b|0;var d=0,e=0,f=0,g=0;d=i;if(b>>>0>34>>>0){i=d;return}e=59344+(b<<2)|0;if((c[e>>2]|0)==0){c[e>>2]=1}eS(32336,(e=i,i=i+8|0,c[e>>2]=(c[4136+(b<<2)>>2]|0)+1,e)|0);i=e;L7:do{switch(b|0){case 0:{eR(31984);e=((ai()|0)%11|0)+3-(c[32019]>>2)-1|0;if((e|0)>0){f=e;do{ci();e0(1e3);f=f-1|0;}while((f|0)>0)}eR(31576);i=d;return};case 1:{eR(31160);if((c[32023]|0)==(c[32022]|0)){cC(1);break L7}f=((ai()|0)%20|0)+21|0;e=f+(c[32026]|0)+(c[32023]|0)|0;c[32023]=e;f=c[32022]|0;if((e|0)<=(f|0)){break L7}c[32023]=f;break};case 2:{eR(30800);cy();cC(1);break};case 3:{eR(30456);f=128064+(((ai()|0)%6|0)<<2)|0;c[f>>2]=(c[f>>2]|0)+1;break};case 4:{eR(30088);f=((ai()|0)%2|0)+1|0;c[32018]=f+(c[32018]|0);break};case 5:{eR(29656);f=c[32016]|0;if((f|0)<12){c[32016]=12;break L7}else{c[32016]=f+1;break L7}break};case 6:{eR(29304);c[32021]=(c[32021]|0)+1;break};case 7:{eR(28976);f=(c[32016]|0)-1|0;c[32016]=f;if((f|0)>=3){break L7}c[32016]=3;break};case 8:{eR(28696);c[32017]=(c[32017]|0)+1;break};case 9:{eR(28392);e0(2e3);f=0;do{e=0;do{g=a[117112+(e*17|0)+f|0]|0;if((g<<24>>24|0)==19|(g<<24>>24|0)==22){eT(e,f)}e=e+1|0;}while((e|0)<67);f=f+1|0;}while((f|0)<17);eU();i=d;return};case 10:{f=0;do{e=0;do{if((a[68960+(e*442|0)+(f*26|0)|0]|0)!=0){eT(e,f)}e=e+1|0;}while((e|0)<67);f=f+1|0;}while((f|0)<17);i=d;return};case 11:{eR(28160);f=0;do{e=0;do{a[107880+(e*17|0)+f|0]=0;e=e+1|0;}while((e|0)<67);f=f+1|0;}while((f|0)<17);e0(2e3);eX(0,67,0,17);i=d;return};case 13:{eR(27864);c[32044]=(c[32044]|0)+250;eU();i=d;return};case 14:{eR(27600);f=((ai()|0)%9|0)+21|0;c[32046]=f+(c[32046]|0);i=d;return};case 15:{eR(27344);f=c[32048]|0;if((f|0)==0){c[32016]=(c[32016]|0)+11;c[32017]=(c[32017]|0)+11;c[32018]=(c[32018]|0)+11;c[32019]=(c[32019]|0)+11;c[32020]=(c[32020]|0)+11;c[32021]=(c[32021]|0)+11}c[32048]=f+250;break};case 16:{eR(26976);c[32019]=(c[32019]|0)+1;break};case 17:{eR(26600);f=c[32065]|0;if((f|0)==0){c[32091]=(c[32091]|0)+21}c[32065]=f+700;break};case 18:{eR(26280);c[32066]=(c[32066]|0)+1e3;break};case 19:{eR(28392);e0(2e3);f=0;do{e=0;do{g=a[117112+(e*17|0)+f|0]|0;if((g-71&255)>>>0<3>>>0|g<<24>>24==22|g<<24>>24==74|g<<24>>24==23|g<<24>>24==19){eT(e,f)}e=e+1|0;}while((e|0)<67);f=f+1|0;}while((f|0)<17);eU();i=d;return};case 20:{c[32023]=c[32022];cW();break};case 21:{eR(25944);i=d;return};case 22:{eR(25680);f=((ai()|0)%200|0)+201|0;c[32086]=f+(c[32086]|0);i=d;return};case 23:{eR(25368);f=((ai()|0)%1e3|0)+401|0;c[32087]=f+(c[32087]|0);a[5623]=73;i=d;return};case 12:{i=d;return};default:{}}}while(0);eO();i=d;return}function c4(){var a=0;c[16930]=1;bD();ef();a=b1()|0;c[34278]=0;cY(a);bK(a)|0;es(a);cj(a);d_(a);c7(a,137112,4);c[16930]=0;return a|0}function c5(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;d=i;i=i+8|0;e=d|0;f=b3(b)|0;c[34278]=0;cZ(f);bL(f)|0;et(f);ck(f);d$(f);b=c[34278]|0;c8(f,e,4);if((c[e>>2]|0)!=(b|0)&(a[127592]|0)==0){eR(24976);eR(22632);eR(20496);a[127592]=1;e0(4e3)}b5(f);c[26696]=0;c[26694]=0;f=c[32016]|0;b=a[47648]|0;if((f|0)>300&b<<24>>24==0){eR(15744);eR(36120);eR(31184);eR(27888);e0(5e3);a[127592]=1;c[32030]=0;c[32024]=0;de(12,0);g=a[47648]|0}else{g=b}b=c[32017]|0;if((b|0)>300&g<<24>>24==0){eR(15744);eR(36120);eR(31184);eR(27888);e0(5e3);a[127592]=1;c[32030]=0;c[32024]=0;de(12,0);h=a[47648]|0}else{h=g}g=c[32018]|0;if((g|0)>300&h<<24>>24==0){eR(15744);eR(36120);eR(31184);eR(27888);e0(5e3);a[127592]=1;c[32030]=0;c[32024]=0;de(12,0);j=a[47648]|0}else{j=h}h=c[32019]|0;if((h|0)>300&j<<24>>24==0){eR(15744);eR(36120);eR(31184);eR(27888);e0(5e3);a[127592]=1;c[32030]=0;c[32024]=0;de(12,0);k=a[47648]|0}else{k=j}j=c[32020]|0;if((j|0)>300&k<<24>>24==0){eR(15744);eR(36120);eR(31184);eR(27888);e0(5e3);a[127592]=1;c[32030]=0;c[32024]=0;de(12,0);l=a[47648]|0}else{l=k}if((j+(h+(g+(b+f)))|0)>600&l<<24>>24==0){eR(15744);eR(36120);eR(31184);eR(27888);e0(5e3);a[127592]=1;c[32030]=0;c[32024]=0;de(12,0);m=a[47648]|0}else{m=l}if(((c[32022]|0)>999|(c[32031]|0)>125)&m<<24>>24==0){eR(15744);eR(36120);eR(31184);eR(27888);e0(5e3);a[127592]=1;c[32030]=0;c[32024]=0;de(12,0)}if((c[32026]|0)!=25){bE();i=d;return}m=c[32025]|0;l=c[884]|0;if((m|0)<=(l|0)){bE();i=d;return}c[32025]=l;cz(m-l|0);bE();i=d;return}function c6(a,b){a=a|0;b=b|0;var c=0,e=0,f=0,g=0,h=0,i=0;if((b|0)>0){c=0;e=a;f=0}else{g=0;return g|0}while(1){a=f+1|0;h=c>>>1;i=(d[e]|0)+((c&1|0)==0?h:h|32768)&65535;if((a|0)<(b|0)){c=i;e=e+1|0;f=a}else{g=i;break}}return g|0}function c7(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0;c[32118]=(c[32118]|0)+1;b2(a,b,e);c[12440]=(c[12440]|0)+e;if((e|0)>0){f=0;g=b;h=0}else{i=0;j=c[34278]|0;k=j+i|0;c[34278]=k;return}while(1){b=h+1|0;a=f>>>1;l=((f&1|0)==0?a:a|32768)+(d[g]|0)&65535;if((b|0)<(e|0)){f=l;g=g+1|0;h=b}else{i=l;break}}j=c[34278]|0;k=j+i|0;c[34278]=k;return}function c8(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0;c[32120]=(c[32120]|0)+1;b4(a,b,e);c[14834]=(c[14834]|0)+e;if((e|0)>0){f=0;g=b;h=0}else{i=0;j=c[34278]|0;k=j+i|0;c[34278]=k;return}while(1){b=h+1|0;a=f>>>1;l=((f&1|0)==0?a:a|32768)+(d[g]|0)&65535;if((b|0)<(e|0)){f=l;g=g+1|0;h=b}else{i=l;break}}j=c[34278]|0;k=j+i|0;c[34278]=k;return}function c9(){fm(125928,59504)|0;a[59504]=0;return 125928}function da(){var a=0,d=0;a=0;do{c[47664+(a*84|0)>>2]=0;c[47656+(a*84|0)>>2]=0;b[47672+(a*84|0)>>1]=0;d=a&65535;b[47674+(a*84|0)>>1]=d;c[54520+(a*188|0)>>2]=0;b[54536+(a*188|0)>>1]=0;b[54538+(a*188|0)>>1]=d;a=a+1|0;}while((a|0)<25);ap(53496,438)|0;return 0}function db(){var a=0,d=0,e=0,f=0,g=0;c[32069]=0;a=c[12442]|0;d=0;while(1){if((c[47668+(d*84|0)>>2]|0)==(a|0)){if((c[47656+(d*84|0)>>2]|0)>0){break}}e=d+1|0;if((e|0)<25){d=e}else{f=0;g=7;break}}if((g|0)==7){return f|0}c[32069]=(b[47672+(d*84|0)>>1]|0)+1;c[14926]=c[47664+(d*84|0)>>2];f=1;return f|0}function dc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;if((a|0)<1){b=0;return b|0}d=c[12442]|0;e=0;while(1){if((c[47668+(e*84|0)>>2]|0)==(d|0)){if((c[47656+(e*84|0)>>2]|0)>0){break}}f=e+1|0;if((f|0)<25){e=f}else{b=0;g=8;break}}if((g|0)==8){return b|0}g=47664+(e*84|0)|0;e=c[g>>2]|0;d=(e|0)>(a|0)?a:e;c[g>>2]=e-d;c[14926]=(c[14926]|0)-d;b=d;return b|0}function dd(){bx();dZ();return}function de(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;f=i;g=c[32093]|0;L1:do{if((g|0)>0){switch(d|0){case 1:case 2:case 7:case 8:case 10:case 11:case 12:case 13:case 14:case 16:case 27:case 29:case 30:case 32:case 33:{break L1;break};default:{}}c[32093]=g-1;c[32023]=c[32022];c[32019]=(c[32019]|0)-1;eR(31080);eP();e0(4e3);i=f;return}}while(0);if((a[11624]|0)!=0){aN(11632)|0}if((d|0)==33|(d|0)==2){eS(27816,(h=i,i=i+1|0,i=i+7&-8,c[h>>2]=0,h)|0);i=h;bx();dZ()}g=(d|0)==8;j=0;k=(c[32030]|0)+(c[32024]|0)|0;do{k=(eg(a[117080+j|0]|0,b[117024+(j<<1)>>1]|0)|0)+k|0;j=j+1|0;}while((j|0)<26);j=g&1;if(g){l=0;m=0;n=((c[32069]|0)*1e5|0)+k|0}else{l=0;m=0;n=k-((k|0)/10|0)|0}while(1){if((a[128488+l|0]|0)==0){o=n;p=m}else{k=(l|0)==16&(m|0)==0;o=n<<(k?j:0);p=k?0:l}k=l+1|0;if((k|0)<21){l=k;m=p;n=o}else{break}}n=(c[32025]|0)+((o|0)/2|0)|0;o=c[11216+(c[32026]<<2)>>2]|0;if((a[127608]|0)==0){fk(127608,24944,10)|0}p=c[32069]|0;df(d,e,c[26690]|0);aI(59504,22544,(h=i,i=i+40|0,c[h>>2]=n,c[h+8>>2]=p,c[h+16>>2]=o,c[h+24>>2]=127608,c[h+32>>2]=126288,h)|0)|0;i=h;h=a[127592]|0;do{if((h|a[47648])<<24>>24==0){o=(c[32030]|0)+(c[32024]|0)|0;if(h<<24>>24!=0){break}p=c[12442]|0;do{if(g){m=0;do{if((c[54524+(m*188|0)>>2]|0)==(p|0)){c[54520+(m*188|0)>>2]=0}m=m+1|0;}while((m|0)<25);m=~~(+(o|0)*.05+ +(c[14926]|0));c[14926]=m;l=-1;j=0;do{l=(c[47668+(j*84|0)>>2]|0)==(p|0)?j:l;j=j+1|0;}while((j|0)<25);if((l|0)==-1){j=-1;k=0;while(1){if((b[47674+(k*84|0)>>1]|0)==24){q=(c[47656+(k*84|0)>>2]|0)<(n|0)?k:j}else{q=j}r=k+1|0;if((r|0)<25){j=q;k=r}else{s=q;break}}}else{s=l}if((s|0)<=-1){t=0;break}c[47664+(s*84|0)>>2]=m;k=47656+(s*84|0)|0;if((c[k>>2]|0)<(n|0)){u=47672+(s*84|0)|0}else{j=47672+(s*84|0)|0;if((c[32069]|0)>(b[j>>1]|0)){u=j}else{t=0;break}}fm(47676+(s*84|0)|0,106576)|0;fm(47717+(s*84|0)|0,127608)|0;c[k>>2]=n;b[u>>1]=c[32069];c[47668+(s*84|0)>>2]=c[12442];b[47660+(s*84|0)>>1]=(c[31476]|0)/100|0;t=0}else{k=-1;j=0;do{k=(c[54524+(j*188|0)>>2]|0)==(p|0)?j:k;j=j+1|0;}while((j|0)<25);if((k|0)==-1){j=-1;m=0;while(1){l=(b[54538+(m*188|0)>>1]|0)==24?m:j;r=m+1|0;if((r|0)<25){j=l;m=r}else{v=l;break}}}else{v=k}if((v|0)<=-1){t=0;break}m=54520+(v*188|0)|0;if((c[m>>2]|0)<(n|0)){w=54536+(v*188|0)|0}else{j=54536+(v*188|0)|0;if((c[32069]|0)>(b[j>>1]|0)){w=j}else{t=0;break}}fm(54540+(v*188|0)|0,106576)|0;fm(54581+(v*188|0)|0,127608)|0;c[m>>2]=n;c[54528+(v*188|0)>>2]=d;b[54532+(v*188|0)>>1]=e;b[w>>1]=c[32069];c[54524+(v*188|0)>>2]=c[12442];b[54534+(v*188|0)>>1]=(c[26690]&255)<<24>>24;m=0;while(1){b[54602+(v*188|0)+(m<<2)>>1]=a[117080+m|0]|0;b[54602+(v*188|0)+(m<<2)+2>>1]=b[117024+(m<<1)>>1]|0;j=m+1|0;if((j|0)<26){m=j}else{t=0;break}}}}while(0);while(1){b[54538+(t*188|0)>>1]=-1;b[47674+(t*84|0)>>1]=-1;p=t+1|0;if((p|0)<25){t=p}else{x=0;break}}while(1){p=0;o=-1;m=-1;while(1){if((b[54538+(p*188|0)>>1]|0)<0){k=c[54520+(p*188|0)>>2]|0;j=(k|0)<(o|0);y=j?m:p;z=j?o:k}else{y=m;z=o}k=p+1|0;if((k|0)<25){p=k;o=z;m=y}else{break}}if((y|0)>-1){b[54538+(y*188|0)>>1]=x}m=x+1|0;if((m|0)<25){x=m}else{A=0;break}}do{m=0;o=-1;p=-1;while(1){if((b[47674+(m*84|0)>>1]|0)<0){k=c[47656+(m*84|0)>>2]|0;j=(k|0)<(o|0);B=j?p:m;C=j?o:k}else{B=p;C=o}k=m+1|0;if((k|0)<25){m=k;o=C;p=B}else{break}}if((B|0)>-1){b[47674+(B*84|0)>>1]=A}A=A+1|0;}while((A|0)<25)}}while(0);eR(128592);bx();dZ();i=f;return}function df(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;f=i;L1:do{if((b|0)==0){g=c[5672+(d*24|0)>>2]|0;switch(a[g]|0){case 97:case 101:case 105:case 111:case 117:{h=20472;break};default:{h=18024}}aI(126288,15616,(j=i,i=i+16|0,c[j>>2]=h,c[j+8>>2]=g,j)|0)|0;i=j;k=10}else{do{if((a[3848]|0)==0){if((b|0)==23){fk(126288,44552,22)|0;break L1}else if((b|0)==14){fk(126288,13552,41)|0;break L1}else{break}}}while(0);aI(126288,42648,(j=i,i=i+8|0,c[j>>2]=c[8+(b<<2)>>2],j)|0)|0;i=j;k=10}}while(0);do{if((k|0)==10){if((b|0)!=8){break}i=f;return}}while(0);b=126288+(fj(126288)|0)|0;aI(b|0,41376,(j=i,i=i+8|0,c[j>>2]=c[9368+(e<<2)>>2],j)|0)|0;i=j;i=f;return}function dg(){return a[3968+((ai()|0)%81|0)|0]|0}function dh(d){d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;if(d>>>0>27>>>0){i=e;return}f=51104+(d<<2)|0;if((c[f>>2]|0)==0){c[f>>2]=1}eS(32256,(f=i,i=i+8|0,c[f>>2]=(c[3856+(d<<2)>>2]|0)+1,f)|0);i=f;switch(d|0){case 18:{c[32037]=c[32037]<<1;c[32042]=c[32042]<<1;c[32043]=c[32043]<<1;c[32049]=c[32049]<<1;c[32050]=c[32050]<<1;c[32051]=c[32051]<<1;c[32052]=c[32052]<<1;c[32055]=c[32055]<<1;c[32059]=c[32059]<<1;c[32061]=c[32061]<<1;c[32062]=c[32062]<<1;i=e;return};case 2:{d=c[14872]|0;g=d+7|0;h=(g|0)>17?17:g;c[11906]=h;g=c[14874]|0;j=g+25|0;k=(j|0)>67?67:j;c[11910]=k;j=d-7|0;d=(j|0)>0?j:0;c[11904]=d;j=g-25|0;g=(j|0)>0?j:0;c[11908]=g;if((d|0)<(h|0)&(g|0)<(k|0)){j=d;do{d=g;do{a[107880+(d*17|0)+j|0]=a[117112+(d*17|0)+j|0]|0;if((a[68960+(d*442|0)+(j*26|0)|0]|0)!=0){l=49776+(d*17|0)+j|0;a[l]=a[l]|1}d=d+1|0;}while((d|0)<(k|0));j=j+1|0;}while((j|0)<(h|0))}e0(2e3);eX(c[11908]|0,c[11910]|0,c[11904]|0,c[11906]|0);i=e;return};case 0:{cM(0);i=e;return};case 1:{cN(0);i=e;return};case 4:{b6(cd((c[26690]|0)+1|0)|0);i=e;return};case 5:{bI(c[14874]|0,c[14872]|0,c[26690]|0);i=e;return};case 6:{c[32054]=(c[32054]|0)+800;i=e;return};case 7:{h=(ai()|0)%1e3|0;j=(h-750|0)>>>0<199>>>0?1:(h-849|0)/100|0;h=j*100|0;k=h+(c[31476]|0)|0;c[31476]=(k|0)<0?0:k;k=(j|0)<0;eS(31912,(f=i,i=i+24|0,c[f>>2]=k?31528:31120,c[f+8>>2]=k?-j|0:j,c[f+16>>2]=(j|0)==1?128584:30416,f)|0);i=f;cX(h);i=e;return};case 8:{bR(0);i=e;return};case 9:{c[32060]=(c[32060]|0)+1800;i=e;return};case 10:{h=((ai()|0)%55|0)+13|0;c[32063]=h+(c[32063]|0);eS(30032,(f=i,i=i+1|0,i=i+7&-8,c[f>>2]=0,f)|0);i=f;i=e;return};case 11:{h=0;do{j=0;do{k=a[68960+(j*442|0)+(h*26|0)|0]|0;if(k<<24>>24!=0){b[120568+(j*34|0)+(h<<1)>>1]=b[5684+((k<<24>>24)*24|0)>>1]|0}j=j+1|0;}while((j|0)<67);h=h+1|0;}while((h|0)<17);eS(29600,(f=i,i=i+1|0,i=i+7&-8,c[f>>2]=0,f)|0);i=f;i=e;return};case 12:{f=((ai()|0)%200|0)+301|0;c[32077]=f+(c[32077]|0);eN();i=e;return};case 13:{f=((ai()|0)%200|0)+301|0;c[32078]=f+(c[32078]|0);eN();i=e;return};case 14:{f=((ai()|0)%250|0)+251|0;c[32080]=f+(c[32080]|0);eN();i=e;return};case 15:{f=0;do{h=0;do{a[107880+(h*17|0)+f|0]=a[117112+(h*17|0)+f|0]|0;if((a[68960+(h*442|0)+(f*26|0)|0]|0)!=0){j=49776+(h*17|0)+f|0;a[j]=a[j]|1}h=h+1|0;}while((h|0)<67);f=f+1|0;}while((f|0)<17);e0(2e3);eX(0,67,0,17);i=e;return};case 16:{c[32061]=(c[32061]|0)+30;eN();i=e;return};case 17:{f=0;do{if(((a[117080+f|0]|0)-71|0)>>>0<4>>>0){h=117024+(f<<1)|0;j=b[h>>1]|0;k=j<<16>>16<<1;g=k&65535;if((k|0)<1){m=j<<16>>16==0?g:2550}else{m=g}b[h>>1]=m}f=f+1|0;}while((f|0)<26);i=e;return};case 19:{f=0;do{m=a[117080+f|0]|0;if((m<<24>>24|0)==56){c[59344+(b[117024+(f<<1)>>1]<<2)>>2]=1}else if((m<<24>>24|0)==55){c[51104+(b[117024+(f<<1)>>1]<<2)>>2]=1}f=f+1|0;}while((f|0)<26);i=e;return};case 20:{cW();i=e;return};case 21:{dR();i=e;return};case 22:{e1(29256);e2(28920);i=e;return};case 23:{c[32093]=(c[32093]|0)+1;i=e;return};default:{i=e;return}}}function di(a){a=a|0;dy(22,150,28640,10,3,a);return}function dj(b){b=b|0;var d=0,e=0,f=0,g=0;d=i;if((b|0)<4){e=a[280+b|0]|0;if(e<<24>>24>1){f=(e<<24>>24)+1|0}else{f=2}g=(ai()|0)%(f|0)|0}else{f=(a[280+((b|0)>20?20:b)|0]|0)-9|0;g=((ai()|0)%(((f|0)>1?f:1)|0)|0)+10|0}f=50936+(g<<2)|0;c[f>>2]=(c[f>>2]|0)+1;f=c[3120+(g<<2)>>2]|0;eS(28344,(b=i,i=i+16|0,c[b>>2]=c[2880+(g<<2)>>2],c[b+8>>2]=f,b)|0);i=b;if(((ai()|0)%10|0|0)!=3){i=d;return}eR(28096);c[32017]=(c[32017]|0)+1;eM();i=d;return}function dk(b){b=b|0;var d=0,e=0;d=i;if(!((b|0)<1&(a[47648]|0)==0)){eS(13408,(e=i,i=i+8|0,c[e>>2]=b,e)|0);i=e;i=d;return}if((b|0)>=0){i=d;return}eS(35280,(e=i,i=i+8|0,c[e>>2]=b,e)|0);i=e;i=d;return}function dl(){var b=0,d=0,e=0,f=0;b=i;eC();c[16930]=1;d=c[32024]|0;if((d|0)==0){e=0}else{eS(34504,(f=i,i=i+16|0,c[f>>2]=d,c[f+8>>2]=(d|0)==1?128576:27304,f)|0);i=f;eD();e=0}do{if((a[117080+e|0]|0)!=1){dm(e);eD()}e=e+1|0;}while((e|0)<26);e=(c[31476]|0)/100|0;d=399-e|0;eS(24536,(f=i,i=i+24|0,c[f>>2]=e+1,c[f+8>>2]=d,c[f+16>>2]=(d|0)==1?128576:27304,f)|0);i=f;c[16930]=0;i=b;return}function dm(d){d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;f=a[117080+d|0]|0;L1:do{switch(f|0){case 55:{du(d,3856,51104);break};case 56:{du(d,4136,59344);break};case 23:case 57:case 62:case 71:case 72:case 63:case 73:case 58:case 94:case 74:case 59:case 66:case 65:case 95:case 68:case 67:case 64:{eS(40112,(g=i,i=i+8|0,c[g>>2]=c[4792+(f<<2)>>2],g)|0);i=g;if((a[47648]|0)==0){break L1}eS(38304,(g=i,i=i+8|0,c[g>>2]=b[117024+(d<<1)>>1]|0,g)|0);i=g;break};default:{eS(40112,(g=i,i=i+8|0,c[g>>2]=c[4792+(f<<2)>>2],g)|0);i=g;h=b[117024+(d<<1)>>1]|0;j=h<<16>>16;if(!(h<<16>>16<1&(a[47648]|0)==0)){eS(13408,(g=i,i=i+8|0,c[g>>2]=j,g)|0);i=g;break L1}if(h<<16>>16>=0){break L1}eS(35280,(g=i,i=i+8|0,c[g>>2]=j,g)|0);i=g}}}while(0);if((c[32038]|0)==(d|0)){eR(37672)}if(!((c[32036]|0)==(d|0)|(c[32079]|0)==(d|0))){i=e;return}eR(36912);i=e;return}function dn(){dl();return}function dp(){var b=0,d=0;c[16930]=1;eC();b=22;do{if((b-24|0)>>>0<10>>>0){d=0;do{if((a[117080+d|0]|0)==(b|0)){dm(d);eD()}d=d+1|0;}while((d|0)<26)}b=b+1|0;}while((b|0)<93);c[16930]=0;return}function dq(){var b=0,d=0;c[16930]=1;eC();b=22;do{if((b|0)==73){d=0;do{d=d+1|0;}while((d|0)<26)}else if((b|0)==71){d=0;do{d=d+1|0;}while((d|0)<26)}else if((b|0)==72){d=0;do{d=d+1|0;}while((d|0)<26)}else{d=0;do{L10:do{if((a[117080+d|0]|0)==(b|0)){switch(b|0){case 71:case 72:case 73:case 74:case 57:case 58:case 23:case 64:case 62:case 63:case 56:case 66:case 65:case 95:case 67:case 68:case 59:case 55:{break L10;break};default:{}}dm(d);eD()}}while(0);d=d+1|0;}while((d|0)<26)}b=b+1|0;}while((b|0)<93);c[16930]=0;return}function dr(){var b=0,d=0;c[16930]=1;eC();b=22;do{if((b|0)==57){d=0;do{if((a[117080+d|0]|0)==57){dm(d);eD()}d=d+1|0;}while((d|0)<26)}else if((b|0)==55){d=0;do{if((a[117080+d|0]|0)==55){dm(d);eD()}d=d+1|0;}while((d|0)<26)}else{d=0;do{do{if((a[117080+d|0]|0)==(b|0)){if(!((b|0)==57|(b|0)==55)){break}dm(d);eD()}}while(0);d=d+1|0;}while((d|0)<26)}b=b+1|0;}while((b|0)<84);c[16930]=0;return}function ds(){var b=0,d=0,e=0;c[16930]=1;eC();b=22;do{d=(b|0)==56;e=0;do{if((a[117080+e|0]|0)==(b|0)&d){dm(e);eD()}e=e+1|0;}while((e|0)<26);b=b+1|0;}while((b|0)<84);c[16930]=0;return}function dt(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;if((b|0)==99){fb(22096);d=0;e=0;while(1){if(e){fb(2e4)}fb(c[2880+(d<<2)>>2]|0);f=d+1|0;if((f|0)<39){d=f;e=1}else{break}}return}fb(17544);e=0;d=1;while(1){if((c[50936+(e<<2)>>2]|0)==0){g=d}else{if((d|0)==0){fb(2e4)}fb(c[2880+(e<<2)>>2]|0);g=0}f=e+1|0;if((f|0)<39){e=f;d=g}else{break}}if((g|0)!=0){fb(15224)}if((b|0)==-1){return}fb(45912);b=0;g=1;while(1){do{if((c[51104+(b<<2)>>2]|0)==0){h=g}else{d=3856+(b<<2)|0;e=c[d>>2]|0;if((a[e+1|0]|0)==32){h=g;break}if((g|0)==0){fb(2e4);i=c[d>>2]|0}else{i=e}fb(i+1|0);h=0}}while(0);e=b+1|0;if((e|0)<28){b=e;g=h}else{break}}if((h|0)!=0){fb(15224)}fb(44064);h=0;g=1;while(1){do{if((c[59344+(h<<2)>>2]|0)==0){j=g}else{b=4136+(h<<2)|0;i=c[b>>2]|0;if((a[i+1|0]|0)==32){j=g;break}if((g|0)==0){fb(2e4);k=c[b>>2]|0}else{k=i}fb(k+1|0);j=0}}while(0);i=h+1|0;if((i|0)<35){h=i;g=j}else{break}}if((j|0)!=0){fb(15224)}e2(42400);e4(-1,41272,128576);return}function du(d,e,f){d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;g=i;h=(e|0)==0;do{if((f|0)==0){if(h){eS(40112,(j=i,i=i+8|0,c[j>>2]=c[4792+(a[117080+d|0]<<2)>>2],j)|0);i=j;break}k=c[e+(b[117024+(d<<1)>>1]<<2)>>2]|0;l=c[4792+(a[117080+d|0]<<2)>>2]|0;if((a[k]|0)==0){eS(40112,(j=i,i=i+8|0,c[j>>2]=l,j)|0);i=j;break}else{eS(39392,(j=i,i=i+16|0,c[j>>2]=l,c[j+8>>2]=k,j)|0);i=j;break}}else{if(h){eS(40112,(j=i,i=i+8|0,c[j>>2]=c[4792+(a[117080+d|0]<<2)>>2],j)|0);i=j;break}k=b[117024+(d<<1)>>1]|0;l=c[e+(k<<2)>>2]|0;if((a[l]|0)==0){eS(40112,(j=i,i=i+8|0,c[j>>2]=c[4792+(a[117080+d|0]<<2)>>2],j)|0);i=j;break}m=c[4792+(a[117080+d|0]<<2)>>2]|0;if((c[f+(k<<2)>>2]|0)==0){eS(40112,(j=i,i=i+8|0,c[j>>2]=m,j)|0);i=j;break}else{eS(39392,(j=i,i=i+16|0,c[j>>2]=m,c[j+8>>2]=l,j)|0);i=j;break}}}while(0);if((a[47648]|0)==0){i=g;return}eS(38304,(j=i,i=i+8|0,c[j>>2]=b[117024+(d<<1)>>1]|0,j)|0);i=j;i=g;return}function dv(d,e,f){d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;g=i;h=(e|0)==0;do{if((f|0)==0){if(h){fm(126208,c[4792+(a[117080+d|0]<<2)>>2]|0)|0;break}j=c[e+(b[117024+(d<<1)>>1]<<2)>>2]|0;k=c[4792+(a[117080+d|0]<<2)>>2]|0;if((a[j]|0)==0){fm(126208,k|0)|0;break}else{aI(126208,35936,(l=i,i=i+16|0,c[l>>2]=k,c[l+8>>2]=j,l)|0)|0;i=l;break}}else{if(h){fm(126208,c[4792+(a[117080+d|0]<<2)>>2]|0)|0;break}j=b[117024+(d<<1)>>1]|0;k=c[e+(j<<2)>>2]|0;if((a[k]|0)==0){fm(126208,c[4792+(a[117080+d|0]<<2)>>2]|0)|0;break}m=c[4792+(a[117080+d|0]<<2)>>2]|0;if((c[f+(j<<2)>>2]|0)==0){fm(126208,m|0)|0;break}else{aI(126208,35936,(l=i,i=i+16|0,c[l>>2]=m,c[l+8>>2]=k,l)|0)|0;i=l;break}}}while(0);if((a[47648]|0)==0){i=g;return 126208}f=126208+(fj(126208)|0)|0;aI(f|0,38304,(l=i,i=i+8|0,c[l>>2]=b[117024+(d<<1)>>1]|0,l)|0)|0;i=l;i=g;return 126208}function dw(d){d=d|0;var e=0,f=0,g=0,h=0;e=i;f=a[117080+d|0]|0;switch(f|0){case 23:case 57:case 62:case 71:case 72:case 63:case 73:case 58:case 94:case 74:case 59:case 66:case 65:case 95:case 68:case 67:case 64:{fm(126208,c[4792+(f<<2)>>2]|0)|0;if((a[47648]|0)!=0){g=126208+(fj(126208)|0)|0;aI(g|0,38304,(h=i,i=i+8|0,c[h>>2]=b[117024+(d<<1)>>1]|0,h)|0)|0;i=h}fm(126128,126208)|0;break};case 56:{dv(d,4136,59344)|0;fm(126128,126208)|0;break};case 55:{dv(d,3856,51104)|0;fm(126128,126208)|0;break};default:{fm(126128,c[4792+(f<<2)>>2]|0)|0;f=b[117024+(d<<1)>>1]|0;g=f<<16>>16;do{if(f<<16>>16<1&(a[47648]|0)==0){if(f<<16>>16<0){aI(125912,35280,(h=i,i=i+8|0,c[h>>2]=g,h)|0)|0;i=h;break}else{a[125912]=0;break}}else{aI(125912,13408,(h=i,i=i+8|0,c[h>>2]=g,h)|0)|0;i=h}}while(0);fo(126128,125912)|0}}if((c[32038]|0)==(d|0)){fk(126128+(fj(126128)|0)|0,37672,18)|0}if(!((c[32036]|0)==(d|0)|(c[32079]|0)==(d|0))){i=e;return 126128}fk(126128+(fj(126128)|0)|0,36912,14)|0;i=e;return 126128}function dx(a){a=a|0;var b=0,d=0;b=c[32026]|0;d=b+4+((ai()|0)%((b<<1)+2|0)|0)|0;dy(1,d,(b|0)>1?42784:42704,100,0,a);return}function dy(d,e,f,g,h,j){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;k=i;i=i+16|0;l=k|0;m=k+8|0;if(d>>>0>38>>>0|(f|0)==0|(g|0)<0){i=k;return}do{if((c[32046]|0)!=0){eR(35784);eP();if((c[32046]|0)==0){break}i=k;return}}while(0);n=eE(l,m,j)|0;j=c[l>>2]|0;o=c[14874]|0;p=c[m>>2]|0;q=c[14872]|0;c[l>>2]=o;c[m>>2]=q;if((e|0)<=0){i=k;return}r=e;e=n;n=j-o|0;j=p-q|0;p=o;o=q;L11:while(1){q=p+n|0;c[l>>2]=q;s=o+j|0;c[m>>2]=s;if((bH(q,s)|0)==0){t=46;break}s=c[l>>2]|0;if((s|0)==(c[14874]|0)){if((c[m>>2]|0)==(c[14872]|0)){t=9;break}}if((c[32044]|0)==0){eY(s,c[m>>2]|0,h,e);e0(g);eT(c[l>>2]|0,c[m>>2]|0);u=c[l>>2]|0}else{u=s}s=c[m>>2]|0;q=a[68960+(u*442|0)+(s*26|0)|0]|0;v=q<<24>>24;L20:do{if(q<<24>>24==0){w=117112+(u*17|0)+s|0;switch(a[w]|0){case 18:{eS(f,(x=i,i=i+8|0,c[x>>2]=41256,x)|0);i=x;if(!((r|0)>=((c[32069]|0)+50|0)&(c[26690]|0)<18)){y=j;z=n;A=e;B=0;break L20}C=c[l>>2]|0;if((C|0)>=66){y=j;z=n;A=e;B=0;break L20}D=c[m>>2]|0;if((D|0)>15|(C|0)==0|(D|0)==0){y=j;z=n;A=e;B=0;break L20}eR(41128);a[w]=1;eT(c[l>>2]|0,c[m>>2]|0);D=c[l>>2]|0;C=c[m>>2]|0;bF(D-1|0,C-1|0,D+1|0,C+1|0);C=(c[l>>2]|0)-1|0;while(1){D=(c[m>>2]|0)-1|0;do{do{if((bH(C,D)|0)!=0){if((a[107880+(C*17|0)+D|0]|0)==0){break}if((a[117112+(C*17|0)+D|0]|0)!=18){break}eT(C,D)}}while(0);D=D+1|0;}while((D|0)<=((c[m>>2]|0)+1|0));D=C+1|0;if((D|0)>((c[l>>2]|0)+1|0)){y=j;z=n;A=e;B=0;break}else{C=D}}break};case 17:{eS(f,(x=i,i=i+8|0,c[x>>2]=40984,x)|0);i=x;if((r|0)<=39){y=j;z=n;A=e;B=0;break L20}eR(40824);a[w]=1;eT(c[l>>2]|0,c[m>>2]|0);y=j;z=n;A=e;B=0;break L20;break};case 3:{eS(f,(x=i,i=i+8|0,c[x>>2]=40608,x)|0);i=x;if((r|0)<=33){y=j;z=n;A=e;B=0;break L20}C=c[m>>2]|0;D=c[l>>2]|0;a[68960+(D*442|0)+(C*26|0)|0]=45;b[120568+(D*34|0)+(C<<1)>>1]=b[3382]|0;a[w]=4;eT(D,C);y=j;z=n;A=e;B=0;break L20;break};case 10:{eS(f,(x=i,i=i+8|0,c[x>>2]=40776,x)|0);i=x;if(!((r|0)>44&(c[32069]|0)<4)){y=j;z=n;A=e;B=0;break L20}if((((ai()|0)%60|0)+1|0)>=30){y=j;z=n;A=e;B=0;break L20}eR(40680);a[w]=57;C=c[m>>2]|0;D=c[l>>2]|0;b[118288+(D*34|0)+(C<<1)>>1]=(c[26690]&255)<<24>>24;eT(D,C);y=j;z=n;A=e;B=0;break L20;break};case 12:{y=-j|0;z=-n|0;A=c[46632+(e<<2)>>2]|0;B=r;break L20;break};default:{y=j;z=n;A=e;B=r;break L20}}}else{b9(u,s);do{if(q<<24>>24!=65){if((q&255)>>>0>56>>>0){if((((ai()|0)%100|0)+1|0)<10){break}if((q&255)>>>0<=65>>>0){t=18}}else{t=18}if((t|0)==18){t=0;E=a[304+(v*39|0)+d|0]|0;if(E<<24>>24!=0){t=19;break L11}}eS(f,(x=i,i=i+8|0,c[x>>2]=106792,x)|0);i=x;C=r-(cb(c[l>>2]|0,c[m>>2]|0,r,1)|0)|0;eT(c[l>>2]|0,c[m>>2]|0);e0(1e3);c[l>>2]=(c[l>>2]|0)-n;c[m>>2]=(c[m>>2]|0)-j;y=j;z=n;A=e;B=C;break L20}}while(0);eR(128624);eS(41288,(x=i,i=i+8|0,c[x>>2]=c[5672+(v*24|0)>>2],x)|0);i=x;y=-j|0;z=-n|0;A=e;B=r}}while(0);q=B-3-(c[32069]>>1)|0;if((q|0)<=0){t=49;break}r=q;e=A;n=z;j=y;p=c[l>>2]|0;o=c[m>>2]|0}if((t|0)==19){eR(128624);eS(c[3040+(E<<24>>24<<2)>>2]|0,(x=i,i=i+8|0,c[x>>2]=c[5672+(v*24|0)>>2],x)|0);i=x;c[26712]=c[l>>2]<<24>>24;c[26710]=c[m>>2]<<24>>24;i=k;return}else if((t|0)==49){i=k;return}else if((t|0)==46){i=k;return}else if((t|0)==9){eR(41384);eP();cG(23,r);i=k;return}}function dz(a){a=a|0;var b=0;b=((ai()|0)%3|0)+2|0;dA(3,b8(b)|0,42600,b,1,a);return}function dA(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;j=i;i=i+16|0;k=j|0;l=j+8|0;if(b>>>0>38>>>0|(e|0)==0){i=j;return}do{if((c[32046]|0)!=0){eR(35784);eP();if((c[32046]|0)==0){break}i=j;return}}while(0);eE(k,l,h)|0;if((bH(c[k>>2]|0,c[l>>2]|0)|0)==0){i=j;return}h=c[l>>2]|0;m=c[k>>2]|0;n=a[68960+(m*442|0)+(h*26|0)|0]|0;o=n<<24>>24;if((a[117112+(m*17|0)+h|0]|0)==12){if((b|0)==3){eR(34848);eP();p=f+2|0;if((p|0)>0){q=p}else{i=j;return}do{q=q-1|0;ci();e0(1e3);}while((q|0)>0);i=j;return}else if((b|0)==6){eR(34776);eP();q=f+2|0;if((q|0)>0){r=q}else{i=j;return}do{r=r-1|0;ci();e0(1e3);}while((r|0)>0);i=j;return}else{eS(e,(s=i,i=i+16|0,c[s>>2]=34712,c[s+8>>2]=f,s)|0);i=s;eP();cG(23,d);i=j;return}}else{if(n<<24>>24==0){eR(34936);i=j;return}b9(m,h);h=c[k>>2]|0;m=c[l>>2]|0;r=eZ(g)|0;if((r|0)>0){q=0;do{e_(h,m,g,q);e0(75);q=q+1|0;}while((q|0)<(r|0))}eT(c[k>>2]|0,c[l>>2]|0);do{if((n&255)>>>0<=65>>>0){r=a[304+(o*39|0)+b|0]|0;if(r<<24>>24==0){break}eR(128624);eS(c[3040+(r<<24>>24<<2)>>2]|0,(s=i,i=i+8|0,c[s>>2]=c[5672+(o*24|0)>>2],s)|0);i=s;c[26712]=c[k>>2]<<24>>24;c[26710]=c[l>>2]<<24>>24;i=j;return}}while(0);eS(e,(s=i,i=i+16|0,c[s>>2]=106792,c[s+8>>2]=f,s)|0);i=s;cb(c[k>>2]|0,c[l>>2]|0,d,1)|0;i=j;return}}function dB(a){a=a|0;var b=0;b=c[32026]|0;dy(5,b+16+((ai()|0)%10|0)|0,42448,70,1,a);return}function dC(a){a=a|0;var b=0;b=((ai()|0)%3|0)+3|0;dA(6,b8(b)|0,42336,b,2,a);return}function dD(a){a=a|0;b6(a);return}function dE(a){a=a|0;var b=0;b=c[32026]|0;dA(12,b+21+((ai()|0)%20|0)|0,42216,0,3,a);return}function dF(a){a=a|0;var b=0;b=c[32026]|0;dy(14,b+26+((ai()|0)%(b+25|0)|0)|0,42112,40,2,a);return}function dG(a){a=a|0;var b=0;b=c[32026]|0;dy(15,b+21+((ai()|0)%25|0)|0,41944,60,4,a);return}function dH(d){d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;i=i+16|0;f=e|0;g=e+8|0;do{if((c[32046]|0)!=0){eR(35784);eP();if((c[32046]|0)==0){break}i=e;return}}while(0);eE(f,g,d)|0;if((bH(c[f>>2]|0,c[g>>2]|0)|0)==0){i=e;return}d=c[g>>2]|0;h=c[f>>2]|0;if((a[68960+(h*442|0)+(d*26|0)|0]|0)==0){eR(34936);i=e;return}b9(h,d);d=c[g>>2]|0;h=c[f>>2]|0;j=a[68960+(h*442|0)+(d*26|0)|0]|0;k=j<<24>>24;do{if((j&255)>>>0<=65>>>0){l=a[320+(k*39|0)|0]|0;if(l<<24>>24==0){break}eR(128624);eS(c[3040+(l<<24>>24<<2)>>2]|0,(l=i,i=i+8|0,c[l>>2]=c[5672+(k*24|0)>>2],l)|0);i=l;c[26712]=c[f>>2]<<24>>24;c[26710]=c[g>>2]<<24>>24;i=e;return}}while(0);k=eZ(0)|0;if((k|0)>0){j=0;do{e_(h,d,0,j);e0(75);j=j+1|0;}while((j|0)<(k|0))}do{m=((ai()|0)%64|0)+1|0;n=c[g>>2]|0;o=c[f>>2]|0;a[68960+(o*442|0)+(n*26|0)|0]=m;}while((c[5692+(m*24|0)>>2]&1|0)!=0);b[120568+(o*34|0)+(n<<1)>>1]=b[5684+(m*24|0)>>1]|0;eT(o,n);i=e;return}function dI(a){a=a|0;dA(21,(c[32026]|0)+100|0,41872,0,6,a);return}function dJ(a){a=a|0;var b=0;b=c[32026]|0;dy(22,(b<<1)+21+((ai()|0)%25|0)|0,41776,10,3,a);return}function dK(a){a=a|0;var b=0,d=0,e=0;b=(c[32023]|0)-1|0;d=(c[32022]|0)/2|0;e=(b|0)>(d|0)?d:b;dA(23,e<<1,128624,0,7,a);c[32023]=(c[32023]|0)-e;return}function dL(a){a=a|0;dA(26,2e3,41624,0,9,a);return}function dM(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;i=i+16|0;e=d|0;f=d+8|0;do{if((c[32046]|0)!=0){eR(35784);eP();if((c[32046]|0)==0){break}i=d;return}}while(0);eE(e,f,b)|0;if((bH(c[e>>2]|0,c[f>>2]|0)|0)==0){i=d;return}b=c[f>>2]|0;g=c[e>>2]|0;h=a[68960+(g*442|0)+(b*26|0)|0]|0;j=h<<24>>24;if(h<<24>>24==0){eR(34936);i=d;return}b9(g,b);if((h-57&255)>>>0<=8>>>0){h=a[334+(j*39|0)|0]|0;eR(128624);eS(c[3040+(h<<2)>>2]|0,(h=i,i=i+8|0,c[h>>2]=c[5672+(j*24|0)>>2],h)|0);i=h;c[26712]=c[e>>2]<<24>>24;c[26710]=c[f>>2]<<24>>24;i=d;return}h=c[e>>2]|0;b=c[f>>2]|0;g=eZ(10)|0;if((g|0)>0){k=0;do{e_(h,b,10,k);e0(75);k=k+1|0;}while((k|0)<(g|0))}cf(c[e>>2]|0,c[f>>2]|0,j);i=d;return}function dN(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;d=i;i=i+16|0;e=d|0;f=d+8|0;do{if((c[32046]|0)!=0){eR(35784);eP();if((c[32046]|0)==0){break}i=d;return}}while(0);eE(e,f,b)|0;if((bH(c[e>>2]|0,c[f>>2]|0)|0)==0){i=d;return}b=c[f>>2]|0;g=c[e>>2]|0;h=a[117112+(g*17|0)+b|0]|0;if((h<<24>>24|0)==1){if((a[68960+(g*442|0)+(b*26|0)|0]|0)!=0){eR(35320);i=d;return}if((c[26690]|0)==1&(g|0)==33&(b|0)==16){eR(35384);i=d;return}j=eZ(12)|0;if((j|0)>0){k=0;do{e_(g,b,12,k);e0(75);k=k+1|0;}while((k|0)<(j|0))}j=c[f>>2]|0;k=c[e>>2]|0;a[117112+(k*17|0)+j|0]=18;eT(k,j);j=c[e>>2]|0;k=c[f>>2]|0;bF(j-1|0,k-1|0,j+1|0,k+1|0);k=(c[e>>2]|0)-1|0;j=c[f>>2]|0;while(1){b=j-1|0;do{do{if((bH(k,b)|0)!=0){if((a[107880+(k*17|0)+b|0]|0)==0){break}if((a[117112+(k*17|0)+b|0]|0)!=18){break}eT(k,b)}}while(0);b=b+1|0;l=c[f>>2]|0;}while((b|0)<=(l+1|0));b=k+1|0;if((b|0)>((c[e>>2]|0)+1|0)){break}else{k=b;j=l}}i=d;return}else if((h<<24>>24|0)==18){eR(35064);i=d;return}else{eR(35120);i=d;return}}function dO(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;i=i+16|0;d=b|0;e=b+8|0;c[d>>2]=c[14874];c[e>>2]=c[14872];cU(1,-1);f=eE(d,e,a)|0;a=c[d>>2]|0;d=c[e>>2]|0;dX(a,d,f,((ai()|0)%20|0)+12|0);i=b;return}function dP(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;d=i;e=5692+(b*24|0)|0;f=5672+(b*24|0)|0;if((b|0)==-1){while(1){eR(35720);g=1;do{if((c[e>>2]&1|0)==0){h=c[5672+(g*24|0)>>2]|0;eS(35600,(j=i,i=i+16|0,c[j>>2]=g,c[j+8>>2]=h,j)|0);i=j}else{eS(35560,(j=i,i=i+8|0,c[j>>2]=g,j)|0);i=j}g=g+1|0;}while((g|0)<57);eR(128624)}}if((b-1|0)>>>0>=56>>>0){eR(35424);k=c[12768]|0;l=k-1|0;c[12768]=l;cU(1,-1);i=d;return}b=c[e>>2]|0;if((b&1|0)!=0&(a[47648]|0)==0){while(1){}}c[e>>2]=b|1;eS(35480,(j=i,i=i+8|0,c[j>>2]=c[f>>2],j)|0);i=j;bG(c[26690]|0);eX(0,67,0,17);eO();k=c[12768]|0;l=k-1|0;c[12768]=l;cU(1,-1);i=d;return}function dQ(a){a=a|0;dA(35,150,41472,0,13,a);return}function dR(){var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;d=i;e=c[14874]|0;f=e-1|0;g=(f|0)>0?f:0;f=c[14872]|0;h=f-1|0;j=(h|0)>0?h:0;h=e+1|0;e=(h|0)>66?66:h;h=f+1|0;f=(h|0)>16?16:h;h=eZ(14)|0;if((h|0)>0){k=(g|0)>(e|0);l=(j|0)>(f|0);m=0;do{if(!k){n=g;do{if(!l){o=j;do{if(!((n|0)==(c[14874]|0)&(o|0)==(c[14872]|0))){e_(n,o,14,m)}o=o+1|0;}while((o|0)<=(f|0))}n=n+1|0;}while((n|0)<=(e|0))}e0(75);m=m+1|0;}while((m|0)<(h|0))}h=(g|0)>(e|0);if(h){i=d;return}m=(j|0)>(f|0);l=g;k=0;while(1){if(m){p=k}else{n=j;o=k;while(1){q=68960+(l*442|0)+(n*26|0)|0;r=a[q]|0;do{if(r<<24>>24==0){s=o}else{t=r<<24>>24;if((r&255)>>>0<57>>>0){u=(c[5688+(t*24|0)>>2]|0)+o|0;a[q]=0;s=u;break}else{eS(40512,(u=i,i=i+8|0,c[u>>2]=c[5672+(t*24|0)>>2],u)|0);i=u;u=120568+(l*34|0)+(n<<1)|0;b[u>>1]=((b[u>>1]|0)>>>1)+1;s=o;break}}}while(0);q=n+1|0;if((q|0)>(f|0)){p=s;break}else{n=q;o=s}}}o=l+1|0;if((o|0)>(e|0)){break}else{l=o;k=p}}if((p|0)>0){eR(40368);cz(p)}if(h){i=d;return}if((j|0)>(f|0)){h=g;do{h=h+1|0;}while((h|0)<=(e|0));i=d;return}else{v=g}do{g=j;do{if(!((v|0)==(c[14874]|0)&(g|0)==(c[14872]|0))){eT(v,g)}g=g+1|0;}while((g|0)<=(f|0));v=v+1|0;}while((v|0)<=(e|0));i=d;return}function dS(d){d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;e=i;f=c[32032]|0;if((f|0)<1){eR(40184);i=e;return}L5:do{if((c[50936+(d<<2)>>2]|0)!=0){c[32032]=f-1;eS(40088,(g=i,i=i+8|0,c[g>>2]=c[2880+(d<<2)>>2],g)|0);i=g;if(d>>>0>38>>>0){break}if((c[32062]|0)!=0){eR(39928);break}do{if(((ai()|0)%23|0|0)!=6){h=((ai()|0)%18|0)+1|0;if((h|0)>(c[32017]|0)){break}h=c[32026]|0;if(((h*3|0)+2|0)>>>0<d>>>0){eR(39688);break L5}switch(d|0){case 24:{j=c[32055]|0;if((j|0)==0){c[32035]=(c[32035]|0)+10}c[32055]=j+200;cU(1,-1);j=c[14874]|0;k=c[14872]|0;l=eZ(0)|0;if((l|0)>0){m=0}else{break L5}while(1){e_(j,k,0,m);e0(75);m=m+1|0;if((m|0)>=(l|0)){break L5}}break};case 2:{l=c[32042]|0;if((l|0)==0){cU(4,3);n=c[32042]|0}else{n=l}c[32042]=n+400;l=c[14874]|0;k=c[14872]|0;j=eZ(0)|0;if((j|0)>0){o=0}else{break L5}while(1){e_(l,k,0,o);e0(75);o=o+1|0;if((o|0)>=(j|0)){break L5}}break};case 5:{e1(39648);e2(39536);break L5;break};case 29:{j=(ai()|0)%20|0;c[32062]=j+(h<<1|1)+(c[32062]|0);break L5;break};case 31:{dT(31,h+36+((ai()|0)%10|0)|0,38016,11);break L5;break};case 7:{if((c[32043]|0)==0){c[32091]=(c[32091]|0)+3}j=((ai()|0)%100|0)+151|0;c[32043]=j+(c[32043]|0);j=c[14874]|0;k=c[14872]|0;l=eZ(0)|0;if((l|0)>0){p=0}else{break L5}while(1){e_(j,k,0,p);e0(75);p=p+1|0;if((p|0)>=(l|0)){break L5}}break};case 4:{c[32049]=(c[32049]|0)+(c[32021]<<1);l=c[14874]|0;k=c[14872]|0;j=eZ(0)|0;if((j|0)>0){q=0}else{break L5}while(1){e_(l,k,0,q);e0(75);q=q+1|0;if((q|0)>=(j|0)){break L5}}break};case 10:{c[32044]=0;j=c[14874]|0;k=c[14872]|0;l=eZ(0)|0;if((l|0)>0){r=0}else{break L5}while(1){e_(j,k,0,r);e0(75);r=r+1|0;if((r|0)>=(l|0)){break L5}}break};case 1:{e1(39648);e2(39616);break L5;break};case 9:{cH((h<<1)+20|0);l=c[14874]|0;k=c[14872]|0;j=eZ(0)|0;if((j|0)>0){s=0}else{break L5}while(1){e_(l,k,0,s);e0(75);s=s+1|0;if((s|0)>=(j|0)){break L5}}break};case 21:{e1(39648);e2(38560);break L5;break};case 22:{e1(39648);e2(38488);break L5;break};case 23:{e1(39648);e2(38448);break L5;break};case 13:{j=0;k=0;while(1){if((a[117080+k|0]|0)==60){t=j+1+(b[117024+(k<<1)>>1]|0)|0}else{t=j}l=k+1|0;if((l|0)<26){j=t;k=l}else{break}}c[32050]=(c[32050]|0)+(t<<7|12);k=c[14874]|0;j=c[14872]|0;l=eZ(0)|0;if((l|0)>0){u=0}else{break L5}while(1){e_(k,j,0,u);e0(75);u=u+1|0;if((u|0)>=(l|0)){break L5}}break};case 8:{l=c[14872]|0;j=l-5|0;k=l+6|0;l=c[14874]|0;v=l-15|0;w=l+16|0;l=(v|0)<0?0:v;v=(j|0)<0?0:j;j=(l|0)>66?66:l;l=(v|0)>16?16:v;v=(w|0)<0?0:w;w=(k|0)<0?0:k;k=(v|0)>66?66:v;v=(w|0)>16?16:w;if((l|0)<=(v|0)){w=(j|0)>(k|0);x=l;do{if(!w){y=j;do{a[107880+(y*17|0)+x|0]=a[117112+(y*17|0)+x|0]|0;y=y+1|0;}while((y|0)<=(k|0))}x=x+1|0;}while((x|0)<=(v|0))}eX(j,k+1|0,l,v+1|0);break L5;break};case 6:{e1(39648);e2(39496);break L5;break};case 0:{x=c[32037]|0;if((x|0)==0){c[32035]=(c[32035]|0)+2}c[32037]=x+250;x=c[14874]|0;w=c[14872]|0;y=eZ(0)|0;if((y|0)>0){z=0}else{break L5}while(1){e_(x,w,0,z);e0(75);z=z+1|0;if((z|0)>=(y|0)){break L5}}break};case 38:{cX(-99999);c[12772]=(c[12772]|0)-1;cU(1,-1);y=c[14874]|0;w=c[14872]|0;x=eZ(0)|0;if((x|0)>0){A=0}else{break L5}while(1){e_(y,w,0,A);e0(75);A=A+1|0;if((A|0)>=(x|0)){break L5}}break};case 30:{e1(39648);e2(38088);break L5;break};case 34:{e2(37768);x=1;while(1){if((c[5692+(x*24|0)>>2]&1|0)==0){e4(x,c[5672+(x*24|0)>>2]|0,128624)}x=x+1|0;if((x|0)>=57){break L5}}break};case 26:{if(((ai()|0)%151|0|0)==62){eP();eR(38272);e0(4e3);de(15,0);break L5}x=c[32018]|0;if((x|0)>(((ai()|0)%10|0)+11|0)){e1(39648);e2(38200);break L5}else{eR(38152);break L5}break};case 32:{e1(39648);e2(37960);break L5;break};case 33:{x=((ai()|0)%23|0|0)==4;do{if(x&(a[47648]|0)==0){if((cx(67)|0)!=0){break}eP();eR(37840);e0(4e3);de(3,0);break L5}}while(0);e1(39648);e2(37808);break L5;break};case 16:{e1(39648);e2(38936);break L5;break};case 15:{e1(39648);e2(38968);break L5;break};case 28:{x=(ai()|0)%10|0;c[32061]=h+1+x+(c[32061]|0);break L5;break};case 17:{c[32051]=h+5+(c[32051]|0);break L5;break};case 35:{if((((ai()|0)%100|0)+1|0)>30){e1(39648);e2(37704);break L5}if((((ai()|0)%100|0)+1|0)>15){eR(37632);break L5}else{eR(37512);eP();cG(22,((ai()|0)%40|0)+31|0);break L5}break};case 14:{e1(39648);e2(39128);break L5;break};case 37:{x=fe(13668)|0;w=x;y=(x|0)==0;if(y){de(30,0);B=0;C=0}else{B=0;C=0}while(1){v=0;l=C;while(1){k=117112+(v*17|0)+B|0;j=a[k]|0;if((j<<24>>24|0)==93|(j<<24>>24|0)==18|(j<<24>>24|0)==1){D=l}else{a[w+(l*6|0)|0]=0;b[w+(l*6|0)+2>>1]=j<<24>>24;b[w+(l*6|0)+4>>1]=b[118288+(v*34|0)+(B<<1)>>1]|0;D=l+1|0}j=68960+(v*442|0)+(B*26|0)|0;E=a[j]|0;if(E<<24>>24==0){F=D}else{a[w+(D*6|0)|0]=1;b[w+(D*6|0)+2>>1]=E<<24>>24;b[w+(D*6|0)+4>>1]=b[120568+(v*34|0)+(B<<1)>>1]|0;F=D+1|0}a[k]=18;a[j]=0;j=v+1|0;if((j|0)<67){v=j;l=F}else{break}}l=B+1|0;if((l|0)<17){B=l;C=F}else{break}}bC(1,1);if((c[26690]|0)==1){a[117689]=1}l=((ai()|0)%15|0)+1|0;v=1;do{a[117112+(v*17|0)+l|0]=1;v=v+1|0;}while((v|0)<66);if((F|0)>0){v=F;do{v=v-1|0;do{if((a[w+(v*6|0)|0]|0)==0){l=100;do{l=l-1|0;G=((ai()|0)%66|0)+1|0;H=((ai()|0)%16|0)+1|0;if((l|0)<=0){break}}while((a[117112+(G*17|0)+H|0]|0)!=1);if((l|0)==0){break}a[117112+(G*17|0)+H|0]=b[w+(v*6|0)+2>>1];b[118288+(G*34|0)+(H<<1)>>1]=b[w+(v*6|0)+4>>1]|0}else{j=((ai()|0)%66|0)+1|0;k=99;E=j;j=((ai()|0)%16|0)+1|0;while(1){if((a[117112+(E*17|0)+j|0]|0)!=18){if((a[68960+(E*442|0)+(j*26|0)|0]|0)==0){I=k;J=E;K=j;break}}L=k-1|0;M=((ai()|0)%66|0)+1|0;N=((ai()|0)%16|0)+1|0;if((L|0)>0){k=L;E=M;j=N}else{I=L;J=M;K=N;break}}if((I|0)==0){break}a[68960+(J*442|0)+(K*26|0)|0]=b[w+(v*6|0)+2>>1];b[120568+(J*34|0)+(K<<1)>>1]=b[w+(v*6|0)+4>>1]|0}}while(0);}while((v|0)>0)}cU(1,-1);bF(0,0,67,17);v=(a[47648]|0)==0;w=0;do{j=0;do{if(v){a[107880+(w*17|0)+j|0]=0}else{a[107880+(w*17|0)+j|0]=a[117112+(w*17|0)+j|0]|0}j=j+1|0;}while((j|0)<17);w=w+1|0;}while((w|0)<67);eX(0,67,0,17);if((a[47648]|0)==0){c[12771]=(c[12771]|0)-1}if(!y){ff(x)}cw();break L5;break};case 36:{w=((ai()|0)%10|0)+6|0;c[32090]=w+(c[32090]|0);w=c[14874]|0;v=c[14872]|0;j=eZ(0)|0;if((j|0)>0){O=0}else{break L5}while(1){e_(w,v,0,O);e0(75);O=O+1|0;if((O|0)>=(j|0)){break L5}}break};case 27:{j=(ai()|0)%10|0;v=h+1+j+(c[32059]|0)|0;c[32059]=v;j=0;while(1){if((j|0)>=26){break}if((a[117080+j|0]|0)==66){P=115;break}else{j=j+1|0}}if((P|0)==115){c[32059]=v*3|0}j=c[14874]|0;w=c[14872]|0;x=eZ(0)|0;if((x|0)>0){Q=0}else{break L5}while(1){e_(j,w,0,Q);e0(75);Q=Q+1|0;if((Q|0)>=(x|0)){break L5}}break};case 18:{c[32052]=h+7+(c[32052]|0);x=c[14874]|0;w=c[14872]|0;j=eZ(0)|0;if((j|0)>0){R=0}else{break L5}while(1){e_(x,w,0,R);e0(75);R=R+1|0;if((R|0)>=(j|0)){break L5}}break};case 3:{e1(39648);e2(39568);break L5;break};case 12:{j=((ai()|0)%11|0)+8|0;if((j|0)>(c[32018]|0)){eR(39240);break L5}else{e1(39648);e2(39368);break L5}break};case 11:{if((a[47648]|0)==0){b6((cd((c[26690]|0)+1|0)|0)+8|0);break L5}e2(39416);j=1;while(1){if((c[5692+(j*24|0)>>2]&1|0)==0){e4(j,c[5672+(j*24|0)>>2]|0,128624)}j=j+1|0;if((j|0)>=57){break L5}}break};case 25:{dT(25,h+32|0,38320,8);break L5;break};case 19:{dT(19,((ai()|0)%10|0)+31|0,38616,4);break L5;break};case 20:{j=c[14874]|0;w=j-1|0;x=(w|0)>1?w:1;w=c[14872]|0;v=w-1|0;y=(v|0)>1?v:1;v=j+1|0;j=(v|0)>65?65:v;v=w+1|0;w=(v|0)>15?15:v;v=eZ(5)|0;if((v|0)>0){E=(x|0)>(j|0);k=(y|0)>(w|0);l=0;do{if(!E){N=x;do{if(!k){M=y;do{L=a[68960+(N*442|0)+(M*26|0)|0]|0;S=a[117112+(N*17|0)+M|0]|0;if((S|0)==18){T=(c[26690]|0)<18|0}else if((S|0)==10|(S|0)==3|(S|0)==2){T=1}else{T=0}if((L|0)==37|(L|0)==23){P=73}else{if((T|0)!=0){P=73}}if((P|0)==73){P=0;e_(N,M,5,l)}M=M+1|0;}while((M|0)<=(w|0))}N=N+1|0;}while((N|0)<=(j|0))}e0(75);l=l+1|0;}while((l|0)<(v|0))}if((x|0)<=(j|0)){v=(y|0)>(w|0);l=x;do{if(!v){k=y;do{E=a[68960+(l*442|0)+(k*26|0)|0]|0;h=117112+(l*17|0)+k|0;N=a[h]|0;M=N<<24>>24;L230:do{if((M|0)==2){b[120568+(l*34|0)+(k<<1)>>1]=b[3610]|0;b6(64);b6(64);b6(64);b6(64);U=N}else if((M|0)==3){b[120568+(l*34|0)+(k<<1)>>1]=b[3382]|0;U=4}else if((M|0)==18){V=(c[26690]|0)<18?1:N;P=86}else if((M|0)==10){do{if((c[32069]|0)>3){if((((ai()|0)%60|0)+1|0)>=30){break}eT(l,k);V=N;P=86;break L230}}while(0);b[118288+(l*34|0)+(k<<1)>>1]=(c[26690]&255)<<24>>24;V=57;P=86}else{V=N;P=86}}while(0);do{if((P|0)==86){P=0;if((E|0)==23){b9(l,k);cb(l,k,200,1)|0;U=V;break}else if((E|0)==37){b9(l,k);cb(l,k,200,1)|0;U=V;break}else{U=V;break}}}while(0);a[h]=U;k=k+1|0;}while((k|0)<=(w|0))}l=l+1|0;}while((l|0)<=(j|0))}j=c[14874]|0;l=c[14872]|0;bF(j-2|0,l-2|0,j+2|0,l+2|0);l=(c[14874]|0)-2|0;j=c[14872]|0;while(1){w=j-2|0;do{do{if((bH(l,w)|0)!=0){if((a[107880+(l*17|0)+w|0]|0)==0){break}if((a[117112+(l*17|0)+w|0]|0)!=18){break}eT(l,w)}}while(0);w=w+1|0;W=c[14872]|0;}while((w|0)<=(W+2|0));w=l+1|0;if((w|0)>((c[14874]|0)+2|0)){break L5}else{l=w;j=W}}break};default:{eS(37424,(g=i,i=i+8|0,c[g>>2]=d,g)|0);i=g;eP();break L5}}}}while(0);eR(39832)}}while(0);cu();eO();i=e;return}function dT(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;g=i;if(b>>>0>38>>>0|(e|0)==0){i=g;return}h=c[14874]|0;j=h-1|0;k=(j|0)>0?j:0;j=c[14872]|0;l=j-1|0;m=(l|0)>0?l:0;l=h+1|0;h=(l|0)>66?66:l;l=j+1|0;j=(l|0)>16?16:l;l=eZ(f)|0;if((l|0)>0){n=(k|0)>(h|0);o=(m|0)>(j|0);p=0;do{if(!n){q=k;do{if(!o){r=m;do{if(!((q|0)==(c[14874]|0)&(r|0)==(c[14872]|0))){e_(q,r,f,p)}r=r+1|0;}while((r|0)<=(j|0))}q=q+1|0;}while((q|0)<=(h|0))}e0(75);p=p+1|0;}while((p|0)<(l|0))}l=(k|0)>(h|0);if(l){i=g;return}p=(m|0)>(j|0);f=k;do{if(!p){o=m;do{if(!((f|0)==(c[14874]|0)&(o|0)==(c[14872]|0))){eT(f,o)}o=o+1|0;}while((o|0)<=(j|0))}f=f+1|0;}while((f|0)<=(h|0));if(l){i=g;return}l=(m|0)>(j|0);f=k;do{if(!l){k=f<<24>>24;p=m;do{o=a[68960+(f*442|0)+(p*26|0)|0]|0;L42:do{if(o<<24>>24!=0){n=o<<24>>24;do{if((o&255)>>>0<=65>>>0){q=a[304+(n*39|0)+b|0]|0;if(q<<24>>24==0){break}eR(128624);eS(c[3040+(q<<24>>24<<2)>>2]|0,(s=i,i=i+8|0,c[s>>2]=c[5672+(n*24|0)>>2],s)|0);i=s;c[26712]=k;c[26710]=p<<24>>24;break L42}}while(0);b9(f,p);eS(e,(s=i,i=i+8|0,c[s>>2]=106792,s)|0);i=s;cb(f,p,d,1)|0;e0(800)}}while(0);p=p+1|0;}while((p|0)<=(j|0))}f=f+1|0;}while((f|0)<=(h|0));i=g;return}function dU(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;f=i;if((c[26690]|0)!=(b[d+8>>1]|0)){g=1;i=f;return g|0}h=d+10|0;if((b[h>>1]|0)>8){b[h>>1]=0}j=d+4|0;k=b[j>>1]|0;l=d+6|0;d=b[l>>1]|0;if((e|0)==0){a[117112+(k*17|0)+d|0]=1;a[107880+(k*17|0)+d|0]=1;eT(k,d);e=b[h>>1]|0;m=(a[11e3+e|0]|0)+k|0;n=(a[10984+e|0]|0)+d|0}else{m=k;n=d}if((c[26690]|0)==0){d=(m|0)<0?0:m;k=(n|0)<0?0:n;o=(d|0)>66?66:d;p=(k|0)>16?16:k}else{k=(m|0)<1?1:m;m=(n|0)<1?1:n;o=(k|0)>65?65:k;p=(m|0)>15?15:m}b[j>>1]=o;b[l>>1]=p;l=cx(67)|0;j=68960+(o*442|0)+(p*26|0)|0;m=a[j]|0;k=m<<24>>24;n=117112+(o*17|0)+p|0;d=a[n]|0;do{if(m<<24>>24==0){q=(l|0)==0;r=0}else{e=b7(o,p,67)|0;h=(l|0)==0;if(h&(m&255)>>>0>56>>>0){a[107880+(o*17|0)+p|0]=a[n]|0;eT(o,p);eS(41832,(s=i,i=i+8|0,c[s>>2]=c[5672+(k*24|0)>>2],s)|0);i=s;eP();dV(o,p);g=0;i=f;return g|0}if(!(h&m<<24>>24==41)){q=h;r=e;break}eS(43632,(s=i,i=i+8|0,c[s>>2]=c[5672+(k*24|0)>>2],s)|0);i=s;eP();dW(o,p);dV(o,p);g=0;i=f;return g|0}}while(0);if((l|0)==0&(c[32051]|0)!=0){eR(34312);eP();dW(o,p);dV(o,p);g=0;i=f;return g|0}if(q&(c[14874]|0)==(o|0)&(c[14872]|0)==(p|0)){eR(30280);eP();dV(o,p);e0(4e3);de(3,0);g=0;i=f;return g|0}if((a[n]|0)==93){eR(27176);eP();dV(o,p);dW(o,p);dV(o,p);g=0;i=f;return g|0}a[n]=93;if(d<<24>>24==18){d=o-1|0;q=p-1|0;l=o+1|0;m=p+1|0;bF(d,q,l,m);e=d;do{d=q;do{do{if((bH(e,d)|0)!=0){if((a[107880+(e*17|0)+d|0]|0)==0){break}if((a[117112+(e*17|0)+d|0]|0)!=18){break}eT(e,d)}}while(0);d=d+1|0;}while((d|0)<=(m|0));e=e+1|0;}while((e|0)<=(l|0))}if((r|0)==0){a[j]=0}else{eS(24424,(s=i,i=i+8|0,c[s>>2]=c[5672+(k*24|0)>>2],s)|0);i=s}a[107880+(o*17|0)+p|0]=a[n]|0;eT(o,p);g=1;i=f;return g|0}function dV(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;f=c[12732]|0;if((f|0)==0){return}g=c[26690]|0;h=0;i=f;L4:while(1){do{if((g|0)==(b[i+8>>1]|0)){if((b[i+4>>1]|0)!=(d|0)){break}if((b[i+6>>1]|0)==(e|0)){break L4}}}while(0);f=c[i>>2]|0;if((f|0)==0){j=17;break}else{h=i;i=f}}if((j|0)==17){return}a[117112+(d*17|0)+e|0]=1;a[107880+(d*17|0)+e|0]=1;eT(d,e);c[32089]=(c[32089]|0)-1;e=c[i>>2]|0;if((i|0)==(c[12732]|0)){c[12732]=e}if((h|0)!=0){c[h>>2]=e}if((i|0)==(c[12774]|0)){c[12774]=e}ff(i);return}function dW(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;f=cx(67)|0;if((c[32061]|0)!=0){c[32061]=1}if((c[32051]|0)!=0){c[32051]=1}g=b-2|0;h=d-2|0;j=b+3|0;b=d+3|0;if((c[26690]|0)==0){k=(b|0)>17?17:b;l=(h|0)<0?0:h;m=(j|0)>67?67:j;n=(g|0)<0?0:g}else{k=(b|0)>16?16:b;l=(h|0)<1?1:h;m=(j|0)>66?66:j;n=(g|0)<1?1:g}if((n|0)<(m|0)){g=(l|0)<(k|0);j=(f|0)==0;f=n;do{L15:do{if(g){if(j){o=l}else{h=l;while(1){a[117112+(f*17|0)+h|0]=1;b=68960+(f*442|0)+(h*26|0)|0;if((b7(f,h,67)|0)==0){a[b]=0}else{eS(21992,(p=i,i=i+8|0,c[p>>2]=c[5672+((a[b]|0)*24|0)>>2],p)|0);i=p}eT(f,h);h=h+1|0;if((h|0)>=(k|0)){break L15}}}do{a[117112+(f*17|0)+o|0]=1;h=68960+(f*442|0)+(o*26|0)|0;if((b7(f,o,67)|0)==0){a[h]=0}else{eS(21992,(p=i,i=i+8|0,c[p>>2]=c[5672+((a[h]|0)*24|0)>>2],p)|0);i=p}eT(f,o);if((c[14874]|0)==(f|0)&(c[14872]|0)==(o|0)){eP();eR(19848);e0(3e3);de(28,0)}o=o+1|0;}while((o|0)<(k|0))}}while(0);f=f+1|0;}while((f|0)<(m|0))}f=n-1|0;n=l-1|0;bF(f,n,m,k);l=m+1|0;if((f|0)>=(l|0)){i=e;return}m=k+1|0;if((n|0)<(m|0)){q=f}else{i=e;return}do{f=n;do{do{if((bH(q,f)|0)!=0){if((a[107880+(q*17|0)+f|0]|0)==0){break}if((a[117112+(q*17|0)+f|0]|0)!=18){break}eT(q,f)}}while(0);f=f+1|0;}while((f|0)<(m|0));q=q+1|0;}while((q|0)<(l|0));i=e;return}function dX(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=fe(16)|0;h=g;if((g|0)==0){de(27,0)}b[g+4>>1]=a;b[g+6>>1]=d;b[g+8>>1]=c[26690];b[g+10>>1]=e;b[g+12>>1]=f;c[g>>2]=c[12732];c[12732]=h;c[32089]=(c[32089]|0)+1;dU(h,1)|0;e0(500);return}function dY(){var a=0,d=0,e=0;a=c[12732]|0;if((a|0)==0){return}else{d=a}do{c[12774]=c[d>>2];do{if((b[d+8>>1]|0)==(c[26690]|0)){a=d+12|0;e=(b[a>>1]|0)-1&65535;b[a>>1]=e;if(e<<16>>16<0){dV(b[d+4>>1]|0,b[d+6>>1]|0);break}e=ai()|0;a=c[32017]>>1;if((((e|0)%(((a|0)<7?7:a)|0)|0)+1|0)<3){b[d+10>>1]=((ai()|0)%8|0)+1}dU(d,0)|0}}while(0);d=c[12774]|0;}while((d|0)!=0);return}function dZ(){var a=0,b=0;a=c[12732]|0;if((a|0)==0){c[12732]=0;return}else{b=a}while(1){a=c[b>>2]|0;ff(b);if((a|0)==0){break}else{b=a}}c[12732]=0;return}function d_(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;i=i+8|0;d=b|0;e=c[12732]|0;c[d>>2]=0;if((e|0)!=0){f=e;e=0;do{e=e+1|0;c[d>>2]=e;f=c[f>>2]|0;}while((f|0)!=0)}c7(a,d,4);d=c[12732]|0;if((d|0)==0){i=b;return}else{g=d}do{c7(a,g,16);g=c[g>>2]|0;}while((g|0)!=0);i=b;return}function d$(a){a=a|0;var b=0,d=0,e=0;b=i;i=i+8|0;d=b|0;c[12732]=0;c8(a,d,4);if((c[d>>2]|0)<=0){i=b;return}do{e=fe(16)|0;c8(a,e,16);c[e>>2]=c[12732];c[12732]=e;e=(c[d>>2]|0)-1|0;c[d>>2]=e;}while((e|0)>0);i=b;return}function d0(){var b=0,d=0,e=0,f=0,g=0,h=0;b=i;i=i+112|0;d=b|0;e=b+56|0;f=0;do{if((a[9866+(f*12|0)|0]|0)!=0){g=a[9864+(f*12|0)|0]|0;if((g|0)==56){aI(d|0,41544,(h=i,i=i+8|0,c[h>>2]=(c[4136+(a[9865+(f*12|0)|0]<<2)>>2]|0)+1,h)|0)|0;i=h}else if((g|0)==55){aI(d|0,43568,(h=i,i=i+8|0,c[h>>2]=(c[3856+(a[9865+(f*12|0)|0]<<2)>>2]|0)+1,h)|0)|0;i=h}else{fm(d|0,c[4792+(g<<2)>>2]|0)|0}aI(e|0,34256,(h=i,i=i+8|0,c[h>>2]=(c[9856+(f*12|0)>>2]|0)*10|0,h)|0)|0;i=h;e4(f,d,e)}f=f+1|0;}while((f|0)<93);e4(-1,30272,128528);i=b;return}function d1(){var a=0,b=0;a=i;c[16930]=1;fb(40432);fb(40272);fb(40128);if((c[14926]|0)>0){eR(24344);eP();eS(21912,(b=i,i=i+8|0,c[b>>2]=c[14926],b)|0);i=b;eR(19776);c[16930]=0;i=a;return}else{e2(17424);d0();i=a;return}}function d2(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;d=i;if((b|0)>92){eR(40568);e0(2200);d1();i=d;return}e=9866+(b*12|0)|0;if((a[e]|0)<1){eR(40568);e0(2200);d1();i=d;return}if((cO()|0)!=0){eR(40648);e0(2200);d1();i=d;return}f=c[32024]|0;g=9856+(b*12|0)|0;h=c[g>>2]|0;if((f|0)<(h*10|0|0)){eR(40728);e0(2200);d1();i=d;return}j=c[9860+(b*12|0)>>2]|0;k=9865+(b*12|0)|0;if((j|0)==0){l=h;m=f}else{c[j+(a[k]<<2)>>2]=1;l=c[g>>2]|0;m=c[32024]|0}c[32024]=m+(l*-10|0);a[e]=(a[e]|0)-1;cI(a[9864+(b*12|0)|0]|0,a[k]|0)|0;if((a[e]|0)==0){eS(41368,(e=i,i=i+8|0,c[e>>2]=128528,e)|0);i=e}e0(1001);d1();i=d;return}function d3(){if((a[127576]|0)==0){e4(97,15064,45808)}if((a[127577]|0)==0){e4(98,43904,42256)}if((a[127578]|0)==0){e4(99,41224,45808)}if((a[127579]|0)==0){e4(100,40064,39352)}if((a[127580]|0)==0){e4(101,38248,45808)}if((a[127581]|0)==0){e4(102,37616,45808)}if((a[127582]|0)==0){e4(103,36856,45808)}if((a[127583]|0)!=0){e4(-1,30272,128528);return}e4(104,35864,35048);e4(-1,30272,128528);return}function d4(){c[16930]=1;fb(41696);fb(41560);fb(41432);e2(34456);d3();return}function d5(b){b=b|0;var d=0,e=0,f=0,g=0;d=c[32024]|0;if((d|0)<250){eR(40728);e0(2200);c[16930]=1;fb(41696);fb(41560);fb(41432);e2(34456);d3();return}e=b-97|0;f=127576+e|0;if((a[f]|0)!=0){eR(33872);e0(1e3);c[16930]=1;fb(41696);fb(41560);fb(41432);e2(34456);d3();return}if((b|0)>=105){c[16930]=1;fb(41696);fb(41560);fb(41432);e2(34456);d3();return}c[32024]=d-250;L12:do{switch(b|0){case 100:{if((a[127578]|0)==0){eR(31832);c[32024]=(c[32024]|0)+250;g=-1e4;break L12}else{eR(31472);c[32017]=(c[32017]|0)+2;g=0;break L12}break};case 101:{c[32021]=(c[32021]|0)+3;eR(31032);g=0;break};case 98:{if((a[127576]|0)==0){eR(32936);c[32024]=(c[32024]|0)+250;g=-1e4;break L12}else{eR(32568);c[32016]=(c[32016]|0)+2;c[32019]=(c[32019]|0)+2;g=0;break L12}break};case 104:{c[32017]=(c[32017]|0)+1;eR(30008);g=0;break};case 102:{c[32018]=(c[32018]|0)+2;eR(30672);g=0;break};case 97:{c[32016]=(c[32016]|0)+2;c[32019]=(c[32019]|0)+1;eR(33416);g=0;break};case 103:{c[32020]=(c[32020]|0)+3;eR(30376);g=0;break};case 99:{c[32017]=(c[32017]|0)+2;eR(32200);g=0;break};default:{g=0}}}while(0);b=((a[11032+e|0]|0)*100|0)+g|0;if((b|0)>0){c[31476]=(c[31476]|0)+b;a[f]=(a[f]|0)+1;c[32023]=c[32022];c[32032]=c[32031];if((c[32044]|0)!=0){c[32044]=1}if((c[32046]|0)!=0){c[32046]=1}cX(b)}e0(1e3);c[16930]=1;fb(41696);fb(41560);fb(41432);e2(34456);d3();return}function d6(a){a=a|0;var b=0,d=0;b=i;if((a|0)==121){fb(29560);e0(1e3);a=(c[31476]|0)*7|0;d=((a|0)%100|0)-a+25e4|0;fc(29176,(a=i,i=i+1|0,i=i+7&-8,c[a>>2]=0,a)|0);i=a;fc(28872,(a=i,i=i+8|0,c[a>>2]=(d|0)<5e4?5e4:d,a)|0);i=a;fb(28600);c[11902]=0;e2(28320);e4(121,28080,128528);e4(110,27792,128528);i=b;return}else{eu();i=b;return}}function d7(b){b=b|0;var d=0,e=0,f=0,g=0;if((b|0)==121){d=(c[31476]|0)*7|0;e=((d|0)%100|0)-d+25e4|0;c[32024]=((e|0)<5e4?5e4:e)+(c[32024]|0);e=0;while(1){if((e|0)>=26){break}f=117080+e|0;if((a[f]|0)==23){g=5;break}else{e=e+1|0}}if((g|0)==5){a[f]=1}c[32053]=0;eu();return}else if((b|0)==110){eR(27488);e0(500);eu();return}else{eu();return}}function d8(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;i=i+24|0;if((b|0)==115){e2(25160);e=d|0;f=0;do{g=117080+f|0;switch(a[g]|0){case 23:case 71:case 73:case 72:case 74:{aI(e|0,27272,(h=i,i=i+8|0,c[h>>2]=c[126392+(f<<2)>>2],h)|0)|0;i=h;e4(f+97|0,c[4792+(a[g]<<2)>>2]|0,e);break};default:{}}f=f+1|0;}while((f|0)<26);e4(42,26904,128528);e4(0,26520,128528);i=d;return}else if((b|0)==119){fb(26184);e1(25864);e2(25328);i=d;return}else if((b|0)==100){fb(26184);e1(25864);e2(25592);i=d;return}else{i=d;return}}function d9(a){a=a|0;var b=0;do{if((a|0)<0){b=0}else{if((c[32024]|0)>=(a|0)){b=a;break}eR(24896);e0(2e3);b=0}}while(0);c[32024]=(c[32024]|0)-b;c[32030]=(c[32030]|0)+b;eu();return}function ea(a){a=a|0;var b=0;do{if((a|0)<0){b=0}else{if((c[32030]|0)>=(a|0)){b=a;break}eR(24712);e0(2e3);b=0}}while(0);c[32024]=(c[32024]|0)+b;c[32030]=(c[32030]|0)-b;eu();return}function eb(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;i=i+24|0;e=d|0;if((b|0)==42){f=0;do{g=126392+(f<<2)|0;h=c[g>>2]|0;if((h|0)!=0){j=117080+f|0;if((a[j]|0)==23){c[32053]=0}c[32024]=(c[32024]|0)+h;a[j]=1;c[g>>2]=0}f=f+1|0;}while((f|0)<26);eu();i=d;return}else if((b|0)==0){eu();i=d;return}else{f=b-97|0;g=126392+(f<<2)|0;j=c[g>>2]|0;if((j|0)==0){eS(24480,(k=i,i=i+8|0,c[k>>2]=b,k)|0);i=k;e0(2e3)}else{b=117080+f|0;if((a[b]|0)==23){c[32053]=0}c[32024]=(c[32024]|0)+j;a[b]=1;c[g>>2]=0}e2(25160);g=e|0;e=0;do{b=117080+e|0;switch(a[b]|0){case 23:case 71:case 73:case 72:case 74:{aI(g|0,27272,(k=i,i=i+8|0,c[k>>2]=c[126392+(e<<2)>>2],k)|0)|0;i=k;e4(e+97|0,c[4792+(a[b]<<2)>>2]|0,g);break};default:{}}e=e+1|0;}while((e|0)<26);e4(42,26904,128528);e4(0,26520,128528);i=d;return}}function ec(){ed(24176);return}function ed(d){d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;e=i;c[16930]=1;fb(d);if((c[14926]|0)>0){eR(43928);eP();eS(43672,(f=i,i=i+8|0,c[f>>2]=c[14926],f)|0);i=f;eR(43328);eR(43120);c[16930]=0;i=e;return}d=c[32030]|0;do{if((d|0)<0){c[32030]=0}else{if((d-1|0)>>>0>=999999>>>0){break}g=(c[31476]|0)-(c[26692]|0)|0;if((g|0)<=99){break}h=(g|0)/100|0;g=d;do{h=h-1|0;g=((g|0)/877|0)+g|0;}while((h|0)>0&(g|0)<1e6);c[32030]=g}}while(0);d=c[31476]|0;c[26692]=d-((d|0)%100|0);if((c[26690]|0)==8){c[32056]=0}h=d*7|0;d=((h|0)%100|0)-h+25e4|0;L17:do{if((d|0)<5e4){h=0;j=0;while(1){k=a[117080+h|0]|0;L29:do{switch(k<<24>>24|0){case 23:case 71:case 73:case 72:case 74:{if(k<<24>>24==23){c[126392+(h<<2)>>2]=5e4;l=h;break L29}else{c[126392+(h<<2)>>2]=(b[117024+(h<<1)>>1]|0)*100|0;l=j;break L29}break};default:{c[126392+(h<<2)>>2]=0;l=j}}}while(0);k=h+1|0;if((k|0)<26){h=k;j=l}else{m=l;break L17}}}else{j=0;h=0;while(1){g=a[117080+j|0]|0;L20:do{switch(g<<24>>24|0){case 23:case 71:case 73:case 72:case 74:{if(g<<24>>24==23){c[126392+(j<<2)>>2]=d;n=j;break L20}else{c[126392+(j<<2)>>2]=(b[117024+(j<<1)>>1]|0)*100|0;n=h;break L20}break};default:{c[126392+(j<<2)>>2]=0;n=h}}}while(0);g=j+1|0;if((g|0)<26){j=g;h=n}else{m=n;break L17}}}}while(0);if((m|0)==0){c[11902]=0;eu();c[16930]=0;i=e;return}else{fc(42960,(f=i,i=i+8|0,c[f>>2]=c[1221],f)|0);i=f;fb(42856);fb(42752);c[11902]=0;e2(42688);e4(121,28080,128528);e4(110,27792,128528);c[16930]=0;i=e;return}}function ee(){ed(23920);return}function ef(){var a=0,b=0,d=0;a=c[32030]|0;do{if((a|0)<0){c[32030]=0}else{if((a-1|0)>>>0>=999999>>>0){break}b=(c[31476]|0)-(c[26692]|0)|0;if((b|0)<=99){break}d=(b|0)/100|0;b=a;do{d=d-1|0;b=((b|0)/877|0)+b|0;}while((d|0)>0&(b|0)<1e6);c[32030]=b}}while(0);a=c[31476]|0;c[26692]=a-((a|0)%100|0);return}function eg(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;if((b-71|0)>>>0<4>>>0){e=d*20|0;return e|0}f=(d|0)!=0;if((d|0)>-1){g=0;while(1){h=a[9864+(g*12|0)|0]|0;if((h<<24>>24|0)==(b|0)){break}i=g+1|0;if((i|0)<93){g=i}else{e=-1;j=26;break}}if((j|0)==26){return e|0}do{if((h-55&255)>>>0<2>>>0){k=c[9856+((g+d|0)*12|0)>>2]<<1}else{i=c[9856+(g*12|0)>>2]<<1;if(f&(i|0)<5e5){l=d;m=i}else{k=i;break}while(1){if((l|0)>0){n=((m*14|0)+938|0)/10|0;o=l-1|0}else{n=(m*10|0|0)/14|0;o=l+1|0}if((o|0)!=0&(n|0)<5e5){l=o;m=n}else{k=n;break}}}}while(0);e=(k|0)==0?1:k;return e|0}else{k=0;while(1){p=a[9864+(k*12|0)|0]|0;if((p<<24>>24|0)==(b|0)){break}n=k+1|0;if((n|0)<93){k=n}else{e=-1;j=29;break}}if((j|0)==29){return e|0}do{if((p-55&255)>>>0<2>>>0){q=c[9856+((k+d|0)*12|0)>>2]<<1}else{j=c[9856+(k*12|0)>>2]|0;if(f&(j|0)<5e5){r=d;s=j}else{q=j;break}while(1){if((r|0)>0){t=((s*14|0)+938|0)/10|0;u=r-1|0}else{t=(s*10|0|0)/14|0;u=r+1|0}if((u|0)!=0&(t|0)<5e5){r=u;s=t}else{q=t;break}}}}while(0);e=(q|0)==0?1:q;return e|0}return 0}function eh(){var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;d=i;i=i+24|0;e=d|0;f=0;do{g=a[117080+f|0]|0;h=g<<24>>24;j=b[117024+(f<<1)>>1]|0;if((g<<24>>24|0)==55){if((c[51104+(j<<2)>>2]|0)!=0){k=6}}else if((g<<24>>24|0)==56){if((c[59344+(j<<2)>>2]|0)!=0){k=6}}else if((g<<24>>24|0)==43){if((a[59328]|0)==0){k=6}}else if((g<<24>>24|0)!=1){k=6}do{if((k|0)==6){k=0;g=eg(h,j)|0;if((g|0)<=-1){break}aI(e|0,27272,(l=i,i=i+8|0,c[l>>2]=g,l)|0)|0;i=l;e4(f+97|0,dw(f)|0,e)}}while(0);f=f+1|0;}while((f|0)<26);e4(-1,30272,128528);i=d;return}function ei(){c[11902]=0;fb(44944);fb(44768);fb(44624);fb(44440);fb(44208);e2(23696);eh();return}function ej(d){d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;f=d<<24>>24;d=f-97|0;g=117080+d|0;h=a[g]|0;j=h<<24>>24;k=b[117024+(d<<1)>>1]|0;do{if((h<<24>>24|0)==55){if((c[51104+(k<<2)>>2]|0)!=0){l=9;break}eR(45168)}else if((h<<24>>24|0)==56){if((c[59344+(k<<2)>>2]|0)!=0){l=9;break}eR(45168)}else if((h<<24>>24|0)==43){if((a[59328]|0)==0){l=9;break}eR(23528)}else if((h<<24>>24|0)==1){eS(23336,(m=i,i=i+8|0,c[m>>2]=f,m)|0);i=m}else{l=9}}while(0);do{if((l|0)==9){f=eg(j,k)|0;if((f|0)<=-1){eR(23120);break}c[32024]=(c[32024]|0)+f;if((c[32036]|0)==(d|0)){c[32036]=-1}if((c[32038]|0)==(d|0)){c[32038]=-1}if((c[32079]|0)==(d|0)){c[32079]=-1}cK(j,k);a[g]=1;cu()}}while(0);c[11902]=0;fb(44944);fb(44768);fb(44624);fb(44440);fb(44208);e2(23696);eh();i=e;return}function ek(){var b=0,d=0,e=0;b=i;c[16930]=1;if((c[14926]|0)!=0&(a[127592]|0)!=0){eR(22880);c[16930]=0;i=b;return}fb(22448);d=c[14926]|0;if((d|0)>0){fc(22224,(e=i,i=i+8|0,c[e>>2]=d,e)|0);i=e}else{fb(22032)}c[11902]=0;e2(21776);e4(112,45328,128528);e4(-1,30272,128528);i=b;return}function el(a){a=a|0;if((a|0)!=112){return}fb(26184);e1(25864);e2(21568);return}function em(a){a=a|0;var b=0;do{if((a|0)<0){b=0}else{if((c[32024]|0)>=(a|0)){b=a;break}eR(24896);b=0}}while(0);a=dc(b)|0;c[32024]=(c[32024]|0)-a;e0(500);ek();return}function en(){var b=0,d=0,e=0;b=i;i=i+24|0;d=b|0;if((a[127536]|0)==0){aI(d|0,21312,(e=i,i=i+8|0,c[e>>2]=100,e)|0)|0;i=e;e4(97,13480,d)}if((a[127537]|0)==0){aI(d|0,21312,(e=i,i=i+8|0,c[e>>2]=250,e)|0)|0;i=e;e4(98,46040,d)}if((a[127538]|0)==0){aI(d|0,21312,(e=i,i=i+8|0,c[e>>2]=500,e)|0)|0;i=e;e4(99,45824,d)}if((a[127539]|0)==0){aI(d|0,21312,(e=i,i=i+8|0,c[e>>2]=1e3,e)|0)|0;i=e;e4(100,45664,d)}if((a[127540]|0)!=0){e4(-1,30272,128528);i=b;return}aI(d|0,21312,(e=i,i=i+8|0,c[e>>2]=5e3,e)|0)|0;i=e;e4(101,45504,d);e4(-1,30272,128528);i=b;return}function eo(){c[16930]=1;fb(13832);fb(13680);e2(21200);en();return}function ep(b){b=b|0;var d=0,e=0,f=0;d=b-97|0;b=127536+d|0;do{if((a[b]|0)==0){e=c[47532+(d<<4)>>2]|0;if((c[32024]|0)<(e|0)){eR(14248);e0(1200);break}f=c[47540+(d<<4)>>2]|0;if((cO()|0)==0){eR(14384);cI(f,0)|0;c[32024]=(c[32024]|0)-e;a[b]=(a[b]|0)+1;e0(1e3);break}else{eR(14600);break}}else{eR(14008);e0(2200)}}while(0);c[16930]=1;fb(13832);fb(13680);e2(21200);en();return}function eq(){var d=0,e=0,f=0,g=0,h=0;d=i;c[16930]=1;e2(21040);e=0;while(1){f=117080+e|0;if((a[f]|0)==56){if((b[117024+(e<<1)>>1]|0)==21){g=4;break}}h=e+1|0;if((h|0)<26){e=h}else{g=11;break}}if((g|0)==4){a[f]=1;fb(20776);fb(20656);fb(20424);e0(1e3);if((c[31476]|0)<=4e4){fb(18640);fb(18400);e0(6e3);fb(18184);e0(1e3);fb(17976);e0(1e3);fb(17976);e0(1e3);fb(17736);fb(17440);eP();e0(5e3);e4(8,17208,128528);i=d;return}fb(20176);fb(19888);if((a[3848]|0)==1){fb(19624)}else{fb(19400)}fb(19104);e0(5e3);e4(14,18928,128528);i=d;return}else if((g|0)==11){fb(16968);fb(16688);if((c[31476]|0)<=4e4){fb(15816);fc(15496,(g=i,i=i+8|0,c[g>>2]=(40099-(c[31476]|0)|0)/100|0,g)|0);i=g;fb(15288);fb(15088);fb(14816);e4(-1,30272,128528);c[16930]=0;i=d;return}fb(16456);fb(16240);fb(16e3);if((a[3848]|0)==1){fb(19624)}else{fb(19400)}fb(19104);e0(5e3);e4(14,18928,128528);i=d;return}}function er(a){a=a|0;de(a,0);return}function es(a){a=a|0;var b=0;b=0;do{c7(a,9866+(b*12|0)|0,1);b=b+1|0;}while((b|0)<93);c7(a,127576,8);c7(a,106768,4);c7(a,127536,5);return}function et(a){a=a|0;var b=0;b=0;do{c8(a,9866+(b*12|0)|0,1);b=b+1|0;}while((b|0)<93);c8(a,127576,8);c8(a,106768,4);c8(a,127536,5);return}function eu(){var a=0,b=0,d=0;a=i;b=c[32030]|0;fc(42560,(d=i,i=i+16|0,c[d>>2]=b,c[d+8>>2]=(b|0)==1?128528:42440,d)|0);i=d;if(((c[32024]|0)+(c[32030]|0)|0)>499999){fb(42272)}e2(42200);e4(100,42104,128528);e4(119,41928,128528);e4(115,41864,128528);e4(-1,30272,128528);i=a;return}function ev(a){a=a|0;c[31890]=a;return}function ew(){return c[32069]|0}function ex(b){b=b|0;var d=0,e=0;d=i;a[106624]=0;a[106576]=0;e0(100);bw();eF();if((da()|0)==-1){eS(39800,(e=i,i=i+1|0,i=i+7&-8,c[e>>2]=0,e)|0);i=e;eS(43088,(e=i,i=i+8|0,c[e>>2]=8344,e)|0);i=e;dd()}aI(106856,34144,(e=i,i=i+16|0,c[e>>2]=8344,c[e+8>>2]=30216,e)|0)|0;i=e;aI(126504,34144,(e=i,i=i+16|0,c[e>>2]=8344,c[e+8>>2]=27096,e)|0)|0;i=e;do{if(!((a[59320]|0)!=0|b<<24>>24==0)){a[127600]=b;cs();bG(0);if((a[67712]|0)!=0){break}b0()}}while(0);eG(c[31890]|0);eU();c[11902]=0;a[122864]=0;az(24312);i=d;return}function ey(d){d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;e=i;switch(d|0){case 1:{if((a[47648]|0)!=0){bv()}c[11902]=0;i=e;return};case 5:{bl(2);i=e;return};case 6:{cv(1)|0;i=e;return};case 7:{bl(1);i=e;return};case 29:{c[11902]=0;a[67728]=1;dn();i=e;return};case 31:{c[11902]=0;dt(0);a[67728]=1;i=e;return};case 32:{c[11902]=0;b$();a[67728]=1;i=e;return};case 33:{eR(45792);if((c4()|0)==0){eR(43880)}a[47648]=1;de(2,0);i=e;return};case 34:{c[11902]=0;if((a[47648]|0)!=0){e1(42248);e2(41208);i=e;return}if((c[32026]|0)>9){bR(1);i=e;return}else{eR(40024);i=e;return}break};case 35:{c[11902]=0;d=(c[14872]|0)-1|0;f=0;while(1){g=(d|0)<0?0:d;if((g|0)>16){h=f;break}j=c[14874]|0;k=j-1|0;l=f;m=j;while(1){j=(k|0)<0?0:k;if((j|0)>66){n=l;break}o=117112+(j*17|0)+g|0;switch(a[o]|0){case 90:case 89:case 87:case 11:case 8:case 14:{eR(39344);eR(c[4792+(a[o]<<2)>>2]|0);p=l+1|0;q=c[14874]|0;break};default:{p=l;q=m}}o=j+1|0;if((o|0)<(q+2|0)){k=o;l=p;m=q}else{n=p;break}}m=g+1|0;if((m|0)<((c[14872]|0)+2|0)){d=m;f=n}else{h=n;break}}if((h|0)!=0){i=e;return}eR(38224);i=e;return};case 19:{c[11902]=0;a[67728]=1;i=e;return};case 25:{c[11902]=0;h=0;n=0;while(1){if((c[50936+(h<<2)>>2]|0)==0){r=n}else{e4(h,c[2880+(h<<2)>>2]|0,128520);r=n+1|0}f=h+1|0;if((f|0)<39){h=f;n=r}else{break}}if((r|0)>0){e4(-1,19752,128520);e2(17400);i=e;return}else{eR(15016);i=e;return}break};case 28:{c[11902]=0;bs();i=e;return};case 8:{cv(3)|0;i=e;return};case 9:{bl(3);i=e;return};case 10:{cv(5)|0;i=e;return};case 11:{bl(5);i=e;return};case 12:{cv(6)|0;i=e;return};case 13:{bl(6);i=e;return};case 14:{cv(7)|0;i=e;return};case 15:{bl(7);i=e;return};case 16:{cv(8)|0;i=e;return};case 17:{bl(8);i=e;return};case 18:{if((c[11902]|0)==0){i=e;return}a[144]=1;i=e;return};case 2:{cv(4)|0;i=e;return};case 3:{bl(4);i=e;return};case 4:{cv(2)|0;i=e;return};case 36:{c[11902]=0;a[67728]=1;cz(37e7);cu();eM();eW();i=e;return};case 38:{c[11902]=0;a[67728]=1;if((a[47648]|0)==0){eR(36832);a[47648]=1;i=e;return}else{eR(37584);a[47648]=0;i=e;return}break};case 39:{c[11902]=0;a[67728]=1;if((a[47648]|0)==0){a[47648]=1}c[32016]=70;c[32017]=70;c[32018]=70;c[32019]=70;c[32020]=70;c[32021]=70;a[117080]=1;a[117081]=1;cI(48,50)|0;cI(43,25)|0;r=0;while(1){if((a[117080+r|0]|0)==43){if((b[117024+(r<<1)>>1]|0)==25){s=62;break}}n=r+1|0;if((n|0)<26){r=n}else{break}}if((s|0)==62){c[32038]=r}c[32076]=1;c[32079]=-1;c[32036]=-1;cz(37e7);c[32060]=(c[32060]|0)+25e3;r=0;do{c[50936+(r<<2)>>2]=1;r=r+1|0;}while((r|0)<39);c[14836]=1;c[14837]=1;c[14838]=1;c[14839]=1;c[14840]=1;c[14841]=1;c[14842]=1;c[14843]=1;c[14844]=1;c[14845]=1;c[14846]=1;c[14847]=1;c[14848]=1;c[14849]=1;c[14850]=1;c[14851]=1;c[14852]=1;c[14853]=1;c[14854]=1;c[14855]=1;c[14856]=1;c[14857]=1;c[14858]=1;c[14859]=1;c[14860]=1;c[14861]=1;c[14862]=1;c[14863]=1;r=0;while(1){c[59344+(r<<2)>>2]=1;s=r+1|0;if((s|0)<35){r=s}else{t=0;break}}while(1){if((fj(c[3856+(t<<2)>>2]|0)|0)>>>0>2>>>0){a[117112+(t*17|0)|0]=55;b[118288+(t*34|0)>>1]=t}r=t+1|0;if((r|0)<28){t=r}else{u=0;break}}do{if((fj(c[4136+(u<<2)>>2]|0)|0)>>>0>2>>>0){t=66-u|0;a[117112+(t*17|0)|0]=56;b[118288+(t*34|0)>>1]=u}u=u+1|0;}while((u|0)<35);fl(118290,0,32)|0;a[117113]=2;a[117114]=3;a[117115]=4;a[117116]=5;a[117117]=6;a[117118]=7;a[117119]=8;a[117120]=9;a[117121]=10;a[117122]=11;a[117123]=12;a[117124]=13;a[117125]=14;a[117126]=15;a[117127]=16;a[117128]=17;u=1;t=18;while(1){a[117128+(u*17|0)|0]=t;b[118320+(u*34|0)>>1]=0;r=u+1|0;if((r|0)<67){u=r;t=t+1|0}else{break}}fl(120534,0,30)|0;a[118235]=84;a[118236]=85;a[118237]=86;a[118238]=87;a[118239]=88;a[118240]=89;a[118241]=90;a[118242]=91;a[118243]=92;a[118244]=93;a[118245]=94;a[118246]=95;a[118247]=96;a[118248]=97;a[118249]=98;t=0;do{u=0;do{a[107880+(u*17|0)+t|0]=a[117112+(u*17|0)+t|0]|0;u=u+1|0;}while((u|0)<67);t=t+1|0;}while((t|0)<17);c[32024]=(c[32024]|0)+25e4;cu();eM();eW();i=e;return};case 40:{c[11902]=0;if((c[32079]|0)!=-1){c[32079]=-1;eR(35840);cu();eM();i=e;return}if((c[32036]|0)==-1){eR(34424);i=e;return}else{c[32036]=-1;eR(35024);cu();eM();i=e;return}break};case 41:{t=cT()|0;u=(cT()|0)==1;eS(33816,(v=i,i=i+16|0,c[v>>2]=t,c[v+8>>2]=u?128520:33408,v)|0);i=v;a[67728]=1;c[11902]=0;i=e;return};case 42:{c[11902]=0;u=c[32069]|0;eS(32864,(v=i,i=i+32|0,c[v>>2]=32560,c[v+8>>2]=32192,c[v+16>>2]=31816,c[v+24>>2]=u,v)|0);i=v;if((a[47648]|0)!=0){eR(31456)}a[67728]=1;if((a[127592]|0)!=0){eR(31016)}eR(11040);i=e;return};case 44:{c[11902]=0;eW();a[67728]=1;i=e;return};case 45:{u=c[14926]|0;if((u|0)>0){eS(30632,(v=i,i=i+8|0,c[v>>2]=u,v)|0);i=v;i=e;return}else{eR(30344);i=e;return}break};default:{eR(29984);i=e;return}}}function ez(a){a=a|0;if(a>>>0>20>>>0){eR(29552);return}else{c[14874]=(((ai()|0)%65|0)<<24)+16777216>>24;c[14872]=(((ai()|0)%15|0)<<24)+16777216>>24;bG(a);cw();eX(0,67,0,17);eO();return}}function eA(){var b=0;if((a[67728]|0)!=0){return}if((a[e3()|0]|0)!=0){return}cV();do{if((c[32062]|0)==0){b=(a[4080]|0)-1&255;a[4080]=b;if(b<<24>>24>=1){break}b=c[26690]|0;a[4080]=120-(b<<2);bB(cd(b)|0)|0}}while(0);if((a[127544]|0)==0){co()}else{a[127544]=0}if((a[122848]|0)==0){if((c[32063]|0)!=0){cg()}cg()}if(a[144]|0){a[144]=0}else{eV(c[14874]|0,c[14872]|0)}a[122848]=0;a[122856]=0;return}function eB(b){b=b|0;a[67728]=0;ey(b);eA();return(a[67728]|0)==0|0}function eC(){c[12730]=0;return}function eD(){var a=0;a=(c[12730]|0)+1|0;c[12730]=(a|0)>21?0:a;return}function eE(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;f=i;i=i+40|0;g=f|0;c[g>>2]=6;c[g+4>>2]=4;c[g+8>>2]=8;c[g+12>>2]=2;c[g+16>>2]=10;c[g+20>>2]=12;c[g+24>>2]=14;c[g+28>>2]=16;c[g+32>>2]=0;h=1;j=6;while(1){if((j|0)==(e|0)){break}k=c[g+(h<<2)>>2]|0;h=h+1|0;j=k}c[b>>2]=(a[11e3+h|0]|0)+(c[14874]|0);c[d>>2]=(a[10984+h|0]|0)+(c[14872]|0);i=f;return h|0}function eF(){aY(118280)|0;aJ(c[29570]|0);return}function eG(d){d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;do{if((a[59320]|0)==0){if((db()|0)==0){if((d|0)<=-1){e=7;break}c[32069]=d;f=d;break}else{g=c[32069]|0;if((g|0)>=(d|0)&(a[47648]|0)==0){f=g;break}c[32069]=d;f=d;break}}else{e=7}}while(0);if((e|0)==7){f=c[32069]|0}if((f|0)==0){return}e=f+6|0;d=f+10|0;g=f+7|0;h=0;do{i=5684+(h*24|0)|0;j=(Z(b[i>>1]|0,e)|0)+1|0;b[i>>1]=(j|0)>196607?32767:((j|0)/6|0)&65535;j=5678+(h*24|0)|0;i=(Z(a[j]|0,e)|0)+1|0;a[j]=(i|0)>639?127:((i|0)/5|0)&255;i=5682+(h*24|0)|0;j=((b[i>>1]|0)*10|0|0)/(d|0)|0;b[i>>1]=(j|0)>32767?32767:j&65535;j=5677+(h*24|0)|0;i=(a[j]|0)-f|0;a[j]=(i|0)<-127?-127:i&255;i=5688+(h*24|0)|0;j=(((c[i>>2]|0)*7|0|0)/(g|0)|0)+1|0;c[i>>2]=(j|0)<1?1:j;h=h+1|0;}while((h|0)<66);return}function eH(){var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;b=i;d=c[26690]|0;if((d|0)!=0&(a[47648]|0)==0){e=(c[32056]|0)==0}else{c[32056]=0;e=1}f=c[32032]|0;g=c[32031]|0;h=c[32029]|0;j=c[32028]|0;k=c[32026]|0;l=c[32025]|0;m=c[11216+(k-1<<2)>>2]|0;n=c[32023]|0;o=c[32022]|0;p=(c[32091]|0)+(c[32016]|0)|0;q=c[32017]|0;r=c[32018]|0;s=c[32019]|0;t=c[32020]|0;u=c[32021]|0;if(e){v=c[9368+(d<<2)>>2]|0}else{v=42952}d=c[32024]|0;e=cT()|0;w=c[14926]|0;aI(109024,38656,(x=i,i=i+152|0,c[x>>2]=f,c[x+8>>2]=g,c[x+16>>2]=h,c[x+24>>2]=j,c[x+32>>2]=k,c[x+40>>2]=l,c[x+48>>2]=m,c[x+56>>2]=(n|0)<0?0:n,c[x+64>>2]=o,c[x+72>>2]=p,c[x+80>>2]=q,c[x+88>>2]=r,c[x+96>>2]=s,c[x+104>>2]=t,c[x+112>>2]=u,c[x+120>>2]=v,c[x+128>>2]=d,c[x+136>>2]=e,c[x+144>>2]=w,x)|0)|0;i=x;c[32092]=(c[32091]|0)+(c[32016]|0);fk(127632,128064,400)|0;i=b;return 109024}function eI(){var d=0,e=0;b[54512]=91;d=0;do{if((c[128064+(c[13056+(d<<3)>>2]<<2)>>2]|0)!=0){if((a[109025]|0)!=0){e=109024+(fj(109024)|0)|0;t=44;a[e]=t;t=t>>8;a[e+1|0]=t}e=109024+(fj(109024)|0)|0;t=34;a[e]=t;t=t>>8;a[e+1|0]=t;fo(109024,c[13060+(d<<3)>>2]|0)|0;e=109024+(fj(109024)|0)|0;t=34;a[e]=t;t=t>>8;a[e+1|0]=t}d=d+1|0;}while((d|0)<17);d=109024+(fj(109024)|0)|0;t=93;a[d]=t;t=t>>8;a[d+1|0]=t;return 109024}function eJ(d,e,f){d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0;do{if((c[14874]|0)==(d|0)){if(!((c[14872]|0)==(e|0)&(c[32044]|0)==0)){break}c[f>>2]=c[46672+(c[31896]<<3)+(a[3848]<<2)>>2];return}}while(0);g=a[107880+(d*17|0)+e|0]|0;h=g<<24>>24;L6:do{if(g<<24>>24==0){i=c[1070]|0;c[f>>2]=i;j=i}else{i=a[68960+(d*442|0)+(e*26|0)|0]|0;k=i<<24>>24;if(i<<24>>24==0){l=c[4280+(h<<2)>>2]|0;c[f>>2]=l;j=l;break}do{if((c[32044]|0)==0){if((a[49776+(d*17|0)+e|0]&3)==0){break}if(i<<24>>24==46){if(((c[31476]|0)%10|0|0)==0){while(1){l=((ai()|0)%57|0)+1|0;c[1814]=l;if((l|0)!=39){m=l;break}}}else{m=c[1814]|0}l=c[5320+(m<<2)>>2]|0;c[f>>2]=l;j=l;break L6}if(i<<24>>24==39&(c[32087]|0)==0){l=c[4280+(h<<2)>>2]|0;c[f>>2]=l;j=l;break L6}if((i-57&255)>>>0<9>>>0&(c[32053]|0)==0){l=c[4280+(h<<2)>>2]|0;c[f>>2]=l;j=l;break L6}else{l=c[5320+(k<<2)>>2]|0;c[f>>2]=l;j=l;break L6}}}while(0);k=c[4280+(h<<2)>>2]|0;c[f>>2]=k;j=k}}while(0);if((j|0)!=(c[1088]|0)){return}c[f>>2]=(b[118288+(d*34|0)+(e<<1)>>1]|0)+352;return}function eK(){var d=0,e=0,f=0,g=0,h=0;d=i;i=i+8|0;e=d|0;b[54512]=91;f=0;do{if((f|0)>0){g=109024+(fj(109024)|0)|0;t=44;a[g]=t;t=t>>8;a[g+1|0]=t}g=109024+(fj(109024)|0)|0;t=91;a[g]=t;t=t>>8;a[g+1|0]=t;g=0;do{if((g|0)>0){h=109024+(fj(109024)|0)|0;t=44;a[h]=t;t=t>>8;a[h+1|0]=t}eJ(f,g,e);h=109024+(fj(109024)|0)|0;aI(h|0,21856,(h=i,i=i+8|0,c[h>>2]=c[e>>2],h)|0)|0;i=h;g=g+1|0;}while((g|0)<17);g=109024+(fj(109024)|0)|0;t=93;a[g]=t;t=t>>8;a[g+1|0]=t;f=f+1|0;}while((f|0)<67);f=109024+(fj(109024)|0)|0;t=93;a[f]=t;t=t>>8;a[f+1|0]=t;i=d;return 109024}function eL(){fm(109024,129104)|0;a[129104]=0;return 109024}function eM(){return}function eN(){return}function eO(){return}function eP(){return}function eQ(b){b=b|0;var c=0;if((a[59504]|0)!=0){return}c=fj(129104)|0;a[129104+c|0]=b;a[c+129105|0]=0;return}function eR(b){b=b|0;if((a[59504]|0)!=0|(b|0)==0){return}fo(129104,b|0)|0;switch(a[b+((fj(b|0)|0)-1)|0]|0){case 46:case 33:case 58:case 44:case 63:case 41:case 93:{break};default:{return}}b=129104+(fj(129104)|0)|0;a[b]=a[19704]|0;a[b+1|0]=a[19705]|0;a[b+2|0]=a[19706]|0;return}function eS(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;e=i;i=i+16|0;f=e|0;if((a[59504]|0)!=0){i=e;return}g=f;c[g>>2]=d;c[g+4>>2]=0;aZ(129104+(fj(129104)|0)|0,b|0,f|0)|0;switch(a[129104+((fj(129104)|0)-1)|0]|0){case 46:case 33:case 58:case 44:case 63:case 41:case 93:{break};default:{i=e;return}}f=129104+(fj(129104)|0)|0;a[f]=a[19704]|0;a[f+1|0]=a[19705]|0;a[f+2|0]=a[19706]|0;i=e;return}function eT(b,d){b=b|0;d=d|0;var e=0;if((c[32044]|0)!=0){return}a[107880+(b*17|0)+d|0]=a[117112+(b*17|0)+d|0]|0;if((a[68960+(b*442|0)+(d*26|0)|0]|0)==0){return}e=49776+(b*17|0)+d|0;a[e]=a[e]|1;return}function eU(){return}function eV(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;if((c[32060]|0)==0){e=d+1|0;f=d-1|0;g=b+1|0;h=b-1|0}else{e=d+3|0;f=d-3|0;g=b+3|0;h=b-3|0}i=(c[32044]|0)==0;j=i?h:b;h=i?g:b;b=i?f:d;f=i?e:d;d=(j|0)<0?0:j;j=(h|0)>66?66:h;h=(b|0)<0?0:b;b=(f|0)>16?16:f;if((h|0)>(b|0)){return}f=(d|0)>(j|0);e=c[14874]|0;i=c[14872]|0;g=c[26696]|0;k=c[26694]|0;l=h;do{L10:do{if(!f){h=(l|0)==(k|0);if((l|0)==(i|0)){m=d;while(1){L15:do{if((m|0)==(e|0)){a[107880+(e*17|0)+i|0]=a[117112+(e*17|0)+i|0]|0}else{n=107880+(m*17|0)+i|0;o=a[117112+(m*17|0)+i|0]|0;do{if((a[n]|0)==o<<24>>24){if((m|0)==(g|0)&h){break}if((a[68960+(m*442|0)+(i*26|0)|0]|0)==0){break L15}if((a[49776+(m*17|0)+i|0]&1)!=0){break L15}}}while(0);a[n]=o;if((a[68960+(m*442|0)+(i*26|0)|0]|0)==0){break}p=49776+(m*17|0)+i|0;a[p]=a[p]|1}}while(0);m=m+1|0;if((m|0)>(j|0)){break L10}}}if(h){m=d;do{p=107880+(m*17|0)+k|0;q=a[117112+(m*17|0)+k|0]|0;do{if((a[p]|0)!=q<<24>>24|(m|0)==(g|0)){r=21}else{if((a[68960+(m*442|0)+(k*26|0)|0]|0)==0){break}if((a[49776+(m*17|0)+k|0]&1)==0){r=21}}}while(0);do{if((r|0)==21){r=0;a[p]=q;if((a[68960+(m*442|0)+(k*26|0)|0]|0)==0){break}s=49776+(m*17|0)+k|0;a[s]=a[s]|1}}while(0);m=m+1|0;}while((m|0)<=(j|0))}else{m=d;do{h=107880+(m*17|0)+l|0;q=a[117112+(m*17|0)+l|0]|0;do{if((a[h]|0)==q<<24>>24){if((a[68960+(m*442|0)+(l*26|0)|0]|0)==0){break}if((a[49776+(m*17|0)+l|0]&1)==0){r=27}}else{r=27}}while(0);do{if((r|0)==27){r=0;a[h]=q;if((a[68960+(m*442|0)+(l*26|0)|0]|0)==0){break}p=49776+(m*17|0)+l|0;a[p]=a[p]|1}}while(0);m=m+1|0;}while((m|0)<=(j|0))}}}while(0);l=l+1|0;}while((l|0)<=(b|0));return}function eW(){return}function eX(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return}function eY(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;if((c[32044]|0)!=0){i=g;return}h=c[47344+(e*36|0)+(f<<2)>>2]|0;do{if((a[98576]|0)!=0){f=fj(98576)|0;if((a[98576+(f-1)|0]|0)==91){break}e=98576+f|0;t=44;a[e]=t;t=t>>8;a[e+1|0]=t}}while(0);aI(98576+(fj(98576)|0)|0,17336,(e=i,i=i+24|0,c[e>>2]=b,c[e+8>>2]=d,c[e+16>>2]=h,e)|0)|0;i=e;i=g;return}function eZ(a){a=a|0;return c[7268+(a*72|0)>>2]|0}function e_(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;g=i;i=i+8|0;h=g|0;if((c[7268+(e*72|0)>>2]|0)<(f|0)|(c[32044]|0)!=0){i=g;return}do{if((a[98576]|0)!=0){j=fj(98576)|0;if((a[98576+(j-1)|0]|0)==91){break}k=98576+j|0;t=44;a[k]=t;t=t>>8;a[k+1|0]=t}}while(0);if((e|0)==0){eJ(b,d,h);k=98576+(fj(98576)|0)|0;j=c[h>>2]|0;h=c[7272+(f<<2)>>2]|0;l=c[7304+(f<<2)>>2]|0;aI(k|0,14936,(m=i,i=i+40|0,c[m>>2]=b,c[m+8>>2]=d,c[m+16>>2]=j,c[m+24>>2]=h,c[m+32>>2]=l,m)|0)|0;i=m;i=g;return}else{l=98576+(fj(98576)|0)|0;h=c[7272+(e*72|0)+(f<<2)>>2]|0;aI(l|0,17336,(m=i,i=i+24|0,c[m>>2]=b,c[m+8>>2]=d,c[m+16>>2]=h,m)|0)|0;i=m;i=g;return}}function e$(){var b=0,d=0;b=i;if((a[98576]|0)==0){a[109024]=a[43872]|0;a[109025]=a[43873]|0;a[109026]=a[43874]|0;i=b;return 109024}else{aI(109024,45760,(d=i,i=i+8|0,c[d>>2]=98576,d)|0)|0;i=d;a[98576]=0;i=b;return 109024}return 0}function e0(b){b=b|0;var c=0;if((a[98576]|0)==0){return}b=fj(98576)|0;if((a[98576+(b-1)|0]|0)==91){return}c=98576+b|0;t=5975133;a[c]=t;t=t>>8;a[c+1|0]=t;t=t>>8;a[c+2|0]=t;t=t>>8;a[c+3|0]=t;return}function e1(a){a=a|0;fm(118256,a|0)|0;return}function e2(a){a=a|0;fm(128040,a|0)|0;return}function e3(){return 128040}function e4(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;if((a[59712]|0)!=0){g=59712+(fj(59712)|0)|0;t=44;a[g]=t;t=t>>8;a[g+1|0]=t}aI(59712+(fj(59712)|0)|0,41168,(g=i,i=i+24|0,c[g>>2]=b,c[g+8>>2]=d,c[g+16>>2]=e,g)|0)|0;i=g;i=f;return}function e5(){var b=0,d=0;b=i;aI(109024,39968,(d=i,i=i+24|0,c[d>>2]=118256,c[d+8>>2]=128040,c[d+16>>2]=59712,d)|0)|0;i=d;a[118256]=0;a[128040]=0;a[59712]=0;i=b;return 109024}function e6(){return c[14874]|0}function e7(){return c[14872]|0}function e8(){var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;d=i;e=(a[(c[14872]|0)+(117112+((c[14874]|0)*17|0))|0]|0)==1;b[54512]=91;f=c[32024]|0;if((f|0)==0){g=0}else{h=109024+(fj(109024)|0)|0;aI(h|0,39288,(j=i,i=i+24|0,c[j>>2]=46,c[j+8>>2]=f,c[j+16>>2]=(f|0)==1?128616:37576,j)|0)|0;i=j;if(e){fk(109024+(fj(109024)|0)|0,36792,35)|0}f=109024+(fj(109024)|0)|0;a[f]=a[35832]|0;a[f+1|0]=a[35833]|0;a[f+2|0]=a[35834]|0;g=0}do{f=117080+g|0;if((a[f]|0)!=1){if((a[109025]|0)!=0){h=109024+(fj(109024)|0)|0;t=44;a[h]=t;t=t>>8;a[h+1|0]=t}h=109024+(fj(109024)|0)|0;k=dw(g)|0;aI(h|0,34984,(j=i,i=i+16|0,c[j>>2]=g+97,c[j+8>>2]=k,j)|0)|0;i=j;if(e){fk(109024+(fj(109024)|0)|0,36792,35)|0;l=0}else{l=1}k=a[f]|0;f=k<<24>>24;do{if((f-24|0)>>>0<10>>>0){if((l|0)==0){h=109024+(fj(109024)|0)|0;t=44;a[h]=t;t=t>>8;a[h+1|0]=t}h=(c[32036]|0)==(g|0)|(c[32079]|0)==(g|0);m=109024+(fj(109024)|0)|0;if(h){fk(m|0,33776,39)|0;n=0;break}else{fk(m|0,34392,32)|0;n=0;break}}else{n=l}}while(0);L25:do{switch(f|0){case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:case 32:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 45:case 46:case 47:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 60:case 61:case 69:case 70:case 93:case 94:case 96:case 97:case 98:case 99:case 100:{if((n|0)==0){m=109024+(fj(109024)|0)|0;t=44;a[m]=t;t=t>>8;a[m+1|0]=t}m=(c[32038]|0)==(g|0);h=109024+(fj(109024)|0)|0;if(m){fk(h|0,32824,38)|0;o=1;break L25}else{fk(h|0,33368,34)|0;o=1;break L25}break};default:{o=n}}}while(0);if((f|0)==57|(f|0)==55){if((o|0)==0){h=109024+(fj(109024)|0)|0;t=44;a[h]=t;t=t>>8;a[h+1|0]=t}fk(109024+(fj(109024)|0)|0,32520,35)|0;p=0}else{p=o}if(k<<24>>24==94){if((p|0)==0){h=109024+(fj(109024)|0)|0;t=44;a[h]=t;t=t>>8;a[h+1|0]=t}fk(109024+(fj(109024)|0)|0,32160,30)|0;q=0}else{q=p}if(k<<24>>24==56){if((q|0)==0){h=109024+(fj(109024)|0)|0;t=44;a[h]=t;t=t>>8;a[h+1|0]=t}fk(109024+(fj(109024)|0)|0,31776,34)|0}h=109024+(fj(109024)|0)|0;a[h]=a[35832]|0;a[h+1|0]=a[35833]|0;a[h+2|0]=a[35834]|0}g=g+1|0;}while((g|0)<26);g=109024+(fj(109024)|0)|0;t=93;a[g]=t;t=t>>8;a[g+1|0]=t;i=d;return 109024}function e9(){var a=0;a=c[14806]|0;if((a|0)==0){return}b5(a);c[14806]=0;return}function fa(){var a=0;a=c[14806]|0;if((a|0)!=0){b5(a);c[14806]=0}a=c4()|0;c[14806]=a;return c[a>>2]|0}function fb(b){b=b|0;fo(123904,b|0)|0;switch(a[b+((fj(b|0)|0)-1)|0]|0){case 46:case 33:case 58:case 44:case 63:case 41:case 93:{break};default:{return}}b=123904+(fj(123904)|0)|0;a[b]=a[19704]|0;a[b+1|0]=a[19705]|0;a[b+2|0]=a[19706]|0;return}function fc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;e=i;i=i+16|0;f=e|0;g=f;c[g>>2]=d;c[g+4>>2]=0;aZ(123904+(fj(123904)|0)|0,b|0,f|0)|0;switch(a[123904+((fj(123904)|0)-1)|0]|0){case 46:case 33:case 58:case 44:case 63:case 41:case 93:{break};default:{i=e;return}}f=123904+(fj(123904)|0)|0;a[f]=a[19704]|0;a[f+1|0]=a[19705]|0;a[f+2|0]=a[19706]|0;i=e;return}function fd(){fm(109024,123904)|0;a[123904]=0;return 109024}function fe(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ab=0,ac=0,ad=0,ae=0,af=0,ag=0,ah=0,ai=0,aj=0,ak=0,al=0,am=0,an=0,ao=0,ap=0,ar=0,as=0,at=0,au=0,av=0,aw=0,ax=0,ay=0,az=0,aB=0,aC=0,aD=0,aE=0,aF=0,aG=0,aH=0,aI=0;do{if(a>>>0<245>>>0){if(a>>>0<11>>>0){b=16}else{b=a+11&-8}d=b>>>3;e=c[32158]|0;f=e>>>(d>>>0);if((f&3|0)!=0){g=(f&1^1)+d|0;h=g<<1;i=128672+(h<<2)|0;j=128672+(h+2<<2)|0;h=c[j>>2]|0;k=h+8|0;l=c[k>>2]|0;do{if((i|0)==(l|0)){c[32158]=e&~(1<<g)}else{if(l>>>0<(c[32162]|0)>>>0){aq();return 0}m=l+12|0;if((c[m>>2]|0)==(h|0)){c[m>>2]=i;c[j>>2]=l;break}else{aq();return 0}}}while(0);l=g<<3;c[h+4>>2]=l|3;j=h+(l|4)|0;c[j>>2]=c[j>>2]|1;n=k;return n|0}if(b>>>0<=(c[32160]|0)>>>0){o=b;break}if((f|0)!=0){j=2<<d;l=f<<d&(j|-j);j=(l&-l)-1|0;l=j>>>12&16;i=j>>>(l>>>0);j=i>>>5&8;m=i>>>(j>>>0);i=m>>>2&4;p=m>>>(i>>>0);m=p>>>1&2;q=p>>>(m>>>0);p=q>>>1&1;r=(j|l|i|m|p)+(q>>>(p>>>0))|0;p=r<<1;q=128672+(p<<2)|0;m=128672+(p+2<<2)|0;p=c[m>>2]|0;i=p+8|0;l=c[i>>2]|0;do{if((q|0)==(l|0)){c[32158]=e&~(1<<r)}else{if(l>>>0<(c[32162]|0)>>>0){aq();return 0}j=l+12|0;if((c[j>>2]|0)==(p|0)){c[j>>2]=q;c[m>>2]=l;break}else{aq();return 0}}}while(0);l=r<<3;m=l-b|0;c[p+4>>2]=b|3;q=p;e=q+b|0;c[q+(b|4)>>2]=m|1;c[q+l>>2]=m;l=c[32160]|0;if((l|0)!=0){q=c[32163]|0;d=l>>>3;l=d<<1;f=128672+(l<<2)|0;k=c[32158]|0;h=1<<d;do{if((k&h|0)==0){c[32158]=k|h;s=f;t=128672+(l+2<<2)|0}else{d=128672+(l+2<<2)|0;g=c[d>>2]|0;if(g>>>0>=(c[32162]|0)>>>0){s=g;t=d;break}aq();return 0}}while(0);c[t>>2]=q;c[s+12>>2]=q;c[q+8>>2]=s;c[q+12>>2]=f}c[32160]=m;c[32163]=e;n=i;return n|0}l=c[32159]|0;if((l|0)==0){o=b;break}h=(l&-l)-1|0;l=h>>>12&16;k=h>>>(l>>>0);h=k>>>5&8;p=k>>>(h>>>0);k=p>>>2&4;r=p>>>(k>>>0);p=r>>>1&2;d=r>>>(p>>>0);r=d>>>1&1;g=c[128936+((h|l|k|p|r)+(d>>>(r>>>0))<<2)>>2]|0;r=g;d=g;p=(c[g+4>>2]&-8)-b|0;while(1){g=c[r+16>>2]|0;if((g|0)==0){k=c[r+20>>2]|0;if((k|0)==0){break}else{u=k}}else{u=g}g=(c[u+4>>2]&-8)-b|0;k=g>>>0<p>>>0;r=u;d=k?u:d;p=k?g:p}r=d;i=c[32162]|0;if(r>>>0<i>>>0){aq();return 0}e=r+b|0;m=e;if(r>>>0>=e>>>0){aq();return 0}e=c[d+24>>2]|0;f=c[d+12>>2]|0;do{if((f|0)==(d|0)){q=d+20|0;g=c[q>>2]|0;if((g|0)==0){k=d+16|0;l=c[k>>2]|0;if((l|0)==0){v=0;break}else{w=l;x=k}}else{w=g;x=q}while(1){q=w+20|0;g=c[q>>2]|0;if((g|0)!=0){w=g;x=q;continue}q=w+16|0;g=c[q>>2]|0;if((g|0)==0){break}else{w=g;x=q}}if(x>>>0<i>>>0){aq();return 0}else{c[x>>2]=0;v=w;break}}else{q=c[d+8>>2]|0;if(q>>>0<i>>>0){aq();return 0}g=q+12|0;if((c[g>>2]|0)!=(d|0)){aq();return 0}k=f+8|0;if((c[k>>2]|0)==(d|0)){c[g>>2]=f;c[k>>2]=q;v=f;break}else{aq();return 0}}}while(0);L201:do{if((e|0)!=0){f=d+28|0;i=128936+(c[f>>2]<<2)|0;do{if((d|0)==(c[i>>2]|0)){c[i>>2]=v;if((v|0)!=0){break}c[32159]=c[32159]&~(1<<c[f>>2]);break L201}else{if(e>>>0<(c[32162]|0)>>>0){aq();return 0}q=e+16|0;if((c[q>>2]|0)==(d|0)){c[q>>2]=v}else{c[e+20>>2]=v}if((v|0)==0){break L201}}}while(0);if(v>>>0<(c[32162]|0)>>>0){aq();return 0}c[v+24>>2]=e;f=c[d+16>>2]|0;do{if((f|0)!=0){if(f>>>0<(c[32162]|0)>>>0){aq();return 0}else{c[v+16>>2]=f;c[f+24>>2]=v;break}}}while(0);f=c[d+20>>2]|0;if((f|0)==0){break}if(f>>>0<(c[32162]|0)>>>0){aq();return 0}else{c[v+20>>2]=f;c[f+24>>2]=v;break}}}while(0);if(p>>>0<16>>>0){e=p+b|0;c[d+4>>2]=e|3;f=r+(e+4)|0;c[f>>2]=c[f>>2]|1}else{c[d+4>>2]=b|3;c[r+(b|4)>>2]=p|1;c[r+(p+b)>>2]=p;f=c[32160]|0;if((f|0)!=0){e=c[32163]|0;i=f>>>3;f=i<<1;q=128672+(f<<2)|0;k=c[32158]|0;g=1<<i;do{if((k&g|0)==0){c[32158]=k|g;y=q;z=128672+(f+2<<2)|0}else{i=128672+(f+2<<2)|0;l=c[i>>2]|0;if(l>>>0>=(c[32162]|0)>>>0){y=l;z=i;break}aq();return 0}}while(0);c[z>>2]=e;c[y+12>>2]=e;c[e+8>>2]=y;c[e+12>>2]=q}c[32160]=p;c[32163]=m}f=d+8|0;if((f|0)==0){o=b;break}else{n=f}return n|0}else{if(a>>>0>4294967231>>>0){o=-1;break}f=a+11|0;g=f&-8;k=c[32159]|0;if((k|0)==0){o=g;break}r=-g|0;i=f>>>8;do{if((i|0)==0){A=0}else{if(g>>>0>16777215>>>0){A=31;break}f=(i+1048320|0)>>>16&8;l=i<<f;h=(l+520192|0)>>>16&4;j=l<<h;l=(j+245760|0)>>>16&2;B=14-(h|f|l)+(j<<l>>>15)|0;A=g>>>((B+7|0)>>>0)&1|B<<1}}while(0);i=c[128936+(A<<2)>>2]|0;L9:do{if((i|0)==0){C=0;D=r;E=0}else{if((A|0)==31){F=0}else{F=25-(A>>>1)|0}d=0;m=r;p=i;q=g<<F;e=0;while(1){B=c[p+4>>2]&-8;l=B-g|0;if(l>>>0<m>>>0){if((B|0)==(g|0)){C=p;D=l;E=p;break L9}else{G=p;H=l}}else{G=d;H=m}l=c[p+20>>2]|0;B=c[p+16+(q>>>31<<2)>>2]|0;j=(l|0)==0|(l|0)==(B|0)?e:l;if((B|0)==0){C=G;D=H;E=j;break}else{d=G;m=H;p=B;q=q<<1;e=j}}}}while(0);if((E|0)==0&(C|0)==0){i=2<<A;r=k&(i|-i);if((r|0)==0){o=g;break}i=(r&-r)-1|0;r=i>>>12&16;e=i>>>(r>>>0);i=e>>>5&8;q=e>>>(i>>>0);e=q>>>2&4;p=q>>>(e>>>0);q=p>>>1&2;m=p>>>(q>>>0);p=m>>>1&1;I=c[128936+((i|r|e|q|p)+(m>>>(p>>>0))<<2)>>2]|0}else{I=E}if((I|0)==0){J=D;K=C}else{p=I;m=D;q=C;while(1){e=(c[p+4>>2]&-8)-g|0;r=e>>>0<m>>>0;i=r?e:m;e=r?p:q;r=c[p+16>>2]|0;if((r|0)!=0){p=r;m=i;q=e;continue}r=c[p+20>>2]|0;if((r|0)==0){J=i;K=e;break}else{p=r;m=i;q=e}}}if((K|0)==0){o=g;break}if(J>>>0>=((c[32160]|0)-g|0)>>>0){o=g;break}q=K;m=c[32162]|0;if(q>>>0<m>>>0){aq();return 0}p=q+g|0;k=p;if(q>>>0>=p>>>0){aq();return 0}e=c[K+24>>2]|0;i=c[K+12>>2]|0;do{if((i|0)==(K|0)){r=K+20|0;d=c[r>>2]|0;if((d|0)==0){j=K+16|0;B=c[j>>2]|0;if((B|0)==0){L=0;break}else{M=B;N=j}}else{M=d;N=r}while(1){r=M+20|0;d=c[r>>2]|0;if((d|0)!=0){M=d;N=r;continue}r=M+16|0;d=c[r>>2]|0;if((d|0)==0){break}else{M=d;N=r}}if(N>>>0<m>>>0){aq();return 0}else{c[N>>2]=0;L=M;break}}else{r=c[K+8>>2]|0;if(r>>>0<m>>>0){aq();return 0}d=r+12|0;if((c[d>>2]|0)!=(K|0)){aq();return 0}j=i+8|0;if((c[j>>2]|0)==(K|0)){c[d>>2]=i;c[j>>2]=r;L=i;break}else{aq();return 0}}}while(0);L59:do{if((e|0)!=0){i=K+28|0;m=128936+(c[i>>2]<<2)|0;do{if((K|0)==(c[m>>2]|0)){c[m>>2]=L;if((L|0)!=0){break}c[32159]=c[32159]&~(1<<c[i>>2]);break L59}else{if(e>>>0<(c[32162]|0)>>>0){aq();return 0}r=e+16|0;if((c[r>>2]|0)==(K|0)){c[r>>2]=L}else{c[e+20>>2]=L}if((L|0)==0){break L59}}}while(0);if(L>>>0<(c[32162]|0)>>>0){aq();return 0}c[L+24>>2]=e;i=c[K+16>>2]|0;do{if((i|0)!=0){if(i>>>0<(c[32162]|0)>>>0){aq();return 0}else{c[L+16>>2]=i;c[i+24>>2]=L;break}}}while(0);i=c[K+20>>2]|0;if((i|0)==0){break}if(i>>>0<(c[32162]|0)>>>0){aq();return 0}else{c[L+20>>2]=i;c[i+24>>2]=L;break}}}while(0);do{if(J>>>0<16>>>0){e=J+g|0;c[K+4>>2]=e|3;i=q+(e+4)|0;c[i>>2]=c[i>>2]|1}else{c[K+4>>2]=g|3;c[q+(g|4)>>2]=J|1;c[q+(J+g)>>2]=J;i=J>>>3;if(J>>>0<256>>>0){e=i<<1;m=128672+(e<<2)|0;r=c[32158]|0;j=1<<i;do{if((r&j|0)==0){c[32158]=r|j;O=m;P=128672+(e+2<<2)|0}else{i=128672+(e+2<<2)|0;d=c[i>>2]|0;if(d>>>0>=(c[32162]|0)>>>0){O=d;P=i;break}aq();return 0}}while(0);c[P>>2]=k;c[O+12>>2]=k;c[q+(g+8)>>2]=O;c[q+(g+12)>>2]=m;break}e=p;j=J>>>8;do{if((j|0)==0){Q=0}else{if(J>>>0>16777215>>>0){Q=31;break}r=(j+1048320|0)>>>16&8;i=j<<r;d=(i+520192|0)>>>16&4;B=i<<d;i=(B+245760|0)>>>16&2;l=14-(d|r|i)+(B<<i>>>15)|0;Q=J>>>((l+7|0)>>>0)&1|l<<1}}while(0);j=128936+(Q<<2)|0;c[q+(g+28)>>2]=Q;c[q+(g+20)>>2]=0;c[q+(g+16)>>2]=0;m=c[32159]|0;l=1<<Q;if((m&l|0)==0){c[32159]=m|l;c[j>>2]=e;c[q+(g+24)>>2]=j;c[q+(g+12)>>2]=e;c[q+(g+8)>>2]=e;break}if((Q|0)==31){R=0}else{R=25-(Q>>>1)|0}l=J<<R;m=c[j>>2]|0;while(1){if((c[m+4>>2]&-8|0)==(J|0)){break}S=m+16+(l>>>31<<2)|0;j=c[S>>2]|0;if((j|0)==0){T=151;break}else{l=l<<1;m=j}}if((T|0)==151){if(S>>>0<(c[32162]|0)>>>0){aq();return 0}else{c[S>>2]=e;c[q+(g+24)>>2]=m;c[q+(g+12)>>2]=e;c[q+(g+8)>>2]=e;break}}l=m+8|0;j=c[l>>2]|0;i=c[32162]|0;if(m>>>0<i>>>0){aq();return 0}if(j>>>0<i>>>0){aq();return 0}else{c[j+12>>2]=e;c[l>>2]=e;c[q+(g+8)>>2]=j;c[q+(g+12)>>2]=m;c[q+(g+24)>>2]=0;break}}}while(0);q=K+8|0;if((q|0)==0){o=g;break}else{n=q}return n|0}}while(0);K=c[32160]|0;if(o>>>0<=K>>>0){S=K-o|0;J=c[32163]|0;if(S>>>0>15>>>0){R=J;c[32163]=R+o;c[32160]=S;c[R+(o+4)>>2]=S|1;c[R+K>>2]=S;c[J+4>>2]=o|3}else{c[32160]=0;c[32163]=0;c[J+4>>2]=K|3;S=J+(K+4)|0;c[S>>2]=c[S>>2]|1}n=J+8|0;return n|0}J=c[32161]|0;if(o>>>0<J>>>0){S=J-o|0;c[32161]=S;J=c[32164]|0;K=J;c[32164]=K+o;c[K+(o+4)>>2]=S|1;c[J+4>>2]=o|3;n=J+8|0;return n|0}do{if((c[16936]|0)==0){J=aA(30)|0;if((J-1&J|0)==0){c[16938]=J;c[16937]=J;c[16939]=-1;c[16940]=-1;c[16941]=0;c[32269]=0;c[16936]=(aY(0)|0)&-16^1431655768;break}else{aq();return 0}}}while(0);J=o+48|0;S=c[16938]|0;K=o+47|0;R=S+K|0;Q=-S|0;S=R&Q;if(S>>>0<=o>>>0){n=0;return n|0}O=c[32268]|0;do{if((O|0)!=0){P=c[32266]|0;L=P+S|0;if(L>>>0<=P>>>0|L>>>0>O>>>0){n=0}else{break}return n|0}}while(0);L268:do{if((c[32269]&4|0)==0){O=c[32164]|0;L270:do{if((O|0)==0){T=181}else{L=O;P=129080;while(1){U=P|0;M=c[U>>2]|0;if(M>>>0<=L>>>0){V=P+4|0;if((M+(c[V>>2]|0)|0)>>>0>L>>>0){break}}M=c[P+8>>2]|0;if((M|0)==0){T=181;break L270}else{P=M}}if((P|0)==0){T=181;break}L=R-(c[32161]|0)&Q;if(L>>>0>=2147483647>>>0){W=0;break}m=aX(L|0)|0;e=(m|0)==((c[U>>2]|0)+(c[V>>2]|0)|0);X=e?m:-1;Y=e?L:0;Z=m;_=L;T=190}}while(0);do{if((T|0)==181){O=aX(0)|0;if((O|0)==-1){W=0;break}g=O;L=c[16937]|0;m=L-1|0;if((m&g|0)==0){$=S}else{$=S-g+(m+g&-L)|0}L=c[32266]|0;g=L+$|0;if(!($>>>0>o>>>0&$>>>0<2147483647>>>0)){W=0;break}m=c[32268]|0;if((m|0)!=0){if(g>>>0<=L>>>0|g>>>0>m>>>0){W=0;break}}m=aX($|0)|0;g=(m|0)==(O|0);X=g?O:-1;Y=g?$:0;Z=m;_=$;T=190}}while(0);L290:do{if((T|0)==190){m=-_|0;if((X|0)!=-1){aa=Y;ab=X;T=201;break L268}do{if((Z|0)!=-1&_>>>0<2147483647>>>0&_>>>0<J>>>0){g=c[16938]|0;O=K-_+g&-g;if(O>>>0>=2147483647>>>0){ac=_;break}if((aX(O|0)|0)==-1){aX(m|0)|0;W=Y;break L290}else{ac=O+_|0;break}}else{ac=_}}while(0);if((Z|0)==-1){W=Y}else{aa=ac;ab=Z;T=201;break L268}}}while(0);c[32269]=c[32269]|4;ad=W;T=198}else{ad=0;T=198}}while(0);do{if((T|0)==198){if(S>>>0>=2147483647>>>0){break}W=aX(S|0)|0;Z=aX(0)|0;if(!((Z|0)!=-1&(W|0)!=-1&W>>>0<Z>>>0)){break}ac=Z-W|0;Z=ac>>>0>(o+40|0)>>>0;Y=Z?W:-1;if((Y|0)!=-1){aa=Z?ac:ad;ab=Y;T=201}}}while(0);do{if((T|0)==201){ad=(c[32266]|0)+aa|0;c[32266]=ad;if(ad>>>0>(c[32267]|0)>>>0){c[32267]=ad}ad=c[32164]|0;L310:do{if((ad|0)==0){S=c[32162]|0;if((S|0)==0|ab>>>0<S>>>0){c[32162]=ab}c[32270]=ab;c[32271]=aa;c[32273]=0;c[32167]=c[16936];c[32166]=-1;S=0;do{Y=S<<1;ac=128672+(Y<<2)|0;c[128672+(Y+3<<2)>>2]=ac;c[128672+(Y+2<<2)>>2]=ac;S=S+1|0;}while(S>>>0<32>>>0);S=ab+8|0;if((S&7|0)==0){ae=0}else{ae=-S&7}S=aa-40-ae|0;c[32164]=ab+ae;c[32161]=S;c[ab+(ae+4)>>2]=S|1;c[ab+(aa-36)>>2]=40;c[32165]=c[16940]}else{S=129080;while(1){af=c[S>>2]|0;ag=S+4|0;ah=c[ag>>2]|0;if((ab|0)==(af+ah|0)){T=213;break}ac=c[S+8>>2]|0;if((ac|0)==0){break}else{S=ac}}do{if((T|0)==213){if((c[S+12>>2]&8|0)!=0){break}ac=ad;if(!(ac>>>0>=af>>>0&ac>>>0<ab>>>0)){break}c[ag>>2]=ah+aa;ac=c[32164]|0;Y=(c[32161]|0)+aa|0;Z=ac;W=ac+8|0;if((W&7|0)==0){ai=0}else{ai=-W&7}W=Y-ai|0;c[32164]=Z+ai;c[32161]=W;c[Z+(ai+4)>>2]=W|1;c[Z+(Y+4)>>2]=40;c[32165]=c[16940];break L310}}while(0);if(ab>>>0<(c[32162]|0)>>>0){c[32162]=ab}S=ab+aa|0;Y=129080;while(1){aj=Y|0;if((c[aj>>2]|0)==(S|0)){T=223;break}Z=c[Y+8>>2]|0;if((Z|0)==0){break}else{Y=Z}}do{if((T|0)==223){if((c[Y+12>>2]&8|0)!=0){break}c[aj>>2]=ab;S=Y+4|0;c[S>>2]=(c[S>>2]|0)+aa;S=ab+8|0;if((S&7|0)==0){ak=0}else{ak=-S&7}S=ab+(aa+8)|0;if((S&7|0)==0){al=0}else{al=-S&7}S=ab+(al+aa)|0;Z=S;W=ak+o|0;ac=ab+W|0;_=ac;K=S-(ab+ak)-o|0;c[ab+(ak+4)>>2]=o|3;do{if((Z|0)==(c[32164]|0)){J=(c[32161]|0)+K|0;c[32161]=J;c[32164]=_;c[ab+(W+4)>>2]=J|1}else{if((Z|0)==(c[32163]|0)){J=(c[32160]|0)+K|0;c[32160]=J;c[32163]=_;c[ab+(W+4)>>2]=J|1;c[ab+(J+W)>>2]=J;break}J=aa+4|0;X=c[ab+(J+al)>>2]|0;if((X&3|0)==1){$=X&-8;V=X>>>3;L355:do{if(X>>>0<256>>>0){U=c[ab+((al|8)+aa)>>2]|0;Q=c[ab+(aa+12+al)>>2]|0;R=128672+(V<<1<<2)|0;do{if((U|0)!=(R|0)){if(U>>>0<(c[32162]|0)>>>0){aq();return 0}if((c[U+12>>2]|0)==(Z|0)){break}aq();return 0}}while(0);if((Q|0)==(U|0)){c[32158]=c[32158]&~(1<<V);break}do{if((Q|0)==(R|0)){am=Q+8|0}else{if(Q>>>0<(c[32162]|0)>>>0){aq();return 0}m=Q+8|0;if((c[m>>2]|0)==(Z|0)){am=m;break}aq();return 0}}while(0);c[U+12>>2]=Q;c[am>>2]=U}else{R=S;m=c[ab+((al|24)+aa)>>2]|0;P=c[ab+(aa+12+al)>>2]|0;do{if((P|0)==(R|0)){O=al|16;g=ab+(J+O)|0;L=c[g>>2]|0;if((L|0)==0){e=ab+(O+aa)|0;O=c[e>>2]|0;if((O|0)==0){an=0;break}else{ao=O;ap=e}}else{ao=L;ap=g}while(1){g=ao+20|0;L=c[g>>2]|0;if((L|0)!=0){ao=L;ap=g;continue}g=ao+16|0;L=c[g>>2]|0;if((L|0)==0){break}else{ao=L;ap=g}}if(ap>>>0<(c[32162]|0)>>>0){aq();return 0}else{c[ap>>2]=0;an=ao;break}}else{g=c[ab+((al|8)+aa)>>2]|0;if(g>>>0<(c[32162]|0)>>>0){aq();return 0}L=g+12|0;if((c[L>>2]|0)!=(R|0)){aq();return 0}e=P+8|0;if((c[e>>2]|0)==(R|0)){c[L>>2]=P;c[e>>2]=g;an=P;break}else{aq();return 0}}}while(0);if((m|0)==0){break}P=ab+(aa+28+al)|0;U=128936+(c[P>>2]<<2)|0;do{if((R|0)==(c[U>>2]|0)){c[U>>2]=an;if((an|0)!=0){break}c[32159]=c[32159]&~(1<<c[P>>2]);break L355}else{if(m>>>0<(c[32162]|0)>>>0){aq();return 0}Q=m+16|0;if((c[Q>>2]|0)==(R|0)){c[Q>>2]=an}else{c[m+20>>2]=an}if((an|0)==0){break L355}}}while(0);if(an>>>0<(c[32162]|0)>>>0){aq();return 0}c[an+24>>2]=m;R=al|16;P=c[ab+(R+aa)>>2]|0;do{if((P|0)!=0){if(P>>>0<(c[32162]|0)>>>0){aq();return 0}else{c[an+16>>2]=P;c[P+24>>2]=an;break}}}while(0);P=c[ab+(J+R)>>2]|0;if((P|0)==0){break}if(P>>>0<(c[32162]|0)>>>0){aq();return 0}else{c[an+20>>2]=P;c[P+24>>2]=an;break}}}while(0);ar=ab+(($|al)+aa)|0;as=$+K|0}else{ar=Z;as=K}J=ar+4|0;c[J>>2]=c[J>>2]&-2;c[ab+(W+4)>>2]=as|1;c[ab+(as+W)>>2]=as;J=as>>>3;if(as>>>0<256>>>0){V=J<<1;X=128672+(V<<2)|0;P=c[32158]|0;m=1<<J;do{if((P&m|0)==0){c[32158]=P|m;at=X;au=128672+(V+2<<2)|0}else{J=128672+(V+2<<2)|0;U=c[J>>2]|0;if(U>>>0>=(c[32162]|0)>>>0){at=U;au=J;break}aq();return 0}}while(0);c[au>>2]=_;c[at+12>>2]=_;c[ab+(W+8)>>2]=at;c[ab+(W+12)>>2]=X;break}V=ac;m=as>>>8;do{if((m|0)==0){av=0}else{if(as>>>0>16777215>>>0){av=31;break}P=(m+1048320|0)>>>16&8;$=m<<P;J=($+520192|0)>>>16&4;U=$<<J;$=(U+245760|0)>>>16&2;Q=14-(J|P|$)+(U<<$>>>15)|0;av=as>>>((Q+7|0)>>>0)&1|Q<<1}}while(0);m=128936+(av<<2)|0;c[ab+(W+28)>>2]=av;c[ab+(W+20)>>2]=0;c[ab+(W+16)>>2]=0;X=c[32159]|0;Q=1<<av;if((X&Q|0)==0){c[32159]=X|Q;c[m>>2]=V;c[ab+(W+24)>>2]=m;c[ab+(W+12)>>2]=V;c[ab+(W+8)>>2]=V;break}if((av|0)==31){aw=0}else{aw=25-(av>>>1)|0}Q=as<<aw;X=c[m>>2]|0;while(1){if((c[X+4>>2]&-8|0)==(as|0)){break}ax=X+16+(Q>>>31<<2)|0;m=c[ax>>2]|0;if((m|0)==0){T=296;break}else{Q=Q<<1;X=m}}if((T|0)==296){if(ax>>>0<(c[32162]|0)>>>0){aq();return 0}else{c[ax>>2]=V;c[ab+(W+24)>>2]=X;c[ab+(W+12)>>2]=V;c[ab+(W+8)>>2]=V;break}}Q=X+8|0;m=c[Q>>2]|0;$=c[32162]|0;if(X>>>0<$>>>0){aq();return 0}if(m>>>0<$>>>0){aq();return 0}else{c[m+12>>2]=V;c[Q>>2]=V;c[ab+(W+8)>>2]=m;c[ab+(W+12)>>2]=X;c[ab+(W+24)>>2]=0;break}}}while(0);n=ab+(ak|8)|0;return n|0}}while(0);Y=ad;W=129080;while(1){ay=c[W>>2]|0;if(ay>>>0<=Y>>>0){az=c[W+4>>2]|0;aB=ay+az|0;if(aB>>>0>Y>>>0){break}}W=c[W+8>>2]|0}W=ay+(az-39)|0;if((W&7|0)==0){aC=0}else{aC=-W&7}W=ay+(az-47+aC)|0;ac=W>>>0<(ad+16|0)>>>0?Y:W;W=ac+8|0;_=ab+8|0;if((_&7|0)==0){aD=0}else{aD=-_&7}_=aa-40-aD|0;c[32164]=ab+aD;c[32161]=_;c[ab+(aD+4)>>2]=_|1;c[ab+(aa-36)>>2]=40;c[32165]=c[16940];c[ac+4>>2]=27;c[W>>2]=c[32270];c[W+4>>2]=c[32271];c[W+8>>2]=c[32272];c[W+12>>2]=c[32273];c[32270]=ab;c[32271]=aa;c[32273]=0;c[32272]=W;W=ac+28|0;c[W>>2]=7;if((ac+32|0)>>>0<aB>>>0){_=W;while(1){W=_+4|0;c[W>>2]=7;if((_+8|0)>>>0<aB>>>0){_=W}else{break}}}if((ac|0)==(Y|0)){break}_=ac-ad|0;W=Y+(_+4)|0;c[W>>2]=c[W>>2]&-2;c[ad+4>>2]=_|1;c[Y+_>>2]=_;W=_>>>3;if(_>>>0<256>>>0){K=W<<1;Z=128672+(K<<2)|0;S=c[32158]|0;m=1<<W;do{if((S&m|0)==0){c[32158]=S|m;aE=Z;aF=128672+(K+2<<2)|0}else{W=128672+(K+2<<2)|0;Q=c[W>>2]|0;if(Q>>>0>=(c[32162]|0)>>>0){aE=Q;aF=W;break}aq();return 0}}while(0);c[aF>>2]=ad;c[aE+12>>2]=ad;c[ad+8>>2]=aE;c[ad+12>>2]=Z;break}K=ad;m=_>>>8;do{if((m|0)==0){aG=0}else{if(_>>>0>16777215>>>0){aG=31;break}S=(m+1048320|0)>>>16&8;Y=m<<S;ac=(Y+520192|0)>>>16&4;W=Y<<ac;Y=(W+245760|0)>>>16&2;Q=14-(ac|S|Y)+(W<<Y>>>15)|0;aG=_>>>((Q+7|0)>>>0)&1|Q<<1}}while(0);m=128936+(aG<<2)|0;c[ad+28>>2]=aG;c[ad+20>>2]=0;c[ad+16>>2]=0;Z=c[32159]|0;Q=1<<aG;if((Z&Q|0)==0){c[32159]=Z|Q;c[m>>2]=K;c[ad+24>>2]=m;c[ad+12>>2]=ad;c[ad+8>>2]=ad;break}if((aG|0)==31){aH=0}else{aH=25-(aG>>>1)|0}Q=_<<aH;Z=c[m>>2]|0;while(1){if((c[Z+4>>2]&-8|0)==(_|0)){break}aI=Z+16+(Q>>>31<<2)|0;m=c[aI>>2]|0;if((m|0)==0){T=331;break}else{Q=Q<<1;Z=m}}if((T|0)==331){if(aI>>>0<(c[32162]|0)>>>0){aq();return 0}else{c[aI>>2]=K;c[ad+24>>2]=Z;c[ad+12>>2]=ad;c[ad+8>>2]=ad;break}}Q=Z+8|0;_=c[Q>>2]|0;m=c[32162]|0;if(Z>>>0<m>>>0){aq();return 0}if(_>>>0<m>>>0){aq();return 0}else{c[_+12>>2]=K;c[Q>>2]=K;c[ad+8>>2]=_;c[ad+12>>2]=Z;c[ad+24>>2]=0;break}}}while(0);ad=c[32161]|0;if(ad>>>0<=o>>>0){break}_=ad-o|0;c[32161]=_;ad=c[32164]|0;Q=ad;c[32164]=Q+o;c[Q+(o+4)>>2]=_|1;c[ad+4>>2]=o|3;n=ad+8|0;return n|0}}while(0);c[(aU()|0)>>2]=12;n=0;return n|0}function ff(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0;if((a|0)==0){return}b=a-8|0;d=b;e=c[32162]|0;if(b>>>0<e>>>0){aq()}f=c[a-4>>2]|0;g=f&3;if((g|0)==1){aq()}h=f&-8;i=a+(h-8)|0;j=i;L10:do{if((f&1|0)==0){k=c[b>>2]|0;if((g|0)==0){return}l=-8-k|0;m=a+l|0;n=m;o=k+h|0;if(m>>>0<e>>>0){aq()}if((n|0)==(c[32163]|0)){p=a+(h-4)|0;if((c[p>>2]&3|0)!=3){q=n;r=o;break}c[32160]=o;c[p>>2]=c[p>>2]&-2;c[a+(l+4)>>2]=o|1;c[i>>2]=o;return}p=k>>>3;if(k>>>0<256>>>0){k=c[a+(l+8)>>2]|0;s=c[a+(l+12)>>2]|0;t=128672+(p<<1<<2)|0;do{if((k|0)!=(t|0)){if(k>>>0<e>>>0){aq()}if((c[k+12>>2]|0)==(n|0)){break}aq()}}while(0);if((s|0)==(k|0)){c[32158]=c[32158]&~(1<<p);q=n;r=o;break}do{if((s|0)==(t|0)){u=s+8|0}else{if(s>>>0<e>>>0){aq()}v=s+8|0;if((c[v>>2]|0)==(n|0)){u=v;break}aq()}}while(0);c[k+12>>2]=s;c[u>>2]=k;q=n;r=o;break}t=m;p=c[a+(l+24)>>2]|0;v=c[a+(l+12)>>2]|0;do{if((v|0)==(t|0)){w=a+(l+20)|0;x=c[w>>2]|0;if((x|0)==0){y=a+(l+16)|0;z=c[y>>2]|0;if((z|0)==0){A=0;break}else{B=z;C=y}}else{B=x;C=w}while(1){w=B+20|0;x=c[w>>2]|0;if((x|0)!=0){B=x;C=w;continue}w=B+16|0;x=c[w>>2]|0;if((x|0)==0){break}else{B=x;C=w}}if(C>>>0<e>>>0){aq()}else{c[C>>2]=0;A=B;break}}else{w=c[a+(l+8)>>2]|0;if(w>>>0<e>>>0){aq()}x=w+12|0;if((c[x>>2]|0)!=(t|0)){aq()}y=v+8|0;if((c[y>>2]|0)==(t|0)){c[x>>2]=v;c[y>>2]=w;A=v;break}else{aq()}}}while(0);if((p|0)==0){q=n;r=o;break}v=a+(l+28)|0;m=128936+(c[v>>2]<<2)|0;do{if((t|0)==(c[m>>2]|0)){c[m>>2]=A;if((A|0)!=0){break}c[32159]=c[32159]&~(1<<c[v>>2]);q=n;r=o;break L10}else{if(p>>>0<(c[32162]|0)>>>0){aq()}k=p+16|0;if((c[k>>2]|0)==(t|0)){c[k>>2]=A}else{c[p+20>>2]=A}if((A|0)==0){q=n;r=o;break L10}}}while(0);if(A>>>0<(c[32162]|0)>>>0){aq()}c[A+24>>2]=p;t=c[a+(l+16)>>2]|0;do{if((t|0)!=0){if(t>>>0<(c[32162]|0)>>>0){aq()}else{c[A+16>>2]=t;c[t+24>>2]=A;break}}}while(0);t=c[a+(l+20)>>2]|0;if((t|0)==0){q=n;r=o;break}if(t>>>0<(c[32162]|0)>>>0){aq()}else{c[A+20>>2]=t;c[t+24>>2]=A;q=n;r=o;break}}else{q=d;r=h}}while(0);d=q;if(d>>>0>=i>>>0){aq()}A=a+(h-4)|0;e=c[A>>2]|0;if((e&1|0)==0){aq()}do{if((e&2|0)==0){if((j|0)==(c[32164]|0)){B=(c[32161]|0)+r|0;c[32161]=B;c[32164]=q;c[q+4>>2]=B|1;if((q|0)!=(c[32163]|0)){return}c[32163]=0;c[32160]=0;return}if((j|0)==(c[32163]|0)){B=(c[32160]|0)+r|0;c[32160]=B;c[32163]=q;c[q+4>>2]=B|1;c[d+B>>2]=B;return}B=(e&-8)+r|0;C=e>>>3;L113:do{if(e>>>0<256>>>0){u=c[a+h>>2]|0;g=c[a+(h|4)>>2]|0;b=128672+(C<<1<<2)|0;do{if((u|0)!=(b|0)){if(u>>>0<(c[32162]|0)>>>0){aq()}if((c[u+12>>2]|0)==(j|0)){break}aq()}}while(0);if((g|0)==(u|0)){c[32158]=c[32158]&~(1<<C);break}do{if((g|0)==(b|0)){D=g+8|0}else{if(g>>>0<(c[32162]|0)>>>0){aq()}f=g+8|0;if((c[f>>2]|0)==(j|0)){D=f;break}aq()}}while(0);c[u+12>>2]=g;c[D>>2]=u}else{b=i;f=c[a+(h+16)>>2]|0;t=c[a+(h|4)>>2]|0;do{if((t|0)==(b|0)){p=a+(h+12)|0;v=c[p>>2]|0;if((v|0)==0){m=a+(h+8)|0;k=c[m>>2]|0;if((k|0)==0){E=0;break}else{F=k;G=m}}else{F=v;G=p}while(1){p=F+20|0;v=c[p>>2]|0;if((v|0)!=0){F=v;G=p;continue}p=F+16|0;v=c[p>>2]|0;if((v|0)==0){break}else{F=v;G=p}}if(G>>>0<(c[32162]|0)>>>0){aq()}else{c[G>>2]=0;E=F;break}}else{p=c[a+h>>2]|0;if(p>>>0<(c[32162]|0)>>>0){aq()}v=p+12|0;if((c[v>>2]|0)!=(b|0)){aq()}m=t+8|0;if((c[m>>2]|0)==(b|0)){c[v>>2]=t;c[m>>2]=p;E=t;break}else{aq()}}}while(0);if((f|0)==0){break}t=a+(h+20)|0;u=128936+(c[t>>2]<<2)|0;do{if((b|0)==(c[u>>2]|0)){c[u>>2]=E;if((E|0)!=0){break}c[32159]=c[32159]&~(1<<c[t>>2]);break L113}else{if(f>>>0<(c[32162]|0)>>>0){aq()}g=f+16|0;if((c[g>>2]|0)==(b|0)){c[g>>2]=E}else{c[f+20>>2]=E}if((E|0)==0){break L113}}}while(0);if(E>>>0<(c[32162]|0)>>>0){aq()}c[E+24>>2]=f;b=c[a+(h+8)>>2]|0;do{if((b|0)!=0){if(b>>>0<(c[32162]|0)>>>0){aq()}else{c[E+16>>2]=b;c[b+24>>2]=E;break}}}while(0);b=c[a+(h+12)>>2]|0;if((b|0)==0){break}if(b>>>0<(c[32162]|0)>>>0){aq()}else{c[E+20>>2]=b;c[b+24>>2]=E;break}}}while(0);c[q+4>>2]=B|1;c[d+B>>2]=B;if((q|0)!=(c[32163]|0)){H=B;break}c[32160]=B;return}else{c[A>>2]=e&-2;c[q+4>>2]=r|1;c[d+r>>2]=r;H=r}}while(0);r=H>>>3;if(H>>>0<256>>>0){d=r<<1;e=128672+(d<<2)|0;A=c[32158]|0;E=1<<r;do{if((A&E|0)==0){c[32158]=A|E;I=e;J=128672+(d+2<<2)|0}else{r=128672+(d+2<<2)|0;h=c[r>>2]|0;if(h>>>0>=(c[32162]|0)>>>0){I=h;J=r;break}aq()}}while(0);c[J>>2]=q;c[I+12>>2]=q;c[q+8>>2]=I;c[q+12>>2]=e;return}e=q;I=H>>>8;do{if((I|0)==0){K=0}else{if(H>>>0>16777215>>>0){K=31;break}J=(I+1048320|0)>>>16&8;d=I<<J;E=(d+520192|0)>>>16&4;A=d<<E;d=(A+245760|0)>>>16&2;r=14-(E|J|d)+(A<<d>>>15)|0;K=H>>>((r+7|0)>>>0)&1|r<<1}}while(0);I=128936+(K<<2)|0;c[q+28>>2]=K;c[q+20>>2]=0;c[q+16>>2]=0;r=c[32159]|0;d=1<<K;do{if((r&d|0)==0){c[32159]=r|d;c[I>>2]=e;c[q+24>>2]=I;c[q+12>>2]=q;c[q+8>>2]=q}else{if((K|0)==31){L=0}else{L=25-(K>>>1)|0}A=H<<L;J=c[I>>2]|0;while(1){if((c[J+4>>2]&-8|0)==(H|0)){break}M=J+16+(A>>>31<<2)|0;E=c[M>>2]|0;if((E|0)==0){N=129;break}else{A=A<<1;J=E}}if((N|0)==129){if(M>>>0<(c[32162]|0)>>>0){aq()}else{c[M>>2]=e;c[q+24>>2]=J;c[q+12>>2]=q;c[q+8>>2]=q;break}}A=J+8|0;B=c[A>>2]|0;E=c[32162]|0;if(J>>>0<E>>>0){aq()}if(B>>>0<E>>>0){aq()}else{c[B+12>>2]=e;c[A>>2]=e;c[q+8>>2]=B;c[q+12>>2]=J;c[q+24>>2]=0;break}}}while(0);q=(c[32166]|0)-1|0;c[32166]=q;if((q|0)==0){O=129088}else{return}while(1){q=c[O>>2]|0;if((q|0)==0){break}else{O=q+8|0}}c[32166]=-1;return}function fg(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;if((a|0)==0){d=fe(b)|0;return d|0}if(b>>>0>4294967231>>>0){c[(aU()|0)>>2]=12;d=0;return d|0}if(b>>>0<11>>>0){e=16}else{e=b+11&-8}f=fh(a-8|0,e)|0;if((f|0)!=0){d=f+8|0;return d|0}f=fe(b)|0;if((f|0)==0){d=0;return d|0}e=c[a-4>>2]|0;g=(e&-8)-((e&3|0)==0?8:4)|0;fk(f|0,a|0,g>>>0<b>>>0?g:b)|0;ff(a);d=f;return d|0}function fh(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;d=a+4|0;e=c[d>>2]|0;f=e&-8;g=a;h=g+f|0;i=h;j=c[32162]|0;if(g>>>0<j>>>0){aq();return 0}k=e&3;if(!((k|0)!=1&g>>>0<h>>>0)){aq();return 0}l=g+(f|4)|0;m=c[l>>2]|0;if((m&1|0)==0){aq();return 0}if((k|0)==0){if(b>>>0<256>>>0){n=0;return n|0}do{if(f>>>0>=(b+4|0)>>>0){if((f-b|0)>>>0>c[16938]<<1>>>0){break}else{n=a}return n|0}}while(0);n=0;return n|0}if(f>>>0>=b>>>0){k=f-b|0;if(k>>>0<=15>>>0){n=a;return n|0}c[d>>2]=e&1|b|2;c[g+(b+4)>>2]=k|3;c[l>>2]=c[l>>2]|1;fi(g+b|0,k);n=a;return n|0}if((i|0)==(c[32164]|0)){k=(c[32161]|0)+f|0;if(k>>>0<=b>>>0){n=0;return n|0}l=k-b|0;c[d>>2]=e&1|b|2;c[g+(b+4)>>2]=l|1;c[32164]=g+b;c[32161]=l;n=a;return n|0}if((i|0)==(c[32163]|0)){l=(c[32160]|0)+f|0;if(l>>>0<b>>>0){n=0;return n|0}k=l-b|0;if(k>>>0>15>>>0){c[d>>2]=e&1|b|2;c[g+(b+4)>>2]=k|1;c[g+l>>2]=k;o=g+(l+4)|0;c[o>>2]=c[o>>2]&-2;p=g+b|0;q=k}else{c[d>>2]=e&1|l|2;e=g+(l+4)|0;c[e>>2]=c[e>>2]|1;p=0;q=0}c[32160]=q;c[32163]=p;n=a;return n|0}if((m&2|0)!=0){n=0;return n|0}p=(m&-8)+f|0;if(p>>>0<b>>>0){n=0;return n|0}q=p-b|0;e=m>>>3;L52:do{if(m>>>0<256>>>0){l=c[g+(f+8)>>2]|0;k=c[g+(f+12)>>2]|0;o=128672+(e<<1<<2)|0;do{if((l|0)!=(o|0)){if(l>>>0<j>>>0){aq();return 0}if((c[l+12>>2]|0)==(i|0)){break}aq();return 0}}while(0);if((k|0)==(l|0)){c[32158]=c[32158]&~(1<<e);break}do{if((k|0)==(o|0)){r=k+8|0}else{if(k>>>0<j>>>0){aq();return 0}s=k+8|0;if((c[s>>2]|0)==(i|0)){r=s;break}aq();return 0}}while(0);c[l+12>>2]=k;c[r>>2]=l}else{o=h;s=c[g+(f+24)>>2]|0;t=c[g+(f+12)>>2]|0;do{if((t|0)==(o|0)){u=g+(f+20)|0;v=c[u>>2]|0;if((v|0)==0){w=g+(f+16)|0;x=c[w>>2]|0;if((x|0)==0){y=0;break}else{z=x;A=w}}else{z=v;A=u}while(1){u=z+20|0;v=c[u>>2]|0;if((v|0)!=0){z=v;A=u;continue}u=z+16|0;v=c[u>>2]|0;if((v|0)==0){break}else{z=v;A=u}}if(A>>>0<j>>>0){aq();return 0}else{c[A>>2]=0;y=z;break}}else{u=c[g+(f+8)>>2]|0;if(u>>>0<j>>>0){aq();return 0}v=u+12|0;if((c[v>>2]|0)!=(o|0)){aq();return 0}w=t+8|0;if((c[w>>2]|0)==(o|0)){c[v>>2]=t;c[w>>2]=u;y=t;break}else{aq();return 0}}}while(0);if((s|0)==0){break}t=g+(f+28)|0;l=128936+(c[t>>2]<<2)|0;do{if((o|0)==(c[l>>2]|0)){c[l>>2]=y;if((y|0)!=0){break}c[32159]=c[32159]&~(1<<c[t>>2]);break L52}else{if(s>>>0<(c[32162]|0)>>>0){aq();return 0}k=s+16|0;if((c[k>>2]|0)==(o|0)){c[k>>2]=y}else{c[s+20>>2]=y}if((y|0)==0){break L52}}}while(0);if(y>>>0<(c[32162]|0)>>>0){aq();return 0}c[y+24>>2]=s;o=c[g+(f+16)>>2]|0;do{if((o|0)!=0){if(o>>>0<(c[32162]|0)>>>0){aq();return 0}else{c[y+16>>2]=o;c[o+24>>2]=y;break}}}while(0);o=c[g+(f+20)>>2]|0;if((o|0)==0){break}if(o>>>0<(c[32162]|0)>>>0){aq();return 0}else{c[y+20>>2]=o;c[o+24>>2]=y;break}}}while(0);if(q>>>0<16>>>0){c[d>>2]=p|c[d>>2]&1|2;y=g+(p|4)|0;c[y>>2]=c[y>>2]|1;n=a;return n|0}else{c[d>>2]=c[d>>2]&1|b|2;c[g+(b+4)>>2]=q|3;d=g+(p|4)|0;c[d>>2]=c[d>>2]|1;fi(g+b|0,q);n=a;return n|0}return 0}function fi(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;d=a;e=d+b|0;f=e;g=c[a+4>>2]|0;L1:do{if((g&1|0)==0){h=c[a>>2]|0;if((g&3|0)==0){return}i=d+(-h|0)|0;j=i;k=h+b|0;l=c[32162]|0;if(i>>>0<l>>>0){aq()}if((j|0)==(c[32163]|0)){m=d+(b+4)|0;if((c[m>>2]&3|0)!=3){n=j;o=k;break}c[32160]=k;c[m>>2]=c[m>>2]&-2;c[d+(4-h)>>2]=k|1;c[e>>2]=k;return}m=h>>>3;if(h>>>0<256>>>0){p=c[d+(8-h)>>2]|0;q=c[d+(12-h)>>2]|0;r=128672+(m<<1<<2)|0;do{if((p|0)!=(r|0)){if(p>>>0<l>>>0){aq()}if((c[p+12>>2]|0)==(j|0)){break}aq()}}while(0);if((q|0)==(p|0)){c[32158]=c[32158]&~(1<<m);n=j;o=k;break}do{if((q|0)==(r|0)){s=q+8|0}else{if(q>>>0<l>>>0){aq()}t=q+8|0;if((c[t>>2]|0)==(j|0)){s=t;break}aq()}}while(0);c[p+12>>2]=q;c[s>>2]=p;n=j;o=k;break}r=i;m=c[d+(24-h)>>2]|0;t=c[d+(12-h)>>2]|0;do{if((t|0)==(r|0)){u=16-h|0;v=d+(u+4)|0;w=c[v>>2]|0;if((w|0)==0){x=d+u|0;u=c[x>>2]|0;if((u|0)==0){y=0;break}else{z=u;A=x}}else{z=w;A=v}while(1){v=z+20|0;w=c[v>>2]|0;if((w|0)!=0){z=w;A=v;continue}v=z+16|0;w=c[v>>2]|0;if((w|0)==0){break}else{z=w;A=v}}if(A>>>0<l>>>0){aq()}else{c[A>>2]=0;y=z;break}}else{v=c[d+(8-h)>>2]|0;if(v>>>0<l>>>0){aq()}w=v+12|0;if((c[w>>2]|0)!=(r|0)){aq()}x=t+8|0;if((c[x>>2]|0)==(r|0)){c[w>>2]=t;c[x>>2]=v;y=t;break}else{aq()}}}while(0);if((m|0)==0){n=j;o=k;break}t=d+(28-h)|0;l=128936+(c[t>>2]<<2)|0;do{if((r|0)==(c[l>>2]|0)){c[l>>2]=y;if((y|0)!=0){break}c[32159]=c[32159]&~(1<<c[t>>2]);n=j;o=k;break L1}else{if(m>>>0<(c[32162]|0)>>>0){aq()}i=m+16|0;if((c[i>>2]|0)==(r|0)){c[i>>2]=y}else{c[m+20>>2]=y}if((y|0)==0){n=j;o=k;break L1}}}while(0);if(y>>>0<(c[32162]|0)>>>0){aq()}c[y+24>>2]=m;r=16-h|0;t=c[d+r>>2]|0;do{if((t|0)!=0){if(t>>>0<(c[32162]|0)>>>0){aq()}else{c[y+16>>2]=t;c[t+24>>2]=y;break}}}while(0);t=c[d+(r+4)>>2]|0;if((t|0)==0){n=j;o=k;break}if(t>>>0<(c[32162]|0)>>>0){aq()}else{c[y+20>>2]=t;c[t+24>>2]=y;n=j;o=k;break}}else{n=a;o=b}}while(0);a=c[32162]|0;if(e>>>0<a>>>0){aq()}y=d+(b+4)|0;z=c[y>>2]|0;do{if((z&2|0)==0){if((f|0)==(c[32164]|0)){A=(c[32161]|0)+o|0;c[32161]=A;c[32164]=n;c[n+4>>2]=A|1;if((n|0)!=(c[32163]|0)){return}c[32163]=0;c[32160]=0;return}if((f|0)==(c[32163]|0)){A=(c[32160]|0)+o|0;c[32160]=A;c[32163]=n;c[n+4>>2]=A|1;c[n+A>>2]=A;return}A=(z&-8)+o|0;s=z>>>3;L100:do{if(z>>>0<256>>>0){g=c[d+(b+8)>>2]|0;t=c[d+(b+12)>>2]|0;h=128672+(s<<1<<2)|0;do{if((g|0)!=(h|0)){if(g>>>0<a>>>0){aq()}if((c[g+12>>2]|0)==(f|0)){break}aq()}}while(0);if((t|0)==(g|0)){c[32158]=c[32158]&~(1<<s);break}do{if((t|0)==(h|0)){B=t+8|0}else{if(t>>>0<a>>>0){aq()}m=t+8|0;if((c[m>>2]|0)==(f|0)){B=m;break}aq()}}while(0);c[g+12>>2]=t;c[B>>2]=g}else{h=e;m=c[d+(b+24)>>2]|0;l=c[d+(b+12)>>2]|0;do{if((l|0)==(h|0)){i=d+(b+20)|0;p=c[i>>2]|0;if((p|0)==0){q=d+(b+16)|0;v=c[q>>2]|0;if((v|0)==0){C=0;break}else{D=v;E=q}}else{D=p;E=i}while(1){i=D+20|0;p=c[i>>2]|0;if((p|0)!=0){D=p;E=i;continue}i=D+16|0;p=c[i>>2]|0;if((p|0)==0){break}else{D=p;E=i}}if(E>>>0<a>>>0){aq()}else{c[E>>2]=0;C=D;break}}else{i=c[d+(b+8)>>2]|0;if(i>>>0<a>>>0){aq()}p=i+12|0;if((c[p>>2]|0)!=(h|0)){aq()}q=l+8|0;if((c[q>>2]|0)==(h|0)){c[p>>2]=l;c[q>>2]=i;C=l;break}else{aq()}}}while(0);if((m|0)==0){break}l=d+(b+28)|0;g=128936+(c[l>>2]<<2)|0;do{if((h|0)==(c[g>>2]|0)){c[g>>2]=C;if((C|0)!=0){break}c[32159]=c[32159]&~(1<<c[l>>2]);break L100}else{if(m>>>0<(c[32162]|0)>>>0){aq()}t=m+16|0;if((c[t>>2]|0)==(h|0)){c[t>>2]=C}else{c[m+20>>2]=C}if((C|0)==0){break L100}}}while(0);if(C>>>0<(c[32162]|0)>>>0){aq()}c[C+24>>2]=m;h=c[d+(b+16)>>2]|0;do{if((h|0)!=0){if(h>>>0<(c[32162]|0)>>>0){aq()}else{c[C+16>>2]=h;c[h+24>>2]=C;break}}}while(0);h=c[d+(b+20)>>2]|0;if((h|0)==0){break}if(h>>>0<(c[32162]|0)>>>0){aq()}else{c[C+20>>2]=h;c[h+24>>2]=C;break}}}while(0);c[n+4>>2]=A|1;c[n+A>>2]=A;if((n|0)!=(c[32163]|0)){F=A;break}c[32160]=A;return}else{c[y>>2]=z&-2;c[n+4>>2]=o|1;c[n+o>>2]=o;F=o}}while(0);o=F>>>3;if(F>>>0<256>>>0){z=o<<1;y=128672+(z<<2)|0;C=c[32158]|0;b=1<<o;do{if((C&b|0)==0){c[32158]=C|b;G=y;H=128672+(z+2<<2)|0}else{o=128672+(z+2<<2)|0;d=c[o>>2]|0;if(d>>>0>=(c[32162]|0)>>>0){G=d;H=o;break}aq()}}while(0);c[H>>2]=n;c[G+12>>2]=n;c[n+8>>2]=G;c[n+12>>2]=y;return}y=n;G=F>>>8;do{if((G|0)==0){I=0}else{if(F>>>0>16777215>>>0){I=31;break}H=(G+1048320|0)>>>16&8;z=G<<H;b=(z+520192|0)>>>16&4;C=z<<b;z=(C+245760|0)>>>16&2;o=14-(b|H|z)+(C<<z>>>15)|0;I=F>>>((o+7|0)>>>0)&1|o<<1}}while(0);G=128936+(I<<2)|0;c[n+28>>2]=I;c[n+20>>2]=0;c[n+16>>2]=0;o=c[32159]|0;z=1<<I;if((o&z|0)==0){c[32159]=o|z;c[G>>2]=y;c[n+24>>2]=G;c[n+12>>2]=n;c[n+8>>2]=n;return}if((I|0)==31){J=0}else{J=25-(I>>>1)|0}I=F<<J;J=c[G>>2]|0;while(1){if((c[J+4>>2]&-8|0)==(F|0)){break}K=J+16+(I>>>31<<2)|0;G=c[K>>2]|0;if((G|0)==0){L=126;break}else{I=I<<1;J=G}}if((L|0)==126){if(K>>>0<(c[32162]|0)>>>0){aq()}c[K>>2]=y;c[n+24>>2]=J;c[n+12>>2]=n;c[n+8>>2]=n;return}K=J+8|0;L=c[K>>2]|0;I=c[32162]|0;if(J>>>0<I>>>0){aq()}if(L>>>0<I>>>0){aq()}c[L+12>>2]=y;c[K>>2]=y;c[n+8>>2]=L;c[n+12>>2]=J;c[n+24>>2]=0;return}function fj(b){b=b|0;var c=0;c=b;while(a[c]|0){c=c+1|0}return c-b|0}function fk(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;f=b|0;if((b&3)==(d&3)){while(b&3){if((e|0)==0)return f|0;a[b]=a[d]|0;b=b+1|0;d=d+1|0;e=e-1|0}while((e|0)>=4){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0;e=e-4|0}}while((e|0)>0){a[b]=a[d]|0;b=b+1|0;d=d+1|0;e=e-1|0}return f|0}function fl(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=b+e|0;if((e|0)>=20){d=d&255;g=b&3;h=d|d<<8|d<<16|d<<24;i=f&~3;if(g){g=b+4-g|0;while((b|0)<(g|0)){a[b]=d;b=b+1|0}}while((b|0)<(i|0)){c[b>>2]=h;b=b+4|0}}while((b|0)<(f|0)){a[b]=d;b=b+1|0}return b-e|0}function fm(b,c){b=b|0;c=c|0;var d=0;do{a[b+d|0]=a[c+d|0];d=d+1|0}while(a[c+(d-1)|0]|0);return b|0}function fn(a){a=a|0;if((a|0)<65)return a|0;if((a|0)>90)return a|0;return a-65+97|0}function fo(b,c){b=b|0;c=c|0;var d=0,e=0;d=b+(fj(b)|0)|0;do{a[d+e|0]=a[c+e|0];e=e+1|0}while(a[c+(e-1)|0]|0);return b|0}function fp(a,b){a=a|0;b=b|0;return a0[a&1](b|0)|0}function fq(a){a=a|0;a1[a&1]()}function fr(a,b,c){a=a|0;b=b|0;c=c|0;return a2[a&1](b|0,c|0)|0}function fs(a,b){a=a|0;b=b|0;a3[a&1](b|0)}function ft(a){a=a|0;_(0);return 0}function fu(){_(1)}function fv(a,b){a=a|0;b=b|0;_(2);return 0}function fw(a){a=a|0;_(3)}
// EMSCRIPTEN_END_FUNCS
var a0=[ft,ft];var a1=[fu,fu];var a2=[fv,fv];var a3=[fw,fw];return{_olrs2:el,_strlen:fj,_eat:bC,_get_game_time:c1,_sell_gem:eb,_ULarnSetup:ex,_spell_tel:dM,_ohome2:er,_spell_ssp:dB,_memset:fl,_get_text_html:eL,_strcat:fo,_get_map_json:eK,_realloc:fg,_cast:dS,_takeoff:bt,_spell_cre:dD,_get_player_y:e7,_get_player_x:e6,_appraise2:d6,_sell_item:ej,_readscr:bq,_malloc:fe,_spell_cld:dG,_wield:bm,_wear:bn,_obanksub3:d8,_spell_sum:dQ,_spell_web:dC,_spell_bal:dF,_showcell:eV,_pay_taxes:em,_get_option_json:e5,_act:eB,_get_inventory_json:e8,_appraise3:d7,_pick_gender:c0,_buy_dope:ep,_move_world:eA,_spell_lit:dJ,_get_player_score_json:c9,_obrasslamp:cq,_get_header_html:fd,_spell_pha:dE,_spell_sle:dz,_spell_dry:dI,_deposit_money:d9,_restoregame:c5,_prompt_gender:c_,_get_effects_json:eI,_oaltar_m:bP,_spell_mle:dx,_set_difficulty:ev,_dropobj:bo,_spell_drl:dK,_spell_ply:dH,_spell_fgr:dL,_unwield:bu,_spell_sph:dO,_free:ff,_memcpy:fk,_get_status_json:eH,_get_savegame:fa,_tolower:fn,_free_savegame:e9,_spulverize:di,_buy_something:d2,_quaff:br,_action_teleport:ez,_spell_gen:dP,_withdraw_money:ea,_get_difficulty:ew,_spell_mkw:dN,_act_on_object:cp,_get_map_effect_json:e$,_strcpy:fm,_take_course:d5,_drop_gold:bp,runPostSets:bk,stackAlloc:a4,stackSave:a5,stackRestore:a6,setThrew:a7,setTempRet0:ba,setTempRet1:bb,setTempRet2:bc,setTempRet3:bd,setTempRet4:be,setTempRet5:bf,setTempRet6:bg,setTempRet7:bh,setTempRet8:bi,setTempRet9:bj,dynCall_ii:fp,dynCall_v:fq,dynCall_iii:fr,dynCall_vi:fs}})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_iii": invoke_iii, "invoke_vi": invoke_vi, "_llvm_lifetime_end": _llvm_lifetime_end, "_rand": _rand, "_feof": _feof, "_snprintf": _snprintf, "_fgetc": _fgetc, "_llvm_va_end": _llvm_va_end, "_fread": _fread, "_fclose": _fclose, "_chmod": _chmod, "_abort": _abort, "_fprintf": _fprintf, "_pread": _pread, "_fgets": _fgets, "_close": _close, "_fflush": _fflush, "_fopen": _fopen, "__reallyNegative": __reallyNegative, "_fputc": _fputc, "_emscripten_asm_const": _emscripten_asm_const, "_sysconf": _sysconf, "_open": _open, "___setErrNo": ___setErrNo, "_fwrite": _fwrite, "_strncmp": _strncmp, "_send": _send, "_write": _write, "_fputs": _fputs, "_sprintf": _sprintf, "_srand": _srand, "_isspace": _isspace, "_read": _read, "__formatString": __formatString, "_unlink": _unlink, "_recv": _recv, "_pwrite": _pwrite, "_perror": _perror, "_puts": _puts, "_fsync": _fsync, "_strerror_r": _strerror_r, "___errno_location": ___errno_location, "_strerror": _strerror, "_llvm_lifetime_start": _llvm_lifetime_start, "_sbrk": _sbrk, "_time": _time, "_vsprintf": _vsprintf, "_strcmp": _strcmp, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "NaN": NaN, "Infinity": Infinity }, buffer);
var _olrs2 = Module["_olrs2"] = asm["_olrs2"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _eat = Module["_eat"] = asm["_eat"];
var _get_game_time = Module["_get_game_time"] = asm["_get_game_time"];
var _sell_gem = Module["_sell_gem"] = asm["_sell_gem"];
var _ULarnSetup = Module["_ULarnSetup"] = asm["_ULarnSetup"];
var _spell_tel = Module["_spell_tel"] = asm["_spell_tel"];
var _ohome2 = Module["_ohome2"] = asm["_ohome2"];
var _spell_ssp = Module["_spell_ssp"] = asm["_spell_ssp"];
var _memset = Module["_memset"] = asm["_memset"];
var _get_text_html = Module["_get_text_html"] = asm["_get_text_html"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _get_map_json = Module["_get_map_json"] = asm["_get_map_json"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _cast = Module["_cast"] = asm["_cast"];
var _takeoff = Module["_takeoff"] = asm["_takeoff"];
var _spell_cre = Module["_spell_cre"] = asm["_spell_cre"];
var _get_player_y = Module["_get_player_y"] = asm["_get_player_y"];
var _get_player_x = Module["_get_player_x"] = asm["_get_player_x"];
var _appraise2 = Module["_appraise2"] = asm["_appraise2"];
var _sell_item = Module["_sell_item"] = asm["_sell_item"];
var _readscr = Module["_readscr"] = asm["_readscr"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _spell_cld = Module["_spell_cld"] = asm["_spell_cld"];
var _wield = Module["_wield"] = asm["_wield"];
var _wear = Module["_wear"] = asm["_wear"];
var _obanksub3 = Module["_obanksub3"] = asm["_obanksub3"];
var _spell_sum = Module["_spell_sum"] = asm["_spell_sum"];
var _spell_web = Module["_spell_web"] = asm["_spell_web"];
var _spell_bal = Module["_spell_bal"] = asm["_spell_bal"];
var _showcell = Module["_showcell"] = asm["_showcell"];
var _pay_taxes = Module["_pay_taxes"] = asm["_pay_taxes"];
var _get_option_json = Module["_get_option_json"] = asm["_get_option_json"];
var _act = Module["_act"] = asm["_act"];
var _get_inventory_json = Module["_get_inventory_json"] = asm["_get_inventory_json"];
var _appraise3 = Module["_appraise3"] = asm["_appraise3"];
var _pick_gender = Module["_pick_gender"] = asm["_pick_gender"];
var _buy_dope = Module["_buy_dope"] = asm["_buy_dope"];
var _move_world = Module["_move_world"] = asm["_move_world"];
var _spell_lit = Module["_spell_lit"] = asm["_spell_lit"];
var _get_player_score_json = Module["_get_player_score_json"] = asm["_get_player_score_json"];
var _obrasslamp = Module["_obrasslamp"] = asm["_obrasslamp"];
var _get_header_html = Module["_get_header_html"] = asm["_get_header_html"];
var _spell_pha = Module["_spell_pha"] = asm["_spell_pha"];
var _spell_sle = Module["_spell_sle"] = asm["_spell_sle"];
var _spell_dry = Module["_spell_dry"] = asm["_spell_dry"];
var _deposit_money = Module["_deposit_money"] = asm["_deposit_money"];
var _restoregame = Module["_restoregame"] = asm["_restoregame"];
var _prompt_gender = Module["_prompt_gender"] = asm["_prompt_gender"];
var _get_effects_json = Module["_get_effects_json"] = asm["_get_effects_json"];
var _oaltar_m = Module["_oaltar_m"] = asm["_oaltar_m"];
var _spell_mle = Module["_spell_mle"] = asm["_spell_mle"];
var _set_difficulty = Module["_set_difficulty"] = asm["_set_difficulty"];
var _dropobj = Module["_dropobj"] = asm["_dropobj"];
var _spell_drl = Module["_spell_drl"] = asm["_spell_drl"];
var _spell_ply = Module["_spell_ply"] = asm["_spell_ply"];
var _spell_fgr = Module["_spell_fgr"] = asm["_spell_fgr"];
var _unwield = Module["_unwield"] = asm["_unwield"];
var _spell_sph = Module["_spell_sph"] = asm["_spell_sph"];
var _free = Module["_free"] = asm["_free"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _get_status_json = Module["_get_status_json"] = asm["_get_status_json"];
var _get_savegame = Module["_get_savegame"] = asm["_get_savegame"];
var _tolower = Module["_tolower"] = asm["_tolower"];
var _free_savegame = Module["_free_savegame"] = asm["_free_savegame"];
var _spulverize = Module["_spulverize"] = asm["_spulverize"];
var _buy_something = Module["_buy_something"] = asm["_buy_something"];
var _quaff = Module["_quaff"] = asm["_quaff"];
var _action_teleport = Module["_action_teleport"] = asm["_action_teleport"];
var _spell_gen = Module["_spell_gen"] = asm["_spell_gen"];
var _withdraw_money = Module["_withdraw_money"] = asm["_withdraw_money"];
var _get_difficulty = Module["_get_difficulty"] = asm["_get_difficulty"];
var _spell_mkw = Module["_spell_mkw"] = asm["_spell_mkw"];
var _act_on_object = Module["_act_on_object"] = asm["_act_on_object"];
var _get_map_effect_json = Module["_get_map_effect_json"] = asm["_get_map_effect_json"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _take_course = Module["_take_course"] = asm["_take_course"];
var _drop_gold = Module["_drop_gold"] = asm["_drop_gold"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}
Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  initialStackTop = STACKTOP;
  try {
    var ret = Module['_main'](argc, argv, 0);
    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}
function run(args) {
  args = args || Module['arguments'];
  if (preloadStartTime === null) preloadStartTime = Date.now();
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }
  preRun();
  if (runDependencies > 0) {
    // a preRun added a dependency, run will be called later
    return;
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    Module['calledRun'] = true;
    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }
    postRun();
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;
function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  // exit the runtime
  exitRuntime();
  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371
  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;
function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }
  ABORT = true;
  EXITSTATUS = 1;
  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
// {{MODULE_ADDITIONS}}
